[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "## Trackr"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-W12-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W12-2/tp/actions)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Trackr helps teaching assistants (TAs) manage the details of their students. It centers around the Command Line Interface (CLI), allowing for quick and easy management of student records."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "## Site Map"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   [User Guide](docs/UserGuide.md)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   [Developer Guide](docs/DeveloperGuide.md)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   [About Us](docs/AboutUs.md)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "## Acknowledgements"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   This application is built on the AddressBook-Level-3 project developed by SE-EDU initiative. For more information, you may wish to visit their [website](https://se-education.org)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "## Licence: [MIT](LICENSE)"
      }
    ],
    "authorContributionMap": {
      "fanminj": 17,
      "-": 3
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "run {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    archiveName \u003d \u0027trackr.jar\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "fanminj": 6,
      "-": 70
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "# About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Trackr is designed and developed by the [CS2013T-W12-2](https://github.com/AY2021S1-CS2103T-W12-2) team."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "### Juan Davin Lie"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003cimg src\u003d\"images/juandavinlie.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "[[homepage](http://www.comp.nus.edu.sg/~damithch)]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "[[github](https://github.com/juandavinlie)]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "-   Role: Programmer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "-   Hobby: Swimming and eating"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "### Sean Tay"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "\u003cimg src\u003d\"images/seantaysl.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "[[github](http://github.com/seantaysl)]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "-   Role: Programmer"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "### Ethan Noah Rozario"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "\u003cimg src\u003d\"images/ethanthegoondu.png\"  width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "[[github](http://github.com/ethanthegoondu)]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "-   Role: Programmer"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "euzintan"
        },
        "content": "### Tan Eu Zin"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "euzintan"
        },
        "content": "\u003cimg src\u003d\"images/euzintan.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "euzintan"
        },
        "content": "[[github](http://github.com/euzintan)]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "euzintan"
        },
        "content": "-   Role: Programmer"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "### Jian Fanmin"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "\u003cimg src\u003d\"images/fanminj.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": "[[github](http://github.com/fanminj)][[portfolio](team/fanminj.md)]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   Role: Programmer"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 4,
      "EthanTheGoondu": 4,
      "euzintan": 4,
      "fanminj": 6,
      "juandavinlie": 5,
      "-": 26
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "euzintan"
        },
        "content": "# **Trackr - Developer Guide**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "euzintan"
        },
        "content": "by Team W12-2"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "euzintan"
        },
        "content": "## **Table of Contents**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "* [Section 1 - Preface](#section-1---preface)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "* [Section 2 - Setting up, getting started](#section-2---setting-up-getting-started)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "* [Section 3 - Design](#section-3---design)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    * [3.1 - High-Level Architecture](#section-31---high-level-architecture)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    * [3.2 - UI Component](#section-32---ui-component)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    * [3.3 - Logic Component](#section-33---logic-component)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    * [3.4 - Model Component](#section-34---model-component)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    * [3.5 - Storage Component](#section-35---storage-component)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    * [3.6 - Common Classes](#section-36---common-classes)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "* [Section 4 - Implementation](#section-4---implementation)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    * [4.1 - Add feature](#section-41---add-feature)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    * [4.2 - Undo/redo feature](#section-42---proposed-undoredo-feature)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    * [4.3 - Data saving and loading](#section-43---data-saving-and-loading)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "* [Section 5 - Documentation, logging, testing, configuration, dev-ops](#section-5---documentation-logging-testing-configuration-dev-ops)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "* [Section 6 - Appendix](#section-6---appendix)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "euzintan"
        },
        "content": "## **Section 1 - Preface**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "euzintan"
        },
        "content": "This is a Developer Guide to Trackr. A student and task management system for Teaching Assistants of all faculties who want to manage their students from various modules and tutorial groups, all in one place."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "---"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "euzintan"
        },
        "content": "## **Section 2 - Setting up, getting started**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "---"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "euzintan"
        },
        "content": "## **Section 3 - Design**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "euzintan"
        },
        "content": "### Section 3.1 - High-Level Architecture"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": "The **_Architecture Diagram_** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fanminj"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "euzintan"
        },
        "content": "### Section 3.2 - UI component"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "euzintan"
        },
        "content": "The UI Component defines what the user will see and interact with while using Trackr. `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `ModuleListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "euzintan"
        },
        "content": "### Section 3.3 - Logic component"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "euzintan"
        },
        "content": "### Section 3.4 - Model component"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "euzintan"
        },
        "content": "-   stores the Trackr data."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "euzintan"
        },
        "content": "-   exposes unmodifiable `ObservableList\u003cModule\u003e`, `ObservableList\u003cTutorialGroup\u003e` and `ObservableList\u003cStudent\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   does not depend on any of the other three components."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "euzintan"
        },
        "content": "### Section 3.5 - Storage component"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "-   can save the module data in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fanminj"
        },
        "content": "### Section 3.6 - Common classes"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fanminj"
        },
        "content": "---"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "euzintan"
        },
        "content": "## **Section 4 - Implementation**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "euzintan"
        },
        "content": "### Section 4.1 - Add feature"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "#### Overview"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fanminj"
        },
        "content": "The Add feature in Trackr enables users to easily add models to the app. Users will be able to keep track of models they are"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "in charge of."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "There are three types of models:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "- `Module`: The current module the user is teaching"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "- `TutorialGroup`: The tutorial groups that the user is teaching"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "- `Student`: The students currently being taught by the user"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "Trackr contains a `UniqueList\u003cModule\u003e`, which in turn, contains the modules taught by the user. Each Add command"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "for `Module`, `TutorialGroup`, and `Student` is split into `AddModuleCommand`, `AddTutorialGroupCommand`, and `AddStudentCommand`."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "Each command class extends `Command`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Given below is an example of the interaction between the Model and the `AddModuleCommand` of Trackr."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "fanminj"
        },
        "content": "![AddModSequenceDiagram](images/AddModSequenceDiagram.png)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "#### Design Considerations"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "**Aspect: List to contain the models**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "- Option 1: Generic `UniqueList` that contains the models"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    - Pros: Abstraction,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    - Cons: Harder to implement"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "- Option 2: Seperate `UniqueList` for each model such as `UniqueModuleList`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    - Pros: Easier to implement"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    - Cons: More repetitive code"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "euzintan"
        },
        "content": "### Section 4.2 - \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   `VersionedAddressBook#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   `VersionedAddressBook#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …` command. This is the behaviour that most modern desktop applications follow."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    -   Pros: Easy to implement."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    -   Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    itself."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    -   Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    -   Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "euzintan"
        },
        "content": "### Section 4.3 - Data saving and loading"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "The data saving and loading mechanism is facilitated by `JsonModuleStorage`. It has the operations to save and read data written in Json format to represent modules and their attributes such as tutorial groups and students, stored internally in `StorageManager` as a `moduleStorage`. Additionally it implements the following operations:"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "- `JsonModuleStorage#getModuleFilePath()` — Obtains the file path of which the Json file representing the data is to be saved to."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "- `JsonModuleStorage#readModuleList()` — Reads the Json file found in the stores file path representing the module list and returns a ReadOnlyTrackr\u0026lt;Module\u0026gt; representing the modules saved in the Json file along with their attributes such as tutorial groups and students."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "- `JsonModuleStorage#saveModuleList(ReadOnlyTrackr\u003cModule\u003e moduleList)` — Writes the Json file representing the module list based on the `ReadOnlyTrackr\u003cModule\u003e` passed into the operation, saving the Json file representing the modules along with their attributes such as tutorial groups and students in the stored file path."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "These operations are exposed in the `ModuleStorage` interface as `ModelStorage#getModuleFilePath()`, `ModelStorage#readModuleList()` and `ModuleStorage#saveModuleList(ReadOnlyTrackr\u003cModule\u003e moduleList)` respectively."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "The data stored in `JsonModuleStorage` is designed in a nested manner, `JsonModuleStorage` contains `JsonSerializableModuleList` which is a class that is used by the `Jackson` class for conversion to and from the Json format. `JsonSerializableModuleList` stores a list of `JsonAdaptedModule` which stores a list of `JsonAdaptedTutorialGroup` which stores a list of `JsonAdaptedStudent` which also stores a list of `JsonAdaptedTag`. Due to the nature of this nesting all these attributes are stored in a single Json file which branches out to these attributes, stored in a file called `modulelist.json`."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "Saving and loading is done by the external class `JsonUtil`, who\u0027s static methods allow for the conversion of data in Json files. The methods used are:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "- `JsonUtil#readJsonFile(Path filePath, Class\u003cT\u003e classOfObjectToDeserialize)` — Reads the Json file found at the file path, and converts it into the object of class T by using an `ObjectMapper`."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "- `JsonUtil#saveJsonFile(T jsonFile, Path filePath)` — Converts the object of class T into a Json file at the file path using the `FileUtil`."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "Given below is an example usage scenario and how the load mechanism behaves in every step."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "Step 1. The user launches the application. The MainApp will seek for a ModuleStorage and pass it to the StorageManager who will call `readModuleList(Path filePath)` to attempt to read module data from the Json file. If the file does not already exist, a new Json file is created."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "Step 2. The `JsonSerializableModuleList` is broken down into individual `JsonAdaptedModule` objects that are also converted into `Module` objects. To fill these modules with their identity fields such as `moduleId`, the Json file is read and the values of the fields are used to construct the `Module`. For the data fields such as the list of `TutorialGroup` objects, the list of `JsonAdaptedTutorialGroup` is converted into their corresponding class `TutorialGroup`."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "Step 3. The process is repeated in `JsonAdaptedTutorialGroup` to obtain the list of Student objects by converting `JsonAdaptedStudent` objects."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "Step 4. Once all layers of the Json objects have been converted to their corresponding class, the module list is ready and is used by `StorageManager`, available to be used by `ModelManager` in future to display these objects in the UI."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "The following activity diagram summarizes how data from the Json file is read and loaded when a user starts up the application:"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "![LoadJsonActivityDiagram](images/LoadJsonActivityDiagram.png)"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "##### Aspect: How the Json file is structured."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "-   **Alternative 1 (current choice):** Saves the entire module list in a single file, nesting all internal components."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    -   Pros: Easy to implement due to abstraction allowing conversion process to be done."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    -   Cons: Easier for file to get corrupted, and will lead to massive lost of data should data corruption occur."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "-   **Alternative 2:** Saving lists of modules, tutorial groups, and students in separate Json files."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    -   Pros: Easier to test each list individually to check the Json structure of each object type, and data corruption will lead to only data in separate lists to be lost (e.g. A corrupted `TutorialGroup` list will lead to no loss in the `Module` list)"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    -   Cons: Difficult to reconstruct the Json classes into the native classes and more data required to be stored for `StorageManager` to know which objects belong to which (e.g. Which `Module` a `TutorialGroup` belongs to)."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "fanminj"
        },
        "content": "---"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "euzintan"
        },
        "content": "## **Section 5 - Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "fanminj"
        },
        "content": "---"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "euzintan"
        },
        "content": "# **Section 6 - Appendix**"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   has a need to manage a significant number of students"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   prefer desktop apps over other types"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   can type fast"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   prefers typing to mouse interactions"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "**Value proposition**: manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                               | I want to …​                                                          | So that I can…​                                                 |"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "fanminj"
        },
        "content": "| -------- | ------------------------------------- | --------------------------------------------------------------------- | --------------------------------------------------------------- |"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "| `* * *`  | TA                                    | add/delete students to my list                                        | easily categorize them                                          |"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "| `* * *`  | TA                                    | add/delete modules                                                    |                                                                 |"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "| `* * *`  | TA                                    | rename a module                                                       | correct any errors                                              |"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "| `* * *`  | TA who needs to contact many students | search a person by name or module                                     | get their contact details                                       |"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "| `* * *`  | TA managing many modules              | have a checklist of the things I want to do in each tutorial          | remember what I need to cover in each tutorial                  |"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "| `* * *`  | TA                                    | save my data                                                          | continue where I left off                                       |"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "| `* * *`  | TA                                    | update a checklist of task such as deleting or marking a task as done | know what to do and keep track of the tasks that have been done |"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "fanminj"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "(For all use cases below, the **System** is the `Trackr` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "fanminj"
        },
        "content": "**Use case: UC01 - Add a person**"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "2.  Trackr shows a list of persons"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "3.  User requests to add a specific person to the list"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "4.  Trackr adds the person"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   2a. Incorrect input format"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    -   2a1. Trackr shows an error message"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    Use Case resumes at 2"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "fanminj"
        },
        "content": "**Use case: UC02 - Delete a person**"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "2.  Trackr shows a list of persons"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to delete a specific person in the list"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "4.  Trackr deletes the person"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   2a. The list is empty."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   3a. The given index is invalid."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    -   3a1. Trackr shows an error message."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "        Use case resumes at step 2."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "fanminj"
        },
        "content": "**Use case: UC03 - Loading a save file**"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "1. User launches the application"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "2. Trackr attempts to read the save file"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "3. Trackr successfully parses the save file and loads the lists of modules on it"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "4. User can start using the application"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   3a. The save file is corrupted / in the wrong format"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    -   3a1. Trackr shows an error message"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    -   3a2. Trackr starts a new save file and overwrites the existing one"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        Use case resumes at step 4."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   3b. The save file does not exist"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    -   3b1. Trackr creates a new save file"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        Use case resumes at step 4."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "fanminj"
        },
        "content": "**Use case: UC04 - Search for a person**"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "2.  Trackr shows a list of persons"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "3.  User requests to search for a specific person in the list"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "4.  Trackr displays the person"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   2a. The list is empty."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   3a. The given information is invalid."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    -   3a1. Trackr shows an error message."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    Use case resumes at 1."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "fanminj"
        },
        "content": "**Use case: UC05 - Add a checklist of task**"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "1.  User requests to list checklist of tasks"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "2.  Trackr shows a list of tasks"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "3.  User requests to add a specific task to the list"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "4.  Trackr adds the task to the list"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   2a. Incorrect input format"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    -   2a1. Trackr shows an error message"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    Use Case resumes at 2"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "fanminj"
        },
        "content": "**Use case: UC06 - Mark a task in the list as done**"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "1.  User requests to list checklist of tasks"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "2.  Trackr shows a list of tasks"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "3.  User requests to mark a specific task as done"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "4.  Trackr marks the task as done"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   2a. Incorrect input format"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    -   2a1. Trackr shows an error message"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    Use Case resumes at 2"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "2.  Should be able to hold up to 1000 student details without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "4.  The data should be stored locally so the user would not require the Internet to access his data."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "fanminj"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   **Private contact detail**: A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   **TA**: Teaching Assistant"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   **Modules**: University courses that students are enrolled in"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "fanminj"
        },
        "content": "---"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "1. Deleting a person while all persons are being shown"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 24,
      "EthanTheGoondu": 41,
      "euzintan": 26,
      "fanminj": 91,
      "juandavinlie": 76,
      "-": 291
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "# Trackr - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "1. [Introduction](#1-introduction)\u003cbr\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "2. [About This Document](#2-about-this-document)\u003cbr\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    2.1 [Glossary](#21-glossary)\u003cbr\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "\t2.2 [Formatting](#22-formatting)\u003cbr\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "\t2.3 [Command format](#23-command-format)\u003cbr\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "3. [Getting Started](#3-getting-started)\u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    3.1 [Setting Up](#31-setting-up)\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    3.2 [Using Trackr](#32-using-trackr)\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    3.3 [Switching Views](#33-switching-views)\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "4. [Features](#4-features)\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "   4.1 [View help: `help`](#41-view-help-help)\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "   4.2 [Module features](#42-module-features)\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "   --- 4.2.1 [Add a module: `addMod`](#421-add-a-module-addmod)\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "   --- 4.2.2 [Delete a module: `deleteMod`](#422-delete-a-module-deletemod)\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "   --- 4.2.3 [Edit a module: `editMod`](#423-edit-a-module-editmod)\u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "   --- 4.2.4 [Find a module: `findMod`](#424-find-a-module-findmod)\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "   --- 4.2.5 [List all modules: `listMod`](#425-list-all-modules-listmod)\u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "   4.3 [Tutorial group features](#43-tutorial-group-features)\u003cbr\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "   --- 4.3.1 [View all tutorial groups in a module: `viewTG`](#431-view-all-tutorial-groups-in-a-module-viewtg)\u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "   --- 4.3.2 [Add a tutorial group to a module: `addTG`](#432-add-a-tutorial-group-to-a-module-addtg)\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "   --- 4.3.3 [Find a tutorial group: `findTG`](#433-find-a-tutorial-group-findtg)\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "   --- 4.3.4 [Return to Tutorial Group List: `listTG`](#434-return-to-tutorial-group-list-listtg)\u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "euzintan"
        },
        "content": "   --- 4.3.5 [Delete a tutorial group from a module: `deleteTG`](#435-delete-a-tutorial-group-from-a-module-deletetg)\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "euzintan"
        },
        "content": "   --- 4.3.6 [Edit a Tutorial Group: `editTG`](#436-edit-a-tutorial-group-edittg)\u003cbr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "   4.4 [Student features](#44-student-features)\u003cbr\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "   --- 4.4.1 [View all students in a tutorial group: `viewStudent`](#441-view-all-students-in-a-tutorial-group-viewstudent)\u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "   --- 4.4.2 [Add a student: `addStudent`](#442-add-a-student-addstudent)\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "   --- 4.4.3 [Delete a student: `deleteStudent`](#443-delete-a-student-deletestudent)\u003cbr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "   --- 4.4.4 [Edit a student: `editStudent`](#444-edit-a-student-editstudent)\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "   --- 4.4.5 [Find a student: `findStudent`](#445-find-a-student-findstudent)\u003cbr\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "   --- 4.4.6 [List all students in a tutorial group: `listStudent`](#446-list-all-students-in-a-tutorial-group-liststudent)\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "5. [FAQ](#5-faq)\u003cbr\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "6. [Command Summary](#6-command-summary)\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "   6.1 [Module commands](#61-module-commands)\u003cbr\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "   6.2 [Tutorial group commands](#62-tutorial-group-commands)\u003cbr\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "   6.3 [Student commands](#63-student-commands)\u003cbr\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "__Trackr__ is an application for teaching assistants (TAs) who prefer to use a desktop application for managing their"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "student records. It is uses a Command Line Interface (CLI), while still retaining the benefits of a Graphical User"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Interface (GUI). If you are a TA with a fast typing speed, __Trackr__ is the app for you! You can start by familiarising"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "yourself with the information regarding how this document is designed in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": "[Section 2, \"About this document\"](#2-about-this-document)."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "## 2. About this document"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Welcome to the __Trackr__ User Guide! In this document you will be able to learn the features that __Trackr__ can"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": "provide to make your TA experience less troublesome. This section will provide information regarding the use of this"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": "document, namely how to navigate through this document, what the technical terms mean and how to interpret the"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": "formatting used."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "### 2.1 Glossary"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "The table below explains certain terms used in the document to describe different parts or aspects of the application."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "| Term                           | Meaning                                                      |"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "| ------------------------------ | ------------------------------------------------------------ |"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "| Graphical User Interface (GUI) | An interface through which users interact with electronic devices via visual indicator representations. |"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "| Command Line Interface (CLI)   | An interface that processes commands to a computer program in the form of lines of text. |"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "| Command                        | An instruction typed by you, the user for **Trackr** to perform. |"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "| Field                          | A segment of a command that requires information to be filled into. |"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "| Parameter                      | The information filled by you, the user, into the field of a command. |"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "| Prefix                         | A short word that is typed right before you, the user, writes the parameter into the command. It always starts with a slash (/) and typically is an abbreviation of the name of the field. |"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "| Tutorial Group                 | The specific class being taught under a given module.        |"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "| Student                        | An individual who is enrolled in a given module.             |"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "### 2.2 Formatting"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "This document is written in a manner where formatting is applied to text in order to convey different meanings. The table below will explain what these formatting uses are, what they look like, and what they mean in the context of the document."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "| Formatting    | Meaning                                                      |"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "| ------------- | ------------------------------------------------------------ |"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "| `code`        | Words in \u0027code\u0027 format refer to commands (or fields in commands) that can be typed into the command line. |"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "| *Italics*     | Words in italics refer to example parameters, which is what you, the user could type as the parameter that needs to be provided. |"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "| [Underline]() | Words that are in blue and underlined when hovered over refer to hyperlinks. Hyperlinks are clickable, and bring you either to different parts of this document or to external websites, for the convenience of navigating quickly to different parts of the document or the web. |"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "| **Bold**      | The name of the application **Trackr** is written in bold to refer to what the application does or how it responds to user input. |"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "### 2.3 Command Format"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Commands you provide in the command line follow specific rules. These are the rules you have to follow when typing commands for **Trackr** to read:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "-   Words in UPPER_CASE are the parameters to be supplied by the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    e.g. in add n/NAME, NAME is a parameter which can be used as add n/John Doe."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "-   Items in square brackets are optional."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    e.g n/NAME [t/TAG] can be used as n/John Doe t/friend or as n/John Doe."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "-   Items with …  after them can be used multiple times including zero times."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    e.g. [t/TAG]…  can be used as (i.e. 0 times), t/friend, t/friend t/family etc."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "-   Parameters can be in any order."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    e.g. if the command specifies n/NAME p/PHONE_NUMBER, p/PHONE_NUMBER n/NAME is also acceptable."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "## 3. Getting Started"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "### 3.1 Setting Up"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "Get started by installing __Trackr__ with the following steps:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fanminj"
        },
        "content": "1. Ensure you have Java 11 or above installed. The latest version of Java can be found"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fanminj"
        },
        "content": "[here](https://www.java.com/en/download/)."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fanminj"
        },
        "content": "2. Download the latest version of __Trackr__ [here](https://github.com/AY2021S1-CS2103T-W12-2/tp/releases)."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Look for the file trackr.jar."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "3. Copy the file to a folder you wish to use as your home folder for __Trackr__"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "4. Double-click trackr.jar to start the app. The GUI (Figure 3.1) should appear in a few seconds."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "![Ui](images/Ui.png) \u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "Figure 3.1 Trackr GUI"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "### 3.2 Using Trackr"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "__Trackr__ boasts many useful features to make using the app seamless and smooth. These include"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "commands to add or delete modules, tutorial groups, or students you are teaching. To use a feature, simply"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "type the command into the command box (see Figure 3.2) and press _Enter_ to execute it. Further explanations of"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fanminj"
        },
        "content": "all the commands are listed in [Section 4, \"Features\"](#4-features)."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "![CommandExample](images/CommandExample.png) \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "Figure 3.2 Command example"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "### 3.3 Switching Views"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fanminj"
        },
        "content": "__Trackr__ allows you to switch the current view from Module View (Figure 3.3.1) to Tutorial Group View (Figure 3.3.2)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fanminj"
        },
        "content": "to Student View (Figure 3.3.3) depending on your current need. This is done using the commands `listMod`, `viewTG`, and"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fanminj"
        },
        "content": "`viewStudent`. You may wish to navigate back from Student View to Tutorial Group View or from Tutorial Group View to"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Module View. This is achieved using `prevView`. The correct syntax for these commands are shown in"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fanminj"
        },
        "content": "[Section 4, \"Features\"](#4-features). The top of the app shows the view you are currently in."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "![ModuleView](images/ModuleView.png) \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "Figure 3.3.1 Module View"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "![TutorialGroupView](images/TutorialGroupView.png) \u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "Figure 3.3.2 Tutorial Group View"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fanminj"
        },
        "content": "![StudentView](images/StudentView.png) \u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "Figure 3.3.3 Student view"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "## 4. Features"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "### 4.1 View help: `help`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Shows a message explaining how to access the user guide."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "### 4.2 Module features"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "#### 4.2.1 Add a module: `addMod`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Adds a module to the module list."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Format: `addMod m/MODULE_CODE`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Note:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- Modules should not share the same code."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- It is recommended to use the exact code of the module."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- Adds a module _CS2100_ to the module list."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    - `addMod m/CS2100`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- From the example above, the result box will display the following message:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    New module added: CS2100"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "#### 4.2.2 Delete a module: `deleteMod`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Deletes a module based on the given `INDEX`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Format: `deleteMod INDEX`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Note:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- `INDEX` refers to the index number shown in the Module view."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- `INDEX` must be a positive integer starting from 1."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "- Deleting a module is irreversible."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- Deletes a module at index _2_ in the module list."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    - `deleteMod 2`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- From the example above, the result box will display the following message:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    Module deleted: module at index 2"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    "
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "#### 4.2.3 Edit a module: `editMod`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Edits a module with the provided details."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Format: `editMod INDEX m/MODULE_CODE`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Note:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- `INDEX` refers to the index number shown in the Module view."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- `INDEX` must be a positive integer starting from 1."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- New module code must be provided."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- Existing values will be updated to the given values."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- New module code should not already exist."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- Editing the module code of the first module to be _CS2020_."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    - `editMod 1 m/CS2020`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    "
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "fanminj"
        },
        "content": "#### 4.2.4 Find a module: `findMod`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Finds and lists all modules in the current Module view whose field contains any of the given keywords."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Format: `findMod KEYWORD`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Note:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- `KEYWORD` is not case-sensitive (e.g. _cs2100_ will match _CS2100_)."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- The search will look for matches in the module\u0027s code."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- If no module matching the keyword is found, the Module view will be empty."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- Finds a module with `KEYWORD` _cs2100_."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    - `findMod cs2100`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- From the example given above, the Module view will display the modules matching the criteria:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "#### 4.2.5 List all modules: `listMod`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Shows all the modules you have added in the Module view."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Format: `listMod`"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003e You should perform the following features while in the Module view."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "### 4.3 Tutorial Group features"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "#### 4.3.1 View all Tutorial Groups in a Module: `viewTG`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "You can display all Tutorial Groups in a Module with this command. You can indicate which Module\u0027s Tutorial Groups to view by entering its index in the current list."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "euzintan"
        },
        "content": "Format: `viewTG MODULE_INDEX`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "euzintan"
        },
        "content": "Where MODULE_INDEX is the target Module\u0027s index in the currently displayed Module List."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "euzintan"
        },
        "content": "Example: `viewTG 1`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "#### 4.3.2 Add a Tutorial Group to a Module: `addTG`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "You can add a Tutorial Group to the Module you are viewing using this command."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "euzintan"
        },
        "content": "\u003e - You can only use this command when you are viewing Tutorial Groups of the Module you intend to add the Tutorial Group to."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "euzintan"
        },
        "content": "\u003e - This command can also be used after the findTG command while displaying only Tutorial Groups you searched for."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "euzintan"
        },
        "content": "\u003e - Refer to 4.2.1 - View all Tutorial Groups in a Module"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "euzintan"
        },
        "content": "Format: `addTG tg/TG_CODE day/MON/TUE/WED/THU/FRI start/HH:MM end/HH:MM`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "euzintan"
        },
        "content": "Example: `addTG tg/T03 day/MON start/08:00 end/10:00`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "#### 4.3.3 Find a Tutorial Group: `findTG`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "If you need to quickly find a Tutorial from a list of Tutorials, use this command."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "euzintan"
        },
        "content": "\u003e - You can only use this command when you are viewing the Module which you are looking for the target Tutorial Group in."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "euzintan"
        },
        "content": "\u003e - Refer to 4.2.1 - View all Tutorial Groups in a Module"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "euzintan"
        },
        "content": "Format: `findTG TARGET_TG_CODE`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "euzintan"
        },
        "content": "Where TARGET_TG_CODE is the code of the Tutorial Group you want to search for."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "euzintan"
        },
        "content": "Example: `findTG B014`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "euzintan"
        },
        "content": "To search for a Tutorial Group with code B014"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "euzintan"
        },
        "content": "#### 4.3.4 Return to Tutorial Group List: `listTG`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "euzintan"
        },
        "content": "After using the findTG command, you can use listTG to quickly return to the list of all Tutorial Groups in the Module."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "euzintan"
        },
        "content": "\u003e - You can only use this command when you are viewing the Module which you are looking for the target Tutorial Group in."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "euzintan"
        },
        "content": "\u003e - Refer to 4.2.1 - View all Tutorial Groups in a Module"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "euzintan"
        },
        "content": "Format: `listTG`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "euzintan"
        },
        "content": "#### 4.3.5 Delete a Tutorial Group from a Module: `deleteTG`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "You can use this command to delete a Tutorial Group you have previously added to a Module."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "euzintan"
        },
        "content": "\u003e - You can only use this command when you are viewing the Module which you are looking for the target Tutorial Group in."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "euzintan"
        },
        "content": "\u003e - Refer to 4.2.1 - View all Tutorial Groups in a Module"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "euzintan"
        },
        "content": "Format: `deleteTG TG_INDEX`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "euzintan"
        },
        "content": "Where TG_INDEX is the index of the Tutorial Group you want to delete."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "euzintan"
        },
        "content": "Example: `deleteTG 2`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "euzintan"
        },
        "content": "To delete Tutorial Group with the index 2 in the currently displayed list."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "euzintan"
        },
        "content": "#### 4.3.6 Edit a Tutorial Group: `editTG`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "euzintan"
        },
        "content": "You can use this command to edit a Tutorial Group you have previously added to a Module."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "euzintan"
        },
        "content": "\u003e - You can only use this command when you are viewing the Module which you are looking for the target Tutorial Group in."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "euzintan"
        },
        "content": "\u003e - Refer to 4.2.1 - View all Tutorial Groups in a Module"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "euzintan"
        },
        "content": "Format: `editTG TG_INDEX tg/TG_CODE day/MON/TUE/WED/THU/FRI start/HH:MM end/HH:MM`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "euzintan"
        },
        "content": "Where TG_INDEX is the index of the Tutorial Group you want to edit."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "euzintan"
        },
        "content": "You must enter all arguments regardless of which field you would like to edit."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "euzintan"
        },
        "content": "Example: `editTG 3 tg/T04 day/TUE start/08:00 end/10:00`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "euzintan"
        },
        "content": "These are the commands you can use to manage the different `Tutorial Groups` you teach. Now we look at how you can manage your `Students`."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "### 4.4 Student features"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "fanminj"
        },
        "content": "#### 4.4.1 View all students in a tutorial group: `viewStudent`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Shows all students within the given tutorial group."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Format: `viewStudent INDEX`"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Note:"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "fanminj"
        },
        "content": "- `INDEX` refers to the index number shown in the Tutorial Group view."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "fanminj"
        },
        "content": "- `INDEX` must be a positive integer starting from 1."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "fanminj"
        },
        "content": "- You should perform this command in the Tutorial Group view."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "- Views all students of tutorial group at _index 1_."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    - `viewStudent 1`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "fanminj"
        },
        "content": "![ViewStudentCommand](images/ViewStudentCommand.png)"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "fanminj"
        },
        "content": "\u003e You should perform the following features while in the Student view."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "fanminj"
        },
        "content": "#### 4.4.2 Add a student: `addStudent`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Adds a student with your provided details."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Format: `addStudent n/NAME p/PHONE_NUMBER e/EMAIL id/STUDENT_ID [t/TAG]...`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Note:"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "fanminj"
        },
        "content": "- Students should not share the same student ID within the same tutorial group."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "fanminj"
        },
        "content": "- Phone numbers should only contain numbers, and it should be at least 3 digits long."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "fanminj"
        },
        "content": "- Student IDs begin and end with a capital letter and should have 7 digits (e.g. A1243567X)."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "fanminj"
        },
        "content": "- A student can have any number of tags, including 0."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "fanminj"
        },
        "content": "- Adds a student called _John Tan_ with phone number _81234567_, email _johntan@u.nus.edu_, student id _A1234567X_"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "fanminj"
        },
        "content": "and tag _student_ to the current tutorial group in view."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "fanminj"
        },
        "content": "  - `addStudent n/John Tan p/81234567 e/johntan@u.nus.edu id/A1234567X t/student`"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "fanminj"
        },
        "content": "![AddStudentCommand](images/AddStudentCommand.png)"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "fanminj"
        },
        "content": "#### 4.4.3 Delete a student: `deleteStudent`"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Deletes a student based on the given `INDEX`."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Format: `deleteStudent INDEX`"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Note:"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "fanminj"
        },
        "content": "- `INDEX` refers to the index number shown in the Student view."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "fanminj"
        },
        "content": "- `INDEX` must be a positive integer starting from 1."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "- Deleting a student is irreversible."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "fanminj"
        },
        "content": "- Deletes the second student in the Student view."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    - `deleteStudent 2`"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "fanminj"
        },
        "content": "![DeleteStudentCommand](images/DeleteStudentCommand.png)"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "fanminj"
        },
        "content": "#### 4.4.4 Edit a student: `editStudent`"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Edits a student at the given `INDEX` with the provided details."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Format: `editStudent INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [id/STUDENT_ID] [t/TAG]...`"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Note:"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "fanminj"
        },
        "content": "- `INDEX` refers to the index number shown in the Student view."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "fanminj"
        },
        "content": "- `INDEX` must be a positive integer starting from 1."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "fanminj"
        },
        "content": "- At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "fanminj"
        },
        "content": "- Existing values will be updated to the given values."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "fanminj"
        },
        "content": "- When you edit the tag(s), the existing tag(s) of the student will be replaced (adding of tag(s) is not cumulative)."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "fanminj"
        },
        "content": "- You may wish to remove all the student\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "fanminj"
        },
        "content": "- Editing the phone number and email address of the first student to be _97654321_ and _jtan@u.nus.edu_."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    - `editStudent 1 p/97654321 e/jtan@u.nus.edu`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "fanminj"
        },
        "content": "![EditStudentCommand](images/EditStudentCommand.png)"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "fanminj"
        },
        "content": "#### 4.4.5 Find a student: `findStudent`"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Finds and lists all students in the current Student view whose name contains any of the given keywords."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Format: `findStudent KEYWORD [KEYWORD]...`"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Note:"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "fanminj"
        },
        "content": "- `KEYWORD` is not case-sensitive (e.g. _john_ will match _John_)."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "fanminj"
        },
        "content": "- The search will look for matches, including partial match, in the student\u0027s name (e.g. _jo_ will match _John_,"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "fanminj"
        },
        "content": " however, _jhn_ will not match _John_)."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "fanminj"
        },
        "content": "- If no student matching the keyword is found, the Student view will be empty."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "fanminj"
        },
        "content": "- Finds a student with `KEYWORD` _john_."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    - `findStudent john`"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "fanminj"
        },
        "content": "![FindStudentCommand](images/FindStudentCommand.png)"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "fanminj"
        },
        "content": "#### 4.4.6 List all students in a tutorial group: `listStudent`"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Shows a list of all students in the current Student view."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Format: `listStudent`"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Note:"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "fanminj"
        },
        "content": "- This is a quick way to view all of your students in the current Student view again after using the `findStudent`"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "fanminj"
        },
        "content": "command."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "fanminj"
        },
        "content": "- `listStudent` command only works in Student view."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "## 5. FAQ"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "__Q:__ Why did the command I input change colour from white to red? \u003cbr\u003e"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "fanminj"
        },
        "content": "__A:__ This happens when the input command is of the wrong syntax or does not exist. You may go to the"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "fanminj"
        },
        "content": "[Command Format](#23-command-format) to view the list of commands and their accepted formats."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "__Q:__ How do I save my data? \u003cbr\u003e"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "__A:__ When you issue a new command, __Trackr__ automatically updates the local save file immediately. This ensures that"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "no data will be lost when you close the app or even in the event of a crash."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "__Q:__ How do I exit the app safely? \u003cbr\u003e"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "__A:__ To close the app, simply click the red X on the top right for Windows users, on the top left"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "for MacOS and Linux users."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "## 6. Command Summary"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "### 6.1 Module commands"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Command | Summary"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "--------|--------"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "`listMod` | Views all modules in __Trackr__."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "`addMod m/MODULE_CODE` | Adds a new module to the current Module view."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "`deleteMod INDEX` | Deletes a module from the current Module view."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "`findMod KEYWORD` | Finds module(s) that contain the keyword in the current Module view."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "`editMod INDEX m/MODULE_CODE` | Edits the module code in the specified index to be the new module code."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "### 6.2 Tutorial Group commands"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Command | Summary"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "--------|--------"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "fanminj"
        },
        "content": "`viewTG MODULE_INDEX` | Views all Tutorial Groups in a Module."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "fanminj"
        },
        "content": "`addTG tg/TG_CODE` | Adds a Tutorial Group to a Module."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "fanminj"
        },
        "content": "`findTG TARGET_TG_CODE` | Finds a Tutorial Group."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "fanminj"
        },
        "content": "`deleteTG TG_INDEX` | Deletes a Tutorial Group from a Module."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "### 6.3 Student commands"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "Command | Summary"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "--------|--------"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "fanminj"
        },
        "content": "`viewStudent INDEX` | Views all students in the given tutorial group."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "`addStudent n/NAME p/PHONE_NUMBER e/EMAIL id/STUDENT_ID [t/TAG]...` | Adds a new student to the current Student view."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "`deleteStudent INDEX` | Deletes a student from the current Student view."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "fanminj"
        },
        "content": "`editStudent INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [id/STUDENT_ID] [t/TAG]...` | Edits a student in the current Student view."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "fanminj"
        },
        "content": "`findStudent KEYWORD` | Finds student(s) whose name(s) contain the keyword in the current Student view."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "fanminj"
        },
        "content": "`listStudent` | Shows a list of all students in the current Student view."
      }
    ],
    "authorContributionMap": {
      "seantaysl": 33,
      "EthanTheGoondu": 86,
      "euzintan": 56,
      "fanminj": 142,
      "juandavinlie": 87,
      "-": 78
    }
  },
  {
    "path": "docs/diagrams/AddModSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "participant \":AddModCommandParser\" as AddModCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "participant \"a:AddModCommand\" as AddModCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "[-\u003e LogicManager : execute(\"addMod CS2103T\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"addMod CS2103T\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "create AddModCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "AddressBookParser -\u003e AddModCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "activate AddModCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "AddModCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "deactivate AddModCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "AddressBookParser -\u003e AddModCommandParser : parse(\"CS2103T\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "activate AddModCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "create AddModCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "AddModCommandParser -\u003e AddModCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "activate AddModCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "AddModCommand --\u003e AddModCommandParser : a"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "deactivate AddModCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "AddModCommandParser --\u003e AddressBookParser : a"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "deactivate AddModCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "AddModCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "destroy AddModCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "AddressBookParser --\u003e LogicManager : a"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "LogicManager -\u003e AddModCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "activate AddModCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": "AddModCommand -\u003e Model : addMod(CS2103T)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Model --\u003e AddModCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fanminj"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fanminj"
        },
        "content": "AddModCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fanminj"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fanminj"
        },
        "content": "CommandResult --\u003e AddModCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fanminj"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fanminj"
        },
        "content": "AddModCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fanminj"
        },
        "content": "deactivate AddModCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fanminj"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fanminj"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fanminj"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "fanminj": 69
    }
  },
  {
    "path": "docs/diagrams/LoadJsonActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ":User starts up application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ":MainApp looks for an exisiting Json file to read and load;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "if () then ([modulelist.json exists and is found])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    :Attempts to read Json file;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    :Converts Json file into Json classes;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    :Converts Json classes into native classes;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    :Module list is created and stores in StorageManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    :Create new Json file;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "endif"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "stop"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 18
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "Interface ModuleStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "Class JsonModuleStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "Class JsonSerializableModule"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "Class JsonAdaptedTutorialGroup"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "Class JsonAdaptedStudent"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "Class JsonAdaptedTag"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "StorageManager o--\u003e ModuleStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "JsonModuleStorage .left.|\u003e ModuleStorage"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "JsonModuleStorage .right.\u003e JsonSerializableModuleStorage"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "JsonSerializableModuleStorage .down.\u003e JsonSerializableModule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "JsonSerializableModule .down.\u003e JsonAdaptedTutorialGroup"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "JsonAdaptedTutorialGroup .down.\u003e JsonAdaptedStudent"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "JsonAdaptedStudent .left.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 13,
      "-": 17
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "title: Trackr"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-W12-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W12-2/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-W12-2/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-W12-2/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "**Trackr is a desktop application for managing your contact details.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   If you are interested in using Trackr, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   If you are interested about developing Trackr, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   This application is built on the AddressBook-Level-3 project developed by SE-EDU initiative. For more information, you may wish to visit their [website](https://se-education.org)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "-   Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "fanminj": 9,
      "-": 11
    }
  },
  {
    "path": "docs/team/ethanthegoondu.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "title: Ethan Rozario\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "---"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "## Project: Trackr"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "__Trackr__ is an application for teaching assistants (TAs) who prefer to use a desktop application for managing their student records. It is uses a Command Line Interface (CLI), while still retaining the benefits of a Graphical User Interface (GUI). The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "Given below are my contributions to the project."
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 11
    }
  },
  {
    "path": "docs/team/fanminj.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "title: Jian Fanmin\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "## Project: Trackr"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "### Project Overview"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Trackr is an application for teaching assistants (TAs) who prefer to use a desktop application for managing their"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "student records. It is uses a Command Line Interface (CLI), while still retaining the benefits of a Graphical User"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Interface (GUI). It is written in Java, and currently has over 10kLoC."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "- Code contributed: [tP Code Dashboard](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dfanminj\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "- Enhancements implemented:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    - New feature: Added the ability to keep track of student\u0027s attendance on top of their personal details."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        - What it does: This feature allows the user to mark a student as present or absent. Additionally, the student\u0027s"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        participation score during tutorial can also be recorded."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        - Justification: This feature improves the product\u0027s user experience significantly because the user does not"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        have to open up multiple software to keep track of their students\u0027 contact details and tutorial participation"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        levels. It also allows the user to monitor the students that are falling behind (e.g. low attendance /"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        participation scores), instead of having to manually manage their student."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        - Highlights: This enhancement involves changing the implementation of how the Student fields are stored. New"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        design alternatives for the classes within the Storage components have to be devised."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    - Other changes:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        - Implemented the Student class"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            - Refactored the Person class and added new fields for Student class such as StudentID and Attendance."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        - New commands to manage Student data"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            - Added new commands such as add, edit, delete and find Student data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "- Contributions to User Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    - Drafted the outline (e.g. table of contents) and the various sections of the User Guide."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    - Wrote the section for Student features and provided a summary table for the Student commands."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "- Contributions to the Developer Guide:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    - Added the sequence diagram for the command `addMod`."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "- Contributions to team-based tasks:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    - Set up the GitHub team organisation and repo (including creating issue labels and milestones)."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    - Managed the deadline and closing of milestones - `v1.1` to `v1.4`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    - Released `v1.3`."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    - Updated the index.md page (e.g. changing of the icons for CI Status and codecov)."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": "- Reviewing / mentoring contributions:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    - PRs reviewed: [link](https://github.com/AY2021S1-CS2103T-W12-2/tp/pulls?q\u003dis%3Apr+reviewed-by%3Afanminj)"
      }
    ],
    "authorContributionMap": {
      "fanminj": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.ReadOnlyTrackr;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.Trackr;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonModuleListStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.ModuleListStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        ModuleListStorage moduleListStorage \u003d new JsonModuleListStorage(userPrefs.getModuleListFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(moduleListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        ReadOnlyTrackr\u003cModule\u003e initialData;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            Optional\u003cReadOnlyTrackr\u003cModule\u003e\u003e moduleListOptional \u003d storage.readModuleList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            if (!moduleListOptional.isPresent()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Trackr\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            initialData \u003d moduleListOptional.orElseGet(SampleDataUtil::getSampleModuleList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Trackr\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            initialData \u003d new Trackr();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Trackr\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            initialData \u003d new Trackr();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 11,
      "fanminj": 1,
      "juandavinlie": 2,
      "-": 171
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static final String MESSAGE_INVALID_MODULE_DISPLAYED_INDEX \u003d \"The module index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static final String MESSAGE_MODULES_LISTED_OVERVIEW \u003d \"%1$d modules listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_INVALID_TUTORIAL_GROUP_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            \"The tutorial group index provided is invalid\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_TUTORIAL_GROUPS_LISTED_OVERVIEW \u003d \"%1$d tutorial groups listed!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX \u003d \"The student index provided is invalid\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_STUDENTS_LISTED_OVERVIEW \u003d \"%1$d students listed!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "euzintan": 1,
      "fanminj": 5,
      "juandavinlie": 3,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                .anyMatch(name -\u003e name.toLowerCase().contains(preppedWord.toLowerCase()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 1,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.ReadOnlyTrackr;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroup;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     * Returns the student list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     * @see Model#getStudentList()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    ReadOnlyTrackr\u003cStudent\u003e getStudentList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of students */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    ObservableList\u003cStudent\u003e getFilteredStudentList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of tutorial groups */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    ObservableList\u003cTutorialGroup\u003e getFilteredTutorialGroupList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Returns the module list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * @see Model#getModuleList()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    ReadOnlyTrackr\u003cModule\u003e getModuleList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of modules */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredModuleList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Returns the user prefs\u0027 trackr file path."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    Path getTrackrFilePath();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 1,
      "fanminj": 11,
      "juandavinlie": 11,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.TrackrParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.ReadOnlyTrackr;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroup;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final TrackrParser trackrParser; //This is ModuleListParser, for simplicity I did not change it"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        trackrParser \u003d new TrackrParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d trackrParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            storage.saveModuleList(model.getModuleList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public ReadOnlyTrackr\u003cStudent\u003e getStudentList() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        return model.getStudentList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return model.getFilteredStudentList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public ObservableList\u003cTutorialGroup\u003e getFilteredTutorialGroupList() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return model.getFilteredTutorialGroupList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public ReadOnlyTrackr\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return model.getModuleList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return model.getFilteredModuleList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public Path getTrackrFilePath() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return model.getTrackrFilePath();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 1,
      "fanminj": 10,
      "juandavinlie": 14,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddAttendanceCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEEK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Records the attendance of an existing student in Trackr."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class AddAttendanceCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addAttendance\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \": Records the attendance of the student identified by the index number used in the \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \"displayed student list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + PREFIX_WEEK + \"WEEK NUMBER \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \"[\" + PREFIX_WEEK + \"WEEK NUMBER]...\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + PREFIX_WEEK + \"2\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_ADD_ATTENDANCE_SUCCESS \u003d \"%s is present on %s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_WRONG_VIEW \u003d \"You are currently not in the Student view\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private final int[] weeksToAdd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Creates an AddAttendanceCommand to update the attendance."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public AddAttendanceCommand(Index index, int[] weeksToAdd) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(weeksToAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.weeksToAdd \u003d weeksToAdd;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (!model.isInStudentView()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new CommandException(MESSAGE_WRONG_VIEW);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Student studentToAddAttendance \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Student studentWithAddedAttendance \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        for (int i : weeksToAdd) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            String weekNum \u003d String.valueOf(i);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                studentWithAddedAttendance.getAttendance().addAttendance(weekNum);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        model.setStudent(studentToAddAttendance, studentWithAddedAttendance);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return new CommandResult(String.format("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                MESSAGE_ADD_ATTENDANCE_SUCCESS,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                studentWithAddedAttendance.getName().toString(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                studentWithAddedAttendance.getAttendance().listOutAttendedWeeks())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                || (other instanceof AddAttendanceCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \u0026\u0026 index.equals(((AddAttendanceCommand) other).index)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \u0026\u0026 Arrays.equals(weeksToAdd, ((AddAttendanceCommand) other).weeksToAdd));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 1,
      "fanminj": 86,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "public class AddModuleCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addMod\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New module added: %s\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"This module already exists\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds module.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            + PREFIX_MODULE + \"MODULE_CODE \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            + PREFIX_MODULE + \"CS2100\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_NOT_IN_MODULE_VIEW \u003d \"You are currently not in the Module view. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \"Run listMod to go back to the Module view.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    private final Module toAdd;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     * Creates an AddModuleCommand to add the specified {@code Module}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public AddModuleCommand(Module module) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        toAdd \u003d module;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (!model.isInModuleView()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_IN_MODULE_VIEW);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (model.hasModule(toAdd)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        model.addModule(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                || (other instanceof AddModuleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddModuleCommand) other).toAdd));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 38,
      "EthanTheGoondu": 3,
      "fanminj": 3,
      "juandavinlie": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddStudentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_ID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class AddStudentCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addStudent\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a student to Trackr. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            + PREFIX_STUDENT_ID + \"STUDENT_ID \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"MODULE TAG]...\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + PREFIX_STUDENT_ID + \"A1234567X \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + PREFIX_TAG + \"CS2103T \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + PREFIX_TAG + \"CS2100\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New student added: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"This student already exists in current tutorial group\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_WRONG_VIEW \u003d \"You are currently not in the Student view\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private final Student toAdd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Creates an AddStudentCommand to add the specified {@code Student}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public AddStudentCommand(Student student) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        toAdd \u003d student;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (!model.isInStudentView()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new CommandException(MESSAGE_WRONG_VIEW);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (model.hasStudent(toAdd)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        model.addStudent(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                || (other instanceof AddStudentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddStudentCommand) other).toAdd));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 1,
      "fanminj": 67,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddTutorialGroupCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "euzintan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_GRP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_GRP_DAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_GRP_END_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_GRP_START_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroup;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "euzintan"
        },
        "content": "public class AddTutorialGroupCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addTG\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Tutorial Group has been added\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public static final String MESSAGE_IN_MODULE_VIEW \u003d \"You are currently in Module View. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        + \"Use viewTG MODULE_INDEX to view the Tutorial Groups of the Module you want\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TUTORIAL \u003d \"This Tutorial  already exists in this Module.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public static final String MESSAGE_NOT_IN_TUTORIAL_VIEW \u003d \"You are currently not in the Tutorial Group view. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        + \"Use listTG to go back to the tutorial group view.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a Tutorial Group to a Module. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        + PREFIX_TUTORIAL_GRP + \"TUTORIAL_GROUP_CODE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        + PREFIX_TUTORIAL_GRP_DAY + \"DAY_OF_WEEK \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        + PREFIX_TUTORIAL_GRP_START_TIME + \"START_TIME \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        + PREFIX_TUTORIAL_GRP_END_TIME + \"END_TIME \\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        + PREFIX_TUTORIAL_GRP + \"T03 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        + PREFIX_TUTORIAL_GRP_DAY + \"MON \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        + PREFIX_TUTORIAL_GRP_START_TIME + \"11:00 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        + PREFIX_TUTORIAL_GRP_END_TIME + \"13:00\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    private final TutorialGroup toAdd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Main constructor, called by the AddTutorialGroupCommand Parser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     * @param tutorialGroup"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public AddTutorialGroupCommand(TutorialGroup tutorialGroup) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        requireNonNull(tutorialGroup);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        toAdd \u003d tutorialGroup;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        List\u003cTutorialGroup\u003e lastShownList \u003d model.getFilteredTutorialGroupList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        if (model.isInModuleView()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new CommandException(MESSAGE_IN_MODULE_VIEW);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        } else if (model.isInStudentView()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_IN_TUTORIAL_VIEW);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        } else if (lastShownList.stream().anyMatch(tg -\u003e tg.isSame(toAdd))) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TUTORIAL);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        model.addTutorialGroup(toAdd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                || (other instanceof AddTutorialGroupCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "euzintan"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddTutorialGroupCommand) other).toAdd));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "euzintan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 4,
      "EthanTheGoondu": 13,
      "euzintan": 47,
      "fanminj": 1,
      "juandavinlie": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AttendanceBelowCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.AttendanceBelowSpecifiedScorePredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class AttendanceBelowCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"attendanceBelow\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            + \": Shows a new list of students whose attendance score falls below the upper bound. \" + \"\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            + \"Parameters: UPPER_BOUND (must be one positive integer) \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 5 \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static final String MESSAGE_ATTENDANCE_BELOW_SUCCESS \u003d \"Here are the students whose attendance are below %s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static final String MESSAGE_WRONG_VIEW \u003d \"You are currently not in the Student view\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private final AttendanceBelowSpecifiedScorePredicate predicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private final int upperBound;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Creates an AddAttendanceCommand to update the attendance."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public AttendanceBelowCommand(AttendanceBelowSpecifiedScorePredicate predicate, int upperBound) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.upperBound \u003d upperBound;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (!model.isInStudentView()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new CommandException(MESSAGE_WRONG_VIEW);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        model.updateFilteredStudentList(predicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return new CommandResult(String.format("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                MESSAGE_ATTENDANCE_BELOW_SUCCESS,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                upperBound));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                || (other instanceof AttendanceBelowCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                \u0026\u0026 predicate.equals(((AttendanceBelowCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 50,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.Trackr;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Trackr has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        model.setModuleList(new Trackr());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false, false, false, true);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 4,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private final boolean showTutorialGroupList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private final boolean showStudentList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private final boolean showModuleList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                         boolean showTutorialGroupList, boolean showStudentList, boolean showModuleList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.showTutorialGroupList \u003d showTutorialGroupList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.showStudentList \u003d showStudentList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.showModuleList \u003d showModuleList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this(feedbackToUser, false, false, false, false, false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public boolean isShowTutorialGroupList() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return showTutorialGroupList;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public boolean isShowStudentList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return showStudentList;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public boolean isShowModuleList() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return showModuleList;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 2,
      "juandavinlie": 22,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteAttendanceCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEEK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Removes the attendance of an existing student in Trackr."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class DeleteAttendanceCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteAttendance\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \": Removes the attendance of the student identified by the index number used in the \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \"displayed student list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + PREFIX_WEEK + \"WEEK NUMBER \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \"[\" + PREFIX_WEEK + \"WEEK NUMBER]...\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + PREFIX_WEEK + \"2\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_DELETE_ATTENDANCE_SUCCESS \u003d \"%s is present on %s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_WRONG_VIEW \u003d \"You are currently not in the Student view\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private final int[] weeksToDelete;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Creates an DeleteAttendanceCommand to update the attendace."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public DeleteAttendanceCommand(Index index, int[] weeksToDelete) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(weeksToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.weeksToDelete \u003d weeksToDelete;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (!model.isInStudentView()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new CommandException(MESSAGE_WRONG_VIEW);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Student studentToDeleteAttendance \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Student studentWithDeletedAttendance \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        for (int i : weeksToDelete) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            String weekNum \u003d String.valueOf(i);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                studentWithDeletedAttendance.getAttendance().deleteAttendance(weekNum);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        model.setStudent(studentToDeleteAttendance, studentWithDeletedAttendance);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return new CommandResult(String.format("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                MESSAGE_DELETE_ATTENDANCE_SUCCESS,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                studentWithDeletedAttendance.getName().toString(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                studentWithDeletedAttendance.getAttendance().listOutAttendedWeeks())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                || (other instanceof DeleteAttendanceCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \u0026\u0026 index.equals(((DeleteAttendanceCommand) other).index)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \u0026\u0026 Arrays.equals(weeksToDelete, ((DeleteAttendanceCommand) other).weeksToDelete));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 1,
      "fanminj": 86,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class DeleteModuleCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteMod\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            + \": Deletes the module identified by the index number used in the displayed module list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static final String MESSAGE_DELETE_MODULE_SUCCESS \u003d \"Deleted Module: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public static final String MESSAGE_NOT_IN_MODULE_VIEW \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "            \"You are currently not in the Module view. Run listMod to go back to the module view.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public DeleteModuleCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        List\u003cModule\u003e lastShownList \u003d model.getFilteredModuleList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (!model.isInModuleView()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_IN_MODULE_VIEW);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        Module moduleToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        model.deleteModule(moduleToDelete);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_MODULE_SUCCESS, moduleToDelete));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                || (other instanceof DeleteModuleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteModuleCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 2,
      "juandavinlie": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteStudentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Deletes a student identified using its displayed index from Trackr."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class DeleteStudentCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteStudent\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \": Deletes the student identified by the index number used in the displayed student list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_DELETE_STUDENT_SUCCESS \u003d \"Deleted student: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_WRONG_VIEW \u003d \"You are currently not in the Student view\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public DeleteStudentCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (!model.isInStudentView()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new CommandException(MESSAGE_WRONG_VIEW);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Student studentToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        model.deleteStudent(studentToDelete);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_STUDENT_SUCCESS, studentToDelete));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                || (other instanceof DeleteStudentCommand)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteStudentCommand) other).targetIndex);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 4,
      "fanminj": 53,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteTutorialGroupCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "euzintan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroup;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "euzintan"
        },
        "content": "public class DeleteTutorialGroupCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteTG\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        + \": Deletes the tutorial group identified by the index number used in the displayed tutorial group list.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public static final String MESSAGE_DELETE_TUTORIAL_SUCCESS \u003d \"Deleted Tutorial Group: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public static final String MESSAGE_NOT_IN_TUTORIAL_VIEW \u003d \"You are currently not in the Tutorial Group view. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        + \"Run listTG to go back to the tutorial group view.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public DeleteTutorialGroupCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        if (!model.isInTutorialGroupView()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_IN_TUTORIAL_VIEW);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        List\u003cTutorialGroup\u003e lastShownList \u003d model.getFilteredTutorialGroupList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TUTORIAL_GROUP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        TutorialGroup tutorialGroupToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        model.deleteTutorialGroup(tutorialGroupToDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TUTORIAL_SUCCESS, tutorialGroupToDelete));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            || (other instanceof DeleteTutorialGroupCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((DeleteTutorialGroupCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "euzintan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 7,
      "euzintan": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MODULES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.module.ModuleId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class EditModuleCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editMod\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the module id of the module identified \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            + \"by the index number used in the displayed module list. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            + \"m/MODULE_CODE \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            + PREFIX_MODULE + \"CS2100\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static final String MESSAGE_EDIT_MODULE_SUCCESS \u003d \"Edited Module: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"This module already exists in Trackr.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_NOT_IN_MODULE_VIEW \u003d \"You are currently not in the Module view. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \"Run listMod to go back to the Module view.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private final EditModuleDescriptor editModuleDescriptor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param editModuleDescriptor details to edit the person with"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public EditModuleCommand(Index index, EditModuleDescriptor editModuleDescriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireNonNull(editModuleDescriptor);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.editModuleDescriptor \u003d editModuleDescriptor;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        List\u003cModule\u003e lastShownList \u003d model.getFilteredModuleList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (!model.isInModuleView()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_IN_MODULE_VIEW);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        Module moduleToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        Module editedModule \u003d createEditedModule(moduleToEdit, editModuleDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (!moduleToEdit.isSame(editedModule) \u0026\u0026 model.hasModule(editedModule)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        model.setModule(moduleToEdit, editedModule);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        model.updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_MODULE_SUCCESS, editedModule));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private static Module createEditedModule(Module moduleToEdit, EditModuleDescriptor editModuleDescriptor) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assert moduleToEdit !\u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        ModuleId updatedModuleId \u003d editModuleDescriptor.getModuleId().orElse(moduleToEdit.getModuleId());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return new Module(updatedModuleId);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (!(other instanceof EditModuleCommand)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        EditModuleCommand e \u003d (EditModuleCommand) other;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                \u0026\u0026 editModuleDescriptor.equals(e.editModuleDescriptor);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static class EditModuleDescriptor {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        private ModuleId moduleId;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public EditModuleDescriptor() {}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public EditModuleDescriptor(EditModuleDescriptor toCopy) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            setModuleId(toCopy.moduleId);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return CollectionUtil.isAnyNonNull(moduleId);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public void setModuleId(ModuleId moduleId) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            this.moduleId \u003d moduleId;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public Optional\u003cModuleId\u003e getModuleId() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return Optional.ofNullable(moduleId);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            EditModuleDescriptor e \u003d (EditModuleDescriptor) other;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return getModuleId().equals(e.getModuleId());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 8,
      "fanminj": 3,
      "juandavinlie": 143
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditParticipationCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PARTICIPATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Edits the participation score of an existing student in Trackr."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class EditParticipationCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editParticipation\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \": Edits the participation score of the student identified by the index number used in the \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \"displayed student list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + PREFIX_PARTICIPATION + \"PARTICIPATION SCORE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \"[\" + PREFIX_PARTICIPATION + \"PARTICIPATION SCORE]...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + PREFIX_PARTICIPATION + \"-2\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_EDIT_PARTICIPATION_SUCCESS \u003d \"%s\u0027s participation score is %s/%s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_WRONG_VIEW \u003d \"You are currently not in the Student view\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private final String score;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Creates an EditParticipationCommand to update the participation."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public EditParticipationCommand(Index index, String score) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(score);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.score \u003d score;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (!model.isInStudentView()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new CommandException(MESSAGE_WRONG_VIEW);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Student studentToEditParticipation \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Student studentWithEditedParticipation \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            studentWithEditedParticipation.getAttendance().editParticipation(score);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        model.setStudent(studentToEditParticipation, studentWithEditedParticipation);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return new CommandResult(String.format("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                MESSAGE_EDIT_PARTICIPATION_SUCCESS,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                studentWithEditedParticipation.getName().toString(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                studentWithEditedParticipation.getAttendance().getParticipationScoreAsString(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                studentWithEditedParticipation.getAttendance().getMaxParticipationScore())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                || (other instanceof EditParticipationCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \u0026\u0026 index.equals(((EditParticipationCommand) other).index)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \u0026\u0026 score.equals(((EditParticipationCommand) other).score));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 1,
      "fanminj": 83,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditStudentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_ID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.student.Attendance;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.StudentId;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Edits the details of an existing student in the current tutorial group."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class EditStudentCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editStudent\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \": Edits the details of the student identified by the index number used in the displayed\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \" student list. Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \"[\" + PREFIX_STUDENT_ID + \"STUDENT ID] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + PREFIX_STUDENT_ID + \"A1234567X\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_EDIT_STUDENT_SUCCESS \u003d \"Edited Student: %1$s\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"This student already exists in Trackr.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_WRONG_VIEW \u003d \"You are currently not in the Student view\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private final EditStudentDescriptor editStudentDescriptor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * @param index of the student in the filtered student list to edit."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * @param editStudentDescriptor details to edit the student with."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public EditStudentCommand(Index index, EditStudentDescriptor editStudentDescriptor) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(editStudentDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.editStudentDescriptor \u003d editStudentDescriptor;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (!model.isInStudentView()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new CommandException(MESSAGE_WRONG_VIEW);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Student studentToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Student editedStudent \u003d createEditedStudent(studentToEdit, editStudentDescriptor);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (!studentToEdit.isSame(editedStudent) \u0026\u0026 model.hasStudent(editedStudent)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        model.setStudent(studentToEdit, editedStudent);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Creates and returns a {@code Student} with the details of {@code studentToEdit}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * edited with {@code editStudentDescriptor}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private static Student createEditedStudent(Student studentToEdit, EditStudentDescriptor editStudentDescriptor) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assert studentToEdit !\u003d null;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Name updatedName \u003d editStudentDescriptor.getName().orElse(studentToEdit.getName());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Phone updatedPhone \u003d editStudentDescriptor.getPhone().orElse(studentToEdit.getPhone());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Email updatedEmail \u003d editStudentDescriptor.getEmail().orElse(studentToEdit.getEmail());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editStudentDescriptor.getTags().orElse(studentToEdit.getTags());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        StudentId updatedStudentId \u003d editStudentDescriptor.getStudentId().orElse(studentToEdit.getStudentId());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Attendance attendance \u003d studentToEdit.getAttendance();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return new Student(updatedName, updatedPhone, updatedEmail, updatedTags, updatedStudentId, attendance);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (!(other instanceof EditStudentCommand)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        EditStudentCommand e \u003d (EditStudentCommand) other;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \u0026\u0026 editStudentDescriptor.equals(e.editStudentDescriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Stores the details to edit the student with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * corresponding field value of the student."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static class EditStudentDescriptor {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        private StudentId studentId;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        public EditStudentDescriptor() {}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fanminj"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fanminj"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fanminj"
        },
        "content": "         */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        public EditStudentDescriptor(EditStudentDescriptor toCopy) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            setStudentId(toCopy.studentId);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fanminj"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fanminj"
        },
        "content": "         */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, tags, studentId);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        public void setStudentId(StudentId studentId) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            this.studentId \u003d studentId;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        public Optional\u003cStudentId\u003e getStudentId() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return Optional.ofNullable(studentId);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "fanminj"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "fanminj"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "fanminj"
        },
        "content": "         */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "fanminj"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "fanminj"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "fanminj"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "fanminj"
        },
        "content": "         */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            if (!(other instanceof EditStudentDescriptor)) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            EditStudentDescriptor e \u003d (EditStudentDescriptor) other;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags())"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    \u0026\u0026 getStudentId().equals(e.getStudentId());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 231,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditTutorialGroupCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "euzintan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_GRP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_GRP_DAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_GRP_END_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_GRP_START_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MODULES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.tutorialgroup.DayOfWeek;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.tutorialgroup.TimeOfDay;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroup;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroupId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "euzintan"
        },
        "content": "public class EditTutorialGroupCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editTG\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the specifics of the Tutorial Group specified \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        + \"by the index number used in the displayed Tutorial Group list. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        + \"\\nExisting values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        + \"TUTORIAL_GROUP_INDEX \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        + PREFIX_TUTORIAL_GRP + \"B015\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        + PREFIX_TUTORIAL_GRP_DAY + \"DAY_OF_WEEK \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        + PREFIX_TUTORIAL_GRP_START_TIME + \"START_TIME (24HR HH:MM FORMAT) \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        + PREFIX_TUTORIAL_GRP_END_TIME + \"END_TIME (24HR HH:MM FORMAT) \\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        + PREFIX_TUTORIAL_GRP + \"T03 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        + PREFIX_TUTORIAL_GRP_DAY + \"MON \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        + PREFIX_TUTORIAL_GRP_START_TIME + \"11:00 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        + PREFIX_TUTORIAL_GRP_END_TIME + \"13:00\";;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public static final String MESSAGE_EDIT_TUTORIAL_SUCCESS \u003d \"Edited Tutorial Group: %1$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TUTORIAL \u003d \"This Tutorial  already exists in this Module.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public static final String MESSAGE_NOT_IN_TUTORIAL_VIEW \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "            \"You are currently not in the Module view. Run listMod to go back to the module view.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    private EditTutorialGroupDescriptor editTutorialGroupDescriptor;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     * Constructor for EditTutorialGroupCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     * @param index"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     * @param editTutorialGroupDescriptor"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public EditTutorialGroupCommand(Index index, EditTutorialGroupDescriptor editTutorialGroupDescriptor) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        this.editTutorialGroupDescriptor \u003d editTutorialGroupDescriptor;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        List\u003cTutorialGroup\u003e lastShownList \u003d model.getFilteredTutorialGroupList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        if (!model.isInTutorialGroupView()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_IN_TUTORIAL_VIEW);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TUTORIAL_GROUP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        TutorialGroup tutorialGroupToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        TutorialGroup editedTutorialGroup;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        editedTutorialGroup \u003d createEditedTutorialGroup(tutorialGroupToEdit, editTutorialGroupDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        model.updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        if (!tutorialGroupToEdit.isSame(editedTutorialGroup) \u0026\u0026 model.hasTutorialGroup(editedTutorialGroup)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TUTORIAL);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        model.setTutorialGroup(tutorialGroupToEdit, editedTutorialGroup);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        model.updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_TUTORIAL_SUCCESS, editedTutorialGroup));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    private static TutorialGroup createEditedTutorialGroup(TutorialGroup tutorialGroupToEdit,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "euzintan"
        },
        "content": "                                                           EditTutorialGroupDescriptor editTutorialGroupDescriptor) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        assert tutorialGroupToEdit !\u003d null;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        TutorialGroupId updatedId \u003d editTutorialGroupDescriptor.getId()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            .orElse(tutorialGroupToEdit.getId());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        DayOfWeek updatedDayOfWeek \u003d editTutorialGroupDescriptor.getDayOfWeek()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            .orElse(tutorialGroupToEdit.getDayOfWeek());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        TimeOfDay updatedStartTime \u003d editTutorialGroupDescriptor.getStartTime()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            .orElse(tutorialGroupToEdit.getStartTime());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        TimeOfDay updatedEndTime \u003d editTutorialGroupDescriptor.getEndTime()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            .orElse(tutorialGroupToEdit.getEndTime());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        return new TutorialGroup(updatedId, updatedDayOfWeek, updatedStartTime,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            updatedEndTime, tutorialGroupToEdit.getUniqueStudentList());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            || (other instanceof EditTutorialGroupCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            \u0026\u0026 index.equals(((EditTutorialGroupCommand) other).index)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            \u0026\u0026 editTutorialGroupDescriptor.equals(((EditTutorialGroupCommand) other)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            .editTutorialGroupDescriptor)); // state check"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public static class EditTutorialGroupDescriptor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        private TutorialGroupId tutorialGroupId;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        private DayOfWeek dayOfWeek;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        private TimeOfDay startTime;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        private TimeOfDay endTime;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public EditTutorialGroupDescriptor() {}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "euzintan"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "euzintan"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "euzintan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public EditTutorialGroupDescriptor(EditTutorialGroupDescriptor toCopy) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            setId(toCopy.tutorialGroupId);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            setDayOfWeek(toCopy.dayOfWeek);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            setStartTime(toCopy.startTime);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            setEndTime(toCopy.endTime);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "euzintan"
        },
        "content": "         * Constructor for EditTutorialGroupDescriptor"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "euzintan"
        },
        "content": "         * @param tutorialGroup"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "euzintan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public EditTutorialGroupDescriptor(TutorialGroup tutorialGroup) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            setId(tutorialGroup.getId());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            setDayOfWeek(tutorialGroup.getDayOfWeek());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            setStartTime(tutorialGroup.getStartTime());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            setEndTime(tutorialGroup.getEndTime());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "euzintan"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "euzintan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            return CollectionUtil.isAnyNonNull(tutorialGroupId, dayOfWeek, startTime, endTime);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void setId(TutorialGroupId tutorialGroupId) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            this.tutorialGroupId \u003d tutorialGroupId;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public Optional\u003cTutorialGroupId\u003e getId() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            return Optional.ofNullable(tutorialGroupId);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void setDayOfWeek(DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            this.dayOfWeek \u003d dayOfWeek;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public Optional\u003cDayOfWeek\u003e getDayOfWeek() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            return Optional.ofNullable(dayOfWeek);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void setStartTime(TimeOfDay startTime) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public Optional\u003cTimeOfDay\u003e getStartTime() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            return Optional.ofNullable(startTime);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void setEndTime(TimeOfDay endTime) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public Optional\u003cTimeOfDay\u003e getEndTime() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            return Optional.ofNullable(endTime);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "euzintan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            if (!(other instanceof EditTutorialGroupDescriptor)) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "euzintan"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            EditTutorialGroupDescriptor e \u003d (EditTutorialGroupDescriptor) other;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            return getId().equals(e.getId())"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "euzintan"
        },
        "content": "                \u0026\u0026 getDayOfWeek().equals(e.getDayOfWeek())"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "euzintan"
        },
        "content": "                \u0026\u0026 getStartTime().equals(e.getStartTime())"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "euzintan"
        },
        "content": "                \u0026\u0026 getEndTime().equals(e.getEndTime());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "euzintan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 4,
      "EthanTheGoondu": 2,
      "euzintan": 200,
      "juandavinlie": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Trackr as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false, false, false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 1,
      "juandavinlie": 1,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.module.ModuleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class FindModuleCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findMod\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all modules whose module code contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" cs2100 cs3243 CS2030\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public static final String MESSAGE_NOT_IN_MODULE_VIEW \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "            \"You are currently not in the Module view. Run listMod to go back to the module view.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private final ModuleContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public FindModuleCommand(ModuleContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (!model.isInModuleView()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_IN_MODULE_VIEW);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        model.updateFilteredModuleList(predicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                String.format(Messages.MESSAGE_MODULES_LISTED_OVERVIEW, model.getFilteredModuleList().size()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                || (other instanceof FindModuleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindModuleCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "seantaysl": 2,
      "juandavinlie": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindStudentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Finds and lists all students in the current tutorial view whose names contain any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Keyword matching is not case sensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class FindStudentCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findStudent\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \": Finds all students whose names contain any of the specified keywords\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \" (not case sensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" john alice\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_WRONG_VIEW \u003d \"You are currently not in the Student view\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public FindStudentCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (!model.isInStudentView()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new CommandException(MESSAGE_WRONG_VIEW);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        model.updateFilteredStudentList(predicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        int numStudents \u003d model.getFilteredStudentList().size();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return new CommandResult(String.format(Messages.MESSAGE_STUDENTS_LISTED_OVERVIEW, numStudents));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                || (other instanceof FindStudentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindStudentCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 50,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindTutorialGroupCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "euzintan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "euzintan"
        },
        "content": "public class FindTutorialGroupCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findTG\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all Tutorial Groups whose Tutorial Group Id \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        + \"contain any of the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" B014 B015\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public static final String MESSAGE_NOT_IN_TUTORIAL_VIEW \u003d \"You are currently not in the Tutorial view. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        + \"Run listMod to go back to the module view.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public static final String MESSAGE_IN_MODULE_VIEW \u003d \"You are currently in Module View. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        + \"Use viewTG MOUDLE_INDEX to view the Tutorial Groups of the Module you want\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    private final TutorialContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public FindTutorialGroupCommand(TutorialContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        if (model.isInModuleView()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new CommandException(MESSAGE_IN_MODULE_VIEW);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        } else if (model.isInStudentView()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_IN_TUTORIAL_VIEW);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        model.updateFilteredTutorialGroupList(predicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "            String.format(Messages.MESSAGE_TUTORIAL_GROUPS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                    model.getFilteredTutorialGroupList().size()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            || (other instanceof FindTutorialGroupCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            \u0026\u0026 predicate.equals(((FindTutorialGroupCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "euzintan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 12,
      "euzintan": 39,
      "juandavinlie": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false, false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MODULES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class ListModuleCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listMod\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            + \": Views all the modules.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_VIEWING_MODULES_SUCCESS \u003d \"Viewing all modules\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_NOT_IN_MODULE_VIEW \u003d \"You are currently not in the Module view. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \"Run listMod to go back to the Module view.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public ListModuleCommand() { }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        model.updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        model.setViewToModule();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_VIEWING_MODULES_SUCCESS), false, false, false, false, true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                || (other instanceof ListModuleCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "seantaysl": 2,
      "fanminj": 3,
      "juandavinlie": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListStudentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroup;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class ListStudentCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listStudent\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            + \": Views all the students.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_VIEWING_TUTORIAL_GROUPS_SUCCESS \u003d \"Viewing all students of: %1$s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_WRONG_VIEW \u003d \"You are currently not in the Student view\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public ListStudentCommand() { }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (!model.isInStudentView()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new CommandException(MESSAGE_WRONG_VIEW);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        TutorialGroup tg \u003d model.getCurrentTgInView();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_VIEWING_TUTORIAL_GROUPS_SUCCESS, tg));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                || (other instanceof ListStudentCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "fanminj": 10,
      "juandavinlie": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListTutorialGroupCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TUTORIALGROUPS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class ListTutorialGroupCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listTG\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            + \": Views all the Tutorial Groups in this Module.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_VIEWING_TUTORIALGROUPS_SUCCESS \u003d \"Viewing all tutorial groups of: %1$s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public ListTutorialGroupCommand() { }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        if (!model.isInTutorialGroupView()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new CommandException(\"This command can only be used in Tutorial Group View\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        model.updateFilteredTutorialGroupList(PREDICATE_SHOW_ALL_TUTORIALGROUPS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Module mod \u003d model.getCurrentModuleInView();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_VIEWING_TUTORIALGROUPS_SUCCESS, mod));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                || (other instanceof ListTutorialGroupCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "euzintan": 4,
      "fanminj": 5,
      "juandavinlie": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ParticipationBelowCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.ParticipationBelowSpecifiedScorePredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class ParticipationBelowCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"participationBelow\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            + \": Shows a new list of students whose participation score falls below the upper bound. \" + \"\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            + \"Parameters: UPPER_BOUND (must be one positive integer) \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 5 \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static final String MESSAGE_PARTICIPATION_BELOW_SUCCESS \u003d \"Here are the students whose \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            + \"participation are below %s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static final String MESSAGE_WRONG_VIEW \u003d \"You are currently not in the Student view\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private final ParticipationBelowSpecifiedScorePredicate predicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private final int upperBound;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Creates an AddAttendanceCommand to update the attendance."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public ParticipationBelowCommand(ParticipationBelowSpecifiedScorePredicate predicate, int upperBound) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.upperBound \u003d upperBound;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (!model.isInStudentView()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new CommandException(MESSAGE_WRONG_VIEW);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        model.updateFilteredStudentList(predicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return new CommandResult(String.format("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                MESSAGE_PARTICIPATION_BELOW_SUCCESS,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                upperBound)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                || (other instanceof ParticipationBelowCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                \u0026\u0026 predicate.equals(((ParticipationBelowCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 52,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/PreviousViewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MODULES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TUTORIALGROUPS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class PreviousViewCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"prevView\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static final String MESSAGE_VIEWING_MODULES_SUCCESS \u003d \"Viewing all modules\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static final String MESSAGE_VIEWING_TUTORIALGROUPS_SUCCESS \u003d \"Viewing all tutorial groups of: %1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static final String MESSAGE_IN_MODULE_VIEW \u003d \"You are currently in the Module view. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            + \"You cannot go back any further.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public PreviousViewCommand() { }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        model.updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        model.updateFilteredTutorialGroupList(PREDICATE_SHOW_ALL_TUTORIALGROUPS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (model.isInModuleView()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_IN_MODULE_VIEW), false, false,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                    false, false, true);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        } else if (model.isInTutorialGroupView()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            model.setCurrentViewToModule();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_VIEWING_MODULES_SUCCESS), false, false,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                    false, false, true);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        } else if (model.isInStudentView()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            model.setCurrentViewToTutorialGroup();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_VIEWING_TUTORIALGROUPS_SUCCESS,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                    model.getCurrentModuleInView()), false, false, true,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                    false, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new CommandException(\"View not determined\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                || (other instanceof ListModuleCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewAttendanceCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class ViewAttendanceCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewAttendance\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \": Views the student\u0027s attendance identified by the index number used in the displayed student list.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%s is present on %s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_WRONG_VIEW \u003d \"You are currently not in the Student view\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public ViewAttendanceCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (!model.isInStudentView()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new CommandException(MESSAGE_WRONG_VIEW);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Student student \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                student.getName().toString(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                student.getAttendance().listOutAttendedWeeks())"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                || (other instanceof ViewAttendanceCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ViewAttendanceCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 1,
      "fanminj": 54,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewStudentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroup;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class ViewStudentCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewStudent\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \": Views the students identified by the index number used in the displayed tutorial group list.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Viewing students of: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_WRONG_VIEW \u003d \"You are currently not in the tutorial group view\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public ViewStudentCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (!model.isInTutorialGroupView()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new CommandException(MESSAGE_WRONG_VIEW);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        List\u003cTutorialGroup\u003e lastShownList \u003d model.getFilteredTutorialGroupList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TUTORIAL_GROUP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        TutorialGroup tutorialGroupToViewStudents \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        model.setViewToStudent(tutorialGroupToViewStudents);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                String.format(MESSAGE_SUCCESS, tutorialGroupToViewStudents),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                || (other instanceof ViewStudentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ViewStudentCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewTutorialGroupCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class ViewTutorialGroupCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewTG\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            + \": Views the tutorial groups identified by the index number used in the displayed module list.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_VIEWING_TG_SUCCESS \u003d \"Viewing tutorial groups of: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_NOT_IN_MODULE_VIEW \u003d \"You are currently not in the Module view. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \"Run listMod to go back to the Module view.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public ViewTutorialGroupCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (!model.isInModuleView()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_IN_MODULE_VIEW);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        List\u003cModule\u003e lastShownList \u003d model.getFilteredModuleList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        Module moduleToViewTutorialGroups \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        model.setViewToTutorialGroup(moduleToViewTutorialGroups);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_VIEWING_TG_SUCCESS, moduleToViewTutorialGroups),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                false, false, true, false, false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                || (other instanceof ViewTutorialGroupCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ViewTutorialGroupCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 2,
      "fanminj": 47,
      "juandavinlie": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddAttendanceCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEEK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.AddAttendanceCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Parses input arguments and creates a new AddAttendanceCommand object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class AddAttendanceCommandParser implements Parser\u003cAddAttendanceCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddAttendanceCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * and returns an AddAttendanceCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public AddAttendanceCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_WEEK);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argumentMultimap.getPreamble());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAttendanceCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (argumentMultimap.getAllValues(PREFIX_WEEK).isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAttendanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        int[] weeksToAdd \u003d parseWeeksToAdd(argumentMultimap.getAllValues(PREFIX_WEEK));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return new AddAttendanceCommand(index, weeksToAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e weeks} into a {@code int[] weeksToAdd}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private int[] parseWeeksToAdd(Collection\u003cString\u003e weeks) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assert weeks !\u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        int size \u003d weeks.size();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String[] weeksToAddString \u003d weeks.toArray(new String[0]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        int[] weeksToAdd \u003d new int[size];"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            weeksToAdd[i] \u003d Integer.parseInt(weeksToAddString[i]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return weeksToAdd;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddModuleCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.logic.commands.AddModuleCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.ModuleId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "public class AddModuleCommandParser implements Parser\u003cAddModuleCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddModuleCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     * and returns a AddModuleCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public AddModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_MODULE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        ModuleId moduleId \u003d ParserUtil.parseModuleId(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        Module module \u003d new Module(moduleId);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return new AddModuleCommand(module);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 18,
      "EthanTheGoondu": 22,
      "fanminj": 1,
      "juandavinlie": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddStudentCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_ID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.AddStudentCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.student.Attendance;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.StudentId;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Parses input arguments and creates a new AddStudentCommand object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class AddStudentCommandParser implements Parser\u003cAddStudentCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddStudentCommand and"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * returns an AddStudentCommand object for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public AddStudentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                ArgumentTokenizer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                        .tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_TAG, PREFIX_STUDENT_ID);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_STUDENT_ID)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddStudentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        StudentId studentId \u003d ParserUtil.parseStudentId(argMultimap.getValue(PREFIX_STUDENT_ID).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        Student student \u003d new Student(name, phone, email, tagList, studentId, new Attendance());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return new AddStudentCommand(student);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 2,
      "fanminj": 23,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddTutorialGroupCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "euzintan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_GRP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_GRP_DAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_GRP_END_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_GRP_START_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.logic.commands.AddTutorialGroupCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.tutorialgroup.DayOfWeek;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.tutorialgroup.TimeOfDay;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroup;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroupId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "euzintan"
        },
        "content": "public class AddTutorialGroupCommandParser implements Parser\u003cAddTutorialGroupCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddTutorialGroupCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * and returns a AddTutorialGroupCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public AddTutorialGroupCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                PREFIX_TUTORIAL_GRP, PREFIX_TUTORIAL_GRP_DAY,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                PREFIX_TUTORIAL_GRP_START_TIME, PREFIX_TUTORIAL_GRP_END_TIME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TUTORIAL_GRP, PREFIX_TUTORIAL_GRP_DAY,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            PREFIX_TUTORIAL_GRP_START_TIME, PREFIX_TUTORIAL_GRP_END_TIME) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                    AddTutorialGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        TutorialGroupId tutorialGroupId \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                ParserUtil.parseTutorialGroupId(argMultimap.getValue(PREFIX_TUTORIAL_GRP).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        DayOfWeek day \u003d ParserUtil.parseDayOfWeek(argMultimap.getValue(PREFIX_TUTORIAL_GRP_DAY).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        TimeOfDay[] timeOfDays \u003d ParserUtil.parseTimesOfDay(argMultimap.getValue(PREFIX_TUTORIAL_GRP_START_TIME).get(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                argMultimap.getValue(PREFIX_TUTORIAL_GRP_END_TIME).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        TimeOfDay startTime \u003d timeOfDays[0];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        TimeOfDay endTime \u003d timeOfDays[1];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return new AddTutorialGroupCommand(new TutorialGroup(tutorialGroupId,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                day, startTime, endTime));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "euzintan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 9,
      "EthanTheGoondu": 13,
      "euzintan": 33,
      "fanminj": 1,
      "juandavinlie": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AttendanceBelowCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.AttendanceBelowCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.AttendanceBelowSpecifiedScorePredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class AttendanceBelowCommandParser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AttendanceBelowCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * and returns a AttendanceBelowCommand object for execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public AttendanceBelowCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        final int upperBound;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            upperBound \u003d ParserUtil.parseUpperBound(args);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                    AttendanceBelowCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return new AttendanceBelowCommand(new AttendanceBelowSpecifiedScorePredicate(upperBound), upperBound);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 26,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public static final Prefix PREFIX_TUTORIAL_GRP \u003d new Prefix(\"tg/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public static final Prefix PREFIX_TUTORIAL_GRP_DAY \u003d new Prefix(\"day/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public static final Prefix PREFIX_TUTORIAL_GRP_START_TIME \u003d new Prefix(\"start/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public static final Prefix PREFIX_TUTORIAL_GRP_END_TIME \u003d new Prefix(\"end/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static final Prefix PREFIX_TASK \u003d new Prefix(\"task/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public static final Prefix PREFIX_MODULE \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final Prefix PREFIX_STUDENT_ID \u003d new Prefix(\"id/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final Prefix PREFIX_WEEK \u003d new Prefix(\"week/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final Prefix PREFIX_PARTICIPATION \u003d new Prefix(\"score/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 1,
      "euzintan": 4,
      "fanminj": 3,
      "juandavinlie": 1,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteAttendanceCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEEK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.DeleteAttendanceCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Parses input arguments and creates a new DeleteAttendanceCommand object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class DeleteAttendanceCommandParser implements Parser\u003cDeleteAttendanceCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteAttendanceCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * and returns an DeleteAttendanceCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public DeleteAttendanceCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_WEEK);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argumentMultimap.getPreamble());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteAttendanceCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (argumentMultimap.getAllValues(PREFIX_WEEK).isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteAttendanceCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        int[] weeksToDelete \u003d parseWeeksToDelete(argumentMultimap.getAllValues(PREFIX_WEEK));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return new DeleteAttendanceCommand(index, weeksToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e weeks} into a {@code int[] weeksToDelete}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private int[] parseWeeksToDelete(Collection\u003cString\u003e weeks) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assert weeks !\u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        int size \u003d weeks.size();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String[] weeksToDeleteString \u003d weeks.toArray(new String[0]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        int[] weeksToDelete \u003d new int[size];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            weeksToDelete[i] \u003d Integer.parseInt(weeksToDeleteString[i]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return weeksToDelete;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteModuleCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.DeleteModuleCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class DeleteModuleCommandParser implements Parser\u003cDeleteModuleCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteModuleCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public DeleteModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return new DeleteModuleCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteModuleCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 6,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteStudentCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.DeleteStudentCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class DeleteStudentCommandParser implements Parser\u003cDeleteStudentCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteStudentCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * and returns a DeleteStudentCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public DeleteStudentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return new DeleteStudentCommand(index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteStudentCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteTutorialGroupCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "euzintan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.logic.commands.DeleteTutorialGroupCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "euzintan"
        },
        "content": "public class DeleteTutorialGroupCommandParser implements Parser\u003cDeleteTutorialGroupCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public DeleteTutorialGroupCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(userInput);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            return new DeleteTutorialGroupCommand(index);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "euzintan"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTutorialGroupCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "euzintan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 1,
      "euzintan": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditModuleCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.EditModuleCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.EditModuleCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class EditModuleCommandParser implements Parser\u003cEditModuleCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public EditModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                    EditModuleCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        EditModuleDescriptor editModuleDescriptor \u003d new EditModuleDescriptor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MODULE).isPresent()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            editModuleDescriptor.setModuleId(ParserUtil.parseModuleId(argMultimap.getValue(PREFIX_MODULE).get()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (!editModuleDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new ParseException(EditModuleCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return new EditModuleCommand(index, editModuleDescriptor);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 3,
      "juandavinlie": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditParticipationCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PARTICIPATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.EditParticipationCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Parses input arguments and creates a new EditParticipationCommandParser object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class EditParticipationCommandParser implements Parser\u003cEditParticipationCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditParticipationCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * and returns an EditParticipationCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public EditParticipationCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_PARTICIPATION);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argumentMultimap.getPreamble());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditParticipationCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            );"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (!argumentMultimap.getValue(PREFIX_PARTICIPATION).isPresent()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditParticipationCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String score \u003d argumentMultimap.getValue(PREFIX_PARTICIPATION).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return new EditParticipationCommand(index, score);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditStudentCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_ID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.EditStudentCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.EditStudentCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Parses input arguments and creates a new EditStudentCommand object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class EditStudentCommandParser implements Parser\u003cEditStudentCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditStudentCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * and returns an EditStudentCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public EditStudentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                .tokenize(args, PREFIX_EMAIL, PREFIX_NAME, PREFIX_PHONE, PREFIX_STUDENT_ID, PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argumentMultimap.getPreamble());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditStudentCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        EditStudentDescriptor editStudentDescriptor \u003d new EditStudentDescriptor();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            editStudentDescriptor.setName(ParserUtil.parseName(argumentMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            editStudentDescriptor.setEmail(ParserUtil.parseEmail(argumentMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            editStudentDescriptor.setPhone(ParserUtil.parsePhone(argumentMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_STUDENT_ID).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            editStudentDescriptor"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    .setStudentId(ParserUtil.parseStudentId(argumentMultimap.getValue(PREFIX_STUDENT_ID).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        parseTagsForEdit(argumentMultimap.getAllValues(PREFIX_TAG)).ifPresent(editStudentDescriptor::setTags);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (!editStudentDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new ParseException(EditStudentCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return new EditStudentCommand(index, editStudentDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditTutorialGroupCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "euzintan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_GRP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_GRP_DAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_GRP_END_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_GRP_START_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.logic.commands.EditTutorialGroupCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.logic.commands.EditTutorialGroupCommand.EditTutorialGroupDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "euzintan"
        },
        "content": "public class EditTutorialGroupCommandParser implements Parser\u003cEditTutorialGroupCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     * Main parse command in for EditTutorialGroup, parses user input to return a command to be executed"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public EditTutorialGroupCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_TUTORIAL_GRP, PREFIX_TUTORIAL_GRP_DAY,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "euzintan"
        },
        "content": "                PREFIX_TUTORIAL_GRP_START_TIME, PREFIX_TUTORIAL_GRP_END_TIME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                EditTutorialGroupCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        EditTutorialGroupDescriptor editTutorialGroupDescriptor \u003d new EditTutorialGroupDescriptor();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TUTORIAL_GRP).isPresent()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            editTutorialGroupDescriptor.setId(ParserUtil"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "euzintan"
        },
        "content": "                .parseTutorialGroupId(argMultimap.getValue(PREFIX_TUTORIAL_GRP).get()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TUTORIAL_GRP_DAY).isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            editTutorialGroupDescriptor.setDayOfWeek(ParserUtil"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "euzintan"
        },
        "content": "                .parseDayOfWeek(argMultimap.getValue(PREFIX_TUTORIAL_GRP_DAY).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TUTORIAL_GRP_START_TIME).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            editTutorialGroupDescriptor.setStartTime(ParserUtil"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "euzintan"
        },
        "content": "                .parseTimeOfDay(argMultimap.getValue(PREFIX_TUTORIAL_GRP_START_TIME).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TUTORIAL_GRP_END_TIME).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            editTutorialGroupDescriptor.setEndTime(ParserUtil"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "euzintan"
        },
        "content": "                .parseTimeOfDay(argMultimap.getValue(PREFIX_TUTORIAL_GRP_END_TIME).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        if (!editTutorialGroupDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new ParseException(EditTutorialGroupCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        return new EditTutorialGroupCommand(index, editTutorialGroupDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "euzintan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 2,
      "EthanTheGoondu": 2,
      "euzintan": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindModuleCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.FindModuleCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.module.ModuleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class FindModuleCommandParser implements Parser\u003cFindModuleCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public FindModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return new FindModuleCommand(new ModuleContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 6,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindStudentCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.FindStudentCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Parses input arguments and creates a new FindStudentCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class FindStudentCommandParser implements Parser\u003cFindStudentCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Parses"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public FindStudentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindStudentCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            );"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return new FindStudentCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 30,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindTutorialGroupCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "euzintan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.logic.commands.FindTutorialGroupCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "euzintan"
        },
        "content": "public class FindTutorialGroupCommandParser implements Parser\u003cFindTutorialGroupCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public FindTutorialGroupCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "euzintan"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindTutorialGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        return new FindTutorialGroupCommand(new TutorialContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "euzintan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 2,
      "euzintan": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.ModuleId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.StudentId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.tutorialgroup.DayOfWeek;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.tutorialgroup.TimeOfDay;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroupId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static final String MESSAGE_INVALID_UPPER_BOUND \u003d \"Upper bound must be a positive integer.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Parses a {@code String tutorial group id} into a {@code TutorialGroupId}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @throws ParseException if the given {@code tutorial group id} is invalid."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static TutorialGroupId parseTutorialGroupId(String tutorialGroupId) throws ParseException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        requireNonNull(tutorialGroupId);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        String trimmedModule \u003d tutorialGroupId.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (!TutorialGroupId.isValidTutorialGroupId(trimmedModule)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new ParseException(TutorialGroupId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return new TutorialGroupId(tutorialGroupId);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static DayOfWeek parseDayOfWeek(String day) throws ParseException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        requireNonNull(day);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        String trimmedDay \u003d day.trim();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (!DayOfWeek.isValidDayOfWeek(trimmedDay)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new ParseException(DayOfWeek.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return new DayOfWeek(trimmedDay);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static TimeOfDay[] parseTimesOfDay(String startTime, String endTime) throws ParseException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        requireAllNonNull(startTime, endTime);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        String trimmedStartTime \u003d startTime.trim();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        String trimmedEndTime \u003d endTime.trim();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (!TimeOfDay.isValidTimeOfDay(trimmedStartTime) || !TimeOfDay.isValidTimeOfDay(trimmedEndTime)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new ParseException(TimeOfDay.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        } else if (!TimeOfDay.isValidTimes(trimmedStartTime, trimmedEndTime)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new ParseException(TimeOfDay.TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        TimeOfDay[] timeOfDays \u003d {new TimeOfDay(trimmedStartTime), new TimeOfDay(trimmedEndTime)};"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return timeOfDays;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     * Parses user input into a single TimeOfDay"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     * @param startTime"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     * @throws ParseException if invalid startTime String provided"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public static TimeOfDay parseTimeOfDay(String startTime) throws ParseException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        requireNonNull(startTime);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        String trimmedStartTime \u003d startTime.trim();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        if (!TimeOfDay.isValidTimeOfDay(trimmedStartTime)) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new ParseException(TimeOfDay.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        return new TimeOfDay(trimmedStartTime);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Parses a {@code String module id} into a {@code ModuleId}."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @throws ParseException if the given {@code module id} is invalid."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static ModuleId parseModuleId(String moduleId) throws ParseException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireNonNull(moduleId);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        String trimmedModule \u003d moduleId.trim();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (!ModuleId.isValidModuleId(trimmedModule)) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new ParseException(ModuleId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return new ModuleId(trimmedModule);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Parses a {@code String studentId} into a {@code StudentId}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * @throws ParseException if the given {@code studentId} is invalid."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static StudentId parseStudentId(String studentId) throws ParseException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(studentId);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String trimmedStudentId \u003d studentId.trim();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (!StudentId.isValidStudentId(trimmedStudentId)) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new ParseException(StudentId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return new StudentId(trimmedStudentId);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Parses a {@code String studentId} into a {@code StudentId}."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @throws ParseException if the given {@code studentId} is invalid."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static int parseUpperBound(String upperBoundString) throws ParseException {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireNonNull(upperBoundString);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        String trimmedUpperBound \u003d upperBoundString.trim();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        int upperBoundInt;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            upperBoundInt \u003d Integer.parseInt(trimmedUpperBound);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_UPPER_BOUND);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (upperBoundInt \u003c\u003d 0) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_UPPER_BOUND);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return upperBoundInt;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 7,
      "EthanTheGoondu": 51,
      "euzintan": 15,
      "fanminj": 20,
      "juandavinlie": 28,
      "-": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParticipationBelowCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.ParticipationBelowCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.ParticipationBelowSpecifiedScorePredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class ParticipationBelowCommandParser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ParticipationBelowCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * and returns a ParticipationBelowCommand object for execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public ParticipationBelowCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        final int upperBound;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            upperBound \u003d ParserUtil.parseUpperBound(args);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                    ParticipationBelowCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return new ParticipationBelowCommand(new ParticipationBelowSpecifiedScorePredicate(upperBound), upperBound);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 1,
      "juandavinlie": 25,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TrackrParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.AddAttendanceCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.AddModuleCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.AddStudentCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.AddTutorialGroupCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.AttendanceBelowCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.DeleteAttendanceCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.DeleteModuleCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.DeleteStudentCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.DeleteTutorialGroupCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.EditModuleCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.EditParticipationCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.EditStudentCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.EditTutorialGroupCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.FindModuleCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.FindStudentCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.FindTutorialGroupCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.ListModuleCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.ListStudentCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.ListTutorialGroupCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.ParticipationBelowCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.PreviousViewCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.ViewAttendanceCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.ViewStudentCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.ViewTutorialGroupCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class TrackrParser {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        case AddModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return new AddModuleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        case EditModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return new EditModuleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        case DeleteModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return new DeleteModuleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        case ListTutorialGroupCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return new ListTutorialGroupCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        case ListStudentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return new ListStudentCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        case FindModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return new FindModuleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        case AddTutorialGroupCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            return new AddTutorialGroupCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        case ViewTutorialGroupCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return new ViewTutorialGroupCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        case ListModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return new ListModuleCommand();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        case ViewStudentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return new ViewStudentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        case AddStudentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return new AddStudentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        case DeleteTutorialGroupCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            return new DeleteTutorialGroupCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        case EditTutorialGroupCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            return new EditTutorialGroupCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        case FindTutorialGroupCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            return new FindTutorialGroupCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        case DeleteStudentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return new DeleteStudentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        case FindStudentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return new FindStudentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        case EditStudentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return new EditStudentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        case PreviousViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return new PreviousViewCommand();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        case AddAttendanceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return new AddAttendanceCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        case DeleteAttendanceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return new DeleteAttendanceCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        case EditParticipationCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return new EditParticipationCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        case ViewAttendanceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return new ViewAttendanceCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        case AttendanceBelowCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return new AttendanceBelowCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        case ParticipationBelowCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return new ParticipationBelowCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 1,
      "euzintan": 12,
      "fanminj": 31,
      "juandavinlie": 54,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ViewAttendanceCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.ViewAttendanceCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class ViewAttendanceCommandParser implements Parser\u003cViewAttendanceCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewAttendanceCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * and returns a ViewAttendanceCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public ViewAttendanceCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return new ViewAttendanceCommand(index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new ParseException(String.format("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    ViewAttendanceCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            ), e);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ViewStudentCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.ViewStudentCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class ViewStudentCommandParser implements Parser\u003cViewStudentCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewStudentCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     * and returns a ViewStudentCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public ViewStudentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return new ViewStudentCommand(index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new ParseException(String.format("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    ViewStudentCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            ), e);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 6,
      "fanminj": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ViewTutorialGroupCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.ViewTutorialGroupCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class ViewTutorialGroupCommandParser implements Parser\u003cViewTutorialGroupCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewTutorialGroupCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     * and returns a ViewTutorialGroupCommand object for execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public ViewTutorialGroupCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return new ViewTutorialGroupCommand(index);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewTutorialGroupCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 4,
      "juandavinlie": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroup;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    Predicate\u003cModule\u003e PREDICATE_SHOW_ALL_MODULES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    Predicate\u003cTutorialGroup\u003e PREDICATE_SHOW_ALL_TUTORIALGROUPS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    Predicate\u003cStudent\u003e PREDICATE_SHOW_ALL_STUDENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Returns the user prefs\u0027 Trackr file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    Path getTrackrFilePath();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Sets the user prefs\u0027 Trackr file path."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    void setTrackrFilePath(Path trackrFilePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    // Module Operations"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Replaces Trackr data with the data in {@code moduleList}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    void setModuleList(ReadOnlyTrackr\u003cModule\u003e moduleList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /** Returns the module Trackr */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    ReadOnlyTrackr\u003cModule\u003e getModuleList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    void setViewToModule();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    void setCurrentViewToModule();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Returns true if a module with the same identity as {@code module} exists in trackr."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    boolean hasModule(Module module);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Deletes the given module."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * The module must exist in trackr."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    void deleteModule(Module target);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Adds the given module."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * {@code module} must not already exist in trackr."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    void addModule(Module module);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Replaces the given module {@code target} with {@code editedModule}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * {@code target} must exist in trackr."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module in trackr."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    void setModule(Module target, Module editedModule);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    boolean isInModuleView();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    Module getCurrentModuleInView();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //TutorialGroup Operations"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Sets the view to the tutorial group list of the given module"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param target"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    void setViewToTutorialGroup(Module target);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    void setCurrentViewToTutorialGroup();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Adds the given module."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * {@code module} must not already exist in trackr."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    void addTutorialGroup(TutorialGroup tutorialGroup);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    void deleteTutorialGroup(TutorialGroup tutorialGroup);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    boolean hasTutorialGroup(TutorialGroup tutorialGroup);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    void setTutorialGroup(TutorialGroup target, TutorialGroup edited);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    boolean isInTutorialGroupView();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    // Student Operations"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Sets the view to the tutorial group list of the given module"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * @param target"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    void setViewToStudent(TutorialGroup target);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    void setCurrentViewToStudent();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    TutorialGroup getCurrentTgInView();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Returns true if a student with the same identity as {@code student} exists in trackr."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    boolean hasStudent(Student student);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Deletes the given student."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * The student must exist in trackr."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    void deleteStudent(Student target);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Adds the given student."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * {@code student} must not already exist in trackr."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    void addStudent(Student student);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Replaces the given student {@code target} with {@code editedStudent}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * {@code target} must exist in trackr."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * The student identity of {@code editedStudent} must not be the same as another existing student in trackr."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    void setStudent(Student target, Student editedStudent);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    boolean isInStudentView();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    // FilteredList Operations"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /** Returns an unmodifiable view of the filtered module list */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredModuleList();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Updates the filter of the filtered module list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    void updateFilteredModuleList(Predicate\u003cModule\u003e predicate);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /** Returns an unmodifiable view of the filtered tutorial group list */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    ObservableList\u003cTutorialGroup\u003e getFilteredTutorialGroupList();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Updates the filter of the filtered tutorial group list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    void updateFilteredTutorialGroupList(Predicate\u003cTutorialGroup\u003e predicate);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /** Returns an unmodifiable view of the filtered student list */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    ObservableList\u003cStudent\u003e getFilteredStudentList();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Updates the filter of the filtered student list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 1,
      "euzintan": 6,
      "fanminj": 56,
      "juandavinlie": 46,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroup;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private final Trackr moduleList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private FilteredList\u003cModule\u003e filteredModules;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private FilteredList\u003cTutorialGroup\u003e filteredTutorialGroup;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private FilteredList\u003cStudent\u003e filteredStudents;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private Module currentModuleInView;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private TutorialGroup currentTgInView;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private boolean isInModuleView;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private boolean isInTutorialGroupView;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private boolean isInStudentView;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Initializes a ModelManager with the given ReadOnlyTrackrs and userPrefs."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public ModelManager(ReadOnlyTrackr\u003cModule\u003e moduleList,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                        ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireAllNonNull(moduleList, userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        logger.fine(\"Initializing with module data: \" + moduleList + \" and user prefs: \" + userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.moduleList \u003d new Trackr(moduleList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.filteredModules \u003d new FilteredList\u003c\u003e(this.moduleList.getList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.filteredTutorialGroup \u003d new FilteredList\u003c\u003e(FXCollections.observableArrayList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.filteredStudents \u003d new FilteredList\u003c\u003e(FXCollections.observableArrayList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.isInModuleView \u003d true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.isInTutorialGroupView \u003d false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.isInStudentView \u003d false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this(new Trackr(), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public Path getTrackrFilePath() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void setTrackrFilePath(Path trackrFilePath) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(trackrFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        userPrefs.setAddressBookFilePath(trackrFilePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d moduleList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void setModuleList(ReadOnlyTrackr\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.isInModuleView \u003d true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.isInTutorialGroupView \u003d false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.isInStudentView \u003d false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.moduleList.resetData(moduleList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public ReadOnlyTrackr\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return moduleList;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Module Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void setViewToModule() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.isInModuleView \u003d true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.isInTutorialGroupView \u003d false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.isInStudentView \u003d false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void setCurrentViewToModule() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.isInModuleView \u003d true;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.isInTutorialGroupView \u003d false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.isInStudentView \u003d false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return moduleList.hasModule(module);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void deleteModule(Module target) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        moduleList.removeModule(target);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        moduleList.addModule(module);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireAllNonNull(target, editedModule);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        moduleList.setModule(target, editedModule);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public boolean isInModuleView() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return this.isInModuleView;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public Module getCurrentModuleInView() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return currentModuleInView;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void setCurrentModuleInView(Module module) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.currentModuleInView \u003d module;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TutorialGroup Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void setViewToTutorialGroup(Module target) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.isInModuleView \u003d false;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.isInTutorialGroupView \u003d true;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.isInStudentView \u003d false;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        currentModuleInView \u003d target;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        filteredTutorialGroup \u003d new FilteredList\u003c\u003e(moduleList.getTutorialGroupListOfModule(target));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void setCurrentViewToTutorialGroup() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.isInModuleView \u003d false;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.isInTutorialGroupView \u003d true;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.isInStudentView \u003d false;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void addTutorialGroup(TutorialGroup target) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        moduleList.addTutorialGroup(target, currentModuleInView);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        updateFilteredTutorialGroupList(PREDICATE_SHOW_ALL_TUTORIALGROUPS);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public void deleteTutorialGroup(TutorialGroup tutorialGroup) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        moduleList.deleteTutorialGroup(tutorialGroup, currentModuleInView);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public boolean hasTutorialGroup(TutorialGroup toCheck) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return moduleList.getUniqueTutorialGroupList(currentModuleInView).contains(toCheck);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public void setTutorialGroup(TutorialGroup target, TutorialGroup edited) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        requireAllNonNull(target, edited);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        moduleList.setTutorialGroup(target, edited);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public boolean isInTutorialGroupView() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return this.isInTutorialGroupView;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public TutorialGroup getCurrentTgInView() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return currentTgInView;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void setCurrentTgInView(TutorialGroup tutorialGroup) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.currentTgInView \u003d tutorialGroup;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Student Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void setViewToStudent(TutorialGroup target) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.isInModuleView \u003d false;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.isInTutorialGroupView \u003d false;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.isInStudentView \u003d true;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        currentTgInView \u003d target;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        filteredStudents \u003d"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                new FilteredList\u003c\u003e(moduleList.getStudentListOfTutorialGroup(currentModuleInView, target));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void setCurrentViewToStudent() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.isInModuleView \u003d false;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.isInTutorialGroupView \u003d false;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.isInStudentView \u003d true;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return moduleList"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                .getUniqueStudentList(currentModuleInView, currentTgInView)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                .contains(student);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void deleteStudent(Student target) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        moduleList"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                .getUniqueStudentList(currentModuleInView, currentTgInView)"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                .removeStudent(target);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void addStudent(Student student) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        moduleList.addStudent(currentModuleInView, currentTgInView, student);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireAllNonNull(target, editedStudent);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        moduleList"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                .getUniqueStudentList(currentModuleInView, currentTgInView)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                .setStudent(target, editedStudent);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public boolean isInStudentView() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return this.isInStudentView;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Module List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Module}."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return filteredModules;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        filteredModules.setPredicate(predicate);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered TutorialGroup List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Module}."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public ObservableList\u003cTutorialGroup\u003e getFilteredTutorialGroupList() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return filteredTutorialGroup;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void updateFilteredTutorialGroupList(Predicate\u003cTutorialGroup\u003e predicate) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        filteredTutorialGroup.setPredicate(predicate);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Student List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Student}."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return filteredStudents;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        filteredStudents.setPredicate(predicate);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return moduleList.equals(other.moduleList)"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                \u0026\u0026 filteredStudents.equals(other.filteredStudents)"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                \u0026\u0026 filteredTutorialGroup.equals(other.filteredTutorialGroup)"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                \u0026\u0026 filteredModules.equals(other.filteredModules);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 1,
      "euzintan": 15,
      "fanminj": 74,
      "juandavinlie": 121,
      "-": 134
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyTrackr.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Unmodifiable view of Track."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * @param \u003cT\u003e A class that implements {@code Showable}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public interface ReadOnlyTrackr\u003cT\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Returns an unmodifiable view of the {@code Showable} objects list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * This list will not contain any duplicate objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    ObservableList\u003cT\u003e getList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    Path getModuleListFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Trackr.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.UniqueStudentList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroup;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.tutorialgroup.UniqueTutorialGroupList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Wraps all data at the Trackr level."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Duplicates are not allowed (by .isSame comparison)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class Trackr implements ReadOnlyTrackr\u003cModule\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private final UniqueModuleList moduleList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public Trackr() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        moduleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Creates a Trackr using the data in the {@code toBeCopied}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public Trackr(ReadOnlyTrackr\u003cModule\u003e toBeCopied) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Replaces the contents of the list with {@code data}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * {@code data} must not contain duplicate objects."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void setData(List\u003cModule\u003e data) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.moduleList.setModuleList(data);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Resets the existing data of this {@code Trackr} with {@code newData}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void resetData(ReadOnlyTrackr\u003cModule\u003e newData) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        setData(newData.getList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    // Module Operations"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Returns true if an object with the same identity as {@code object} exists in Trackr."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public boolean hasModule(Module object) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(object);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return moduleList.contains(object);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Adds an object to Trackr."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * The object must not already exist in Trackr."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void addModule(Module object) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(object);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        moduleList.addModule(object);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Replaces the given object {@code target} in the list with {@code editedObject}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * {@code target} must exist in Trackr."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * The identity of {@code editedObject} must not be the same as another existing object."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireAllNonNull(target, editedModule);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        moduleList.setModule(target, editedModule);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Removes {@code key} from this {@code Trackr}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * {@code key} must exist in Trackr."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void removeModule(Module key) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        moduleList.removeModule(key);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //Tutorial Group Operations"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public ObservableList\u003cTutorialGroup\u003e getTutorialGroupListOfModule(Module target) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return moduleList.getTutorialGroupListOfModule(target);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public UniqueTutorialGroupList getUniqueTutorialGroupList(Module target) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return moduleList.getUniqueTutorialGroupList(target);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     * Adds an TutorialGroup to Trackr."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * The object must not already exist in Trackr."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void addTutorialGroup(TutorialGroup tutorialGroup, Module currentModuleInView) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireNonNull(tutorialGroup);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        moduleList.addTutorialGroup(tutorialGroup, currentModuleInView);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     * Deletes a TutorialGroup to Trackr."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public void deleteTutorialGroup(TutorialGroup tutorialGroupToDelete, Module moduleToDeleteFrom) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        requireAllNonNull(tutorialGroupToDelete);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        moduleList.getUniqueTutorialGroupList(moduleToDeleteFrom)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            .removeTutorialGroup(tutorialGroupToDelete);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public void setTutorialGroup(TutorialGroup target, TutorialGroup edited) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        requireAllNonNull(target, edited);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        for (Module module : moduleList) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            if (module.getUniqueTutorialGroupList().contains(target)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "euzintan"
        },
        "content": "                module.getUniqueTutorialGroupList().setTutorialGroup(target, edited);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    // Student Operations"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public ObservableList\u003cStudent\u003e getStudentListOfTutorialGroup(Module targetModule, TutorialGroup targetTG) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return moduleList.getUniqueTutorialGroupList(targetModule).getStudentListOfTutorialGroup(targetTG);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public UniqueStudentList getUniqueStudentList(Module targetModule, TutorialGroup targetTg) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return moduleList.getUniqueTutorialGroupList(targetModule).getUniqueStudentList(targetTg);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     * Adds Student to Trackr."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void addStudent(Module targetModule, TutorialGroup targetTg, Student student) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        moduleList.getUniqueTutorialGroupList(targetModule).addStudent(student, targetTg);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return moduleList.asUnmodifiableObservableList().size() + \" data objects\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public ObservableList\u003cModule\u003e getList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return moduleList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                || (other instanceof Trackr // instanceof handles nulls"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                \u0026\u0026 moduleList.equals(((Trackr) other).moduleList));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return moduleList.hashCode();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 7,
      "euzintan": 15,
      "fanminj": 98,
      "juandavinlie": 44,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private Path moduleListFilePath \u003d Paths.get(\"data\", \"modulelist.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        setModuleListFilePath(newUserPrefs.getModuleListFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public Path getModuleListFilePath() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return moduleListFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void setModuleListFilePath(Path moduleListFilePath) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        requireNonNull(moduleListFilePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.moduleListFilePath \u003d moduleListFilePath;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        sb.append(\"\\nModule list data file location : \" + moduleListFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 10,
      "-": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exceptions/DuplicateShowableException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "package seedu.address.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Signals that the operation will result in duplicate {@code Showable} objects."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Objects are considered duplicates if they have the same id."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class DuplicateShowableException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public DuplicateShowableException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        super(\"Operation would result in duplicate items\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 1,
      "fanminj": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exceptions/NotInModuleViewException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package seedu.address.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class NotInModuleViewException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public NotInModuleViewException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        super(\"You are currently not in the Module view. Run listMod to go back to the module view.\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exceptions/ShowableNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "package seedu.address.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Signals that the operation is unable to find a specified {@code Showable} object."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class ShowableNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 1,
      "fanminj": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Module.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroup;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.model.tutorialgroup.UniqueTutorialGroupList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private ModuleId moduleId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private UniqueTutorialGroupList tutorialGroups;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     * Constructs an {@code Module}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     * @param moduleId"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public Module(ModuleId moduleId) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        requireNonNull(moduleId);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        this.moduleId \u003d moduleId;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.tutorialGroups \u003d new UniqueTutorialGroupList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Constructs an {@code Module}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param moduleId"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param tutorialGroups"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public Module(ModuleId moduleId, UniqueTutorialGroupList tutorialGroups) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        requireNonNull(moduleId);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        requireNonNull(tutorialGroups);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.moduleId \u003d moduleId;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.tutorialGroups \u003d tutorialGroups;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public ModuleId getModuleId() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        return this.moduleId;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public int getTotalStudents() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return this.tutorialGroups.stream().map(TutorialGroup::getStudents)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                .map(List::size).reduce(Integer::sum).orElse(0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public int getTotalGroups() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return this.tutorialGroups.size();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public ObservableList\u003cTutorialGroup\u003e getTutorialGroups() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return tutorialGroups.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public UniqueTutorialGroupList getUniqueTutorialGroupList() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return tutorialGroups;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public void addTutorialGroup(TutorialGroup tutorialGroup) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        tutorialGroups.addTutorialGroup(tutorialGroup);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public void removeTutorialGroup(TutorialGroup tutorialGroup) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        tutorialGroups.removeTutorialGroup(tutorialGroup);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                || (other instanceof Module // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                \u0026\u0026 getModuleId().equals(((Module) other).getModuleId())); // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     * Returns true if both modules of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     * This defines a weaker notion of equality between two modules."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public boolean isSame(Module otherModule) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        if (otherModule \u003d\u003d this) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        return otherModule !\u003d null"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                \u0026\u0026 otherModule.getModuleId().equals(getModuleId());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return getModuleId().toString();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 46,
      "EthanTheGoondu": 32,
      "fanminj": 5,
      "juandavinlie": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/ModuleContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class ModuleContainsKeywordsPredicate implements Predicate\u003cModule\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public ModuleContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public boolean test(Module module) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(module.getModuleId().toString(), keyword));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                || (other instanceof ModuleContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                \u0026\u0026 keywords.equals(((ModuleContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 1,
      "juandavinlie": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/ModuleId.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": " * Represents a Module\u0027s ID in the module list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidModuleId(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "public class ModuleId {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            \"MODULE_CODE should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private String id;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Constructs a {@code ModuleId}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param id A valid id."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public ModuleId(String id) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        checkArgument(isValidModuleId(id), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Returns true if a given string is a valid ID."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static boolean isValidModuleId(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                || (other instanceof ModuleId // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                \u0026\u0026 id.equals(((ModuleId) other).id)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return id.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 57,
      "juandavinlie": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/UniqueModuleList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.exceptions.DuplicateShowableException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.exceptions.ShowableNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroup;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.tutorialgroup.UniqueTutorialGroupList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class UniqueModuleList implements Iterable\u003cModule\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private final ObservableList\u003cModule\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private final ObservableList\u003cModule\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    // Module Operations"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Returns true if the list contains an equivalent {@code Showable} object as the given argument."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public boolean contains(Module toCheck) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSame);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Adds an {@code Showable} object to the list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * The object must not already exist in the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void addModule(Module toAdd) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new DuplicateShowableException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Replaces the {@code Showable} object {@code target} in the list with {@code editedObject}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * The identity of {@code editedObject} must not be the same as another existing object in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireAllNonNull(target, editedModule);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new ShowableNotFoundException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (!target.isSame(editedModule) \u0026\u0026 contains(editedModule)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new DuplicateShowableException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        internalList.set(index, editedModule);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Removes the equivalent object from the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * The object must exist in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void removeModule(Module toRemove) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new ShowableNotFoundException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void setModuleList(UniqueModuleList replacement) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Replaces the contents of this list with {@code objects}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * {@code objects} must not contain duplicate objects."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void setModuleList(List\u003cModule\u003e objects) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (!modulesAreUnique(objects)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new DuplicateShowableException();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        internalList.setAll(objects);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public ObservableList\u003cModule\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    // Tutorial Group Operations"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Returns the tutorial group list of the given module as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public ObservableList\u003cTutorialGroup\u003e getTutorialGroupListOfModule(Module target) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return internalList.get(index).getTutorialGroups();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public UniqueTutorialGroupList getUniqueTutorialGroupList(Module target) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return internalList.get(index).getUniqueTutorialGroupList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Adds an {@code Showable} object to the list."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * The object must not already exist in the list."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void addTutorialGroup(TutorialGroup tutorialGroup, Module currentModuleInView) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        int index \u003d internalList.indexOf(currentModuleInView);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (index \u003e\u003d 0) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            internalList.get(index).addTutorialGroup(tutorialGroup);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public Iterator\u003cModule\u003e iterator() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                || (other instanceof UniqueModuleList // instanceof handles nulls"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueModuleList) other).internalList));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Returns true if {@code objects} contains only unique objects."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private boolean modulesAreUnique(List\u003cModule\u003e objects) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        for (int i \u003d 0; i \u003c objects.size() - 1; i++) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            for (int j \u003d i + 1; j \u003c objects.size(); j++) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                if (objects.get(i).isSame(objects.get(j))) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 11,
      "juandavinlie": 142
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Attendance.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Represents a Student\u0027s attendance in Trackr. This includes the student\u0027s participation score."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidWeekNumber(String)} and"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": " * {@link #isValidParticipationEdit(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class Attendance {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Attendance covers week 1 to 13.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \"Please provide participation score in integers only (from -100 to 100).\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            + \"Note that the minimum score is 0 and maximum score is 100.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static final String WEEK_NUMBER_CONSTRAINTS \u003d \"The week number can only be from %s to %s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[-]?\\\\d+\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    // attendance"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final int MIN_WEEK \u003d 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final int MAX_WEEK \u003d 13;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    // class participation"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final int MIN_VALUE \u003d -100;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final int MIN_SCORE \u003d 0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final int MAX_SCORE \u003d 100;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private boolean[] isPresent;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private int value;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Constructor for Attendance."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public Attendance() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.isPresent \u003d new boolean[MAX_WEEK];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.value \u003d 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Returns true if a given string is a valid week number."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static boolean isValidWeekNumber(String weekNumber) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (weekNumber.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            int week \u003d Integer.parseInt(weekNumber);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return MIN_WEEK \u003c\u003d week"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    \u0026\u0026 week \u003c\u003d MAX_WEEK;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Returns true if a given string is a valid participation score."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static boolean isValidParticipationEdit(String participation) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (participation.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            int score \u003d Integer.parseInt(participation);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return MIN_VALUE \u003c\u003d score"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    \u0026\u0026 score \u003c\u003d MAX_SCORE;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Returns true if a given string is a valid participation score."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static boolean isValidParticipation(String participation) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (participation.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            int score \u003d Integer.parseInt(participation);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            return MIN_SCORE \u003c\u003d score"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                    \u0026\u0026 score \u003c\u003d MAX_SCORE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private void parseAddingAttendance(String attendance) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        int week \u003d Integer.parseInt(attendance) - 1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        isPresent[week] \u003d true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private void parseDeletingAttendance(String attendance) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        int week \u003d Integer.parseInt(attendance) - 1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        isPresent[week] \u003d false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Records the student as present on the given week number."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void addAttendance(String weekNumber) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        checkArgument(isValidWeekNumber(weekNumber), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        parseAddingAttendance(weekNumber);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Records the student as absent on the given week number."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void deleteAttendance(String weekNumber) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        checkArgument(isValidWeekNumber(weekNumber), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        parseDeletingAttendance(weekNumber);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private void parseParticipation(String participation) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        int score \u003d Integer.parseInt(participation);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        value +\u003d score;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (value \u003e MAX_SCORE) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            value \u003d MAX_SCORE;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        } else if (value \u003c MIN_SCORE) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            value \u003d MIN_SCORE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Adjusts the student\u0027s participation score."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void editParticipation(String participation) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        checkArgument(isValidParticipationEdit(participation), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        parseParticipation(participation);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Sets the student\u0027s participation score."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void setParticipation(String participation) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        checkArgument(isValidParticipation(participation), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        value \u003d Integer.parseInt(participation);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Returns a {@code String} listing out the week(s) where the student is present."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public String listOutAttendedWeeks() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        StringBuilder result \u003d new StringBuilder(\"week(s): \");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        for (int i \u003d 0; i \u003c isPresent.length; i++) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            if (isPresent[i]) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                result.append(String.format(\"%d \", i + 1));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public int getAttendanceScore() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        int score \u003d 0;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        for (int i \u003d 0; i \u003c isPresent.length; i++) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            if (isPresent[i]) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                score \u003d score + 1;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return score;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public int getParticipationScore() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public String getParticipationScoreAsString() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return String.valueOf(value);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public String getMaxParticipationScore() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return String.valueOf(MAX_SCORE);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public boolean[] getIsPresent() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return isPresent;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Records the student as present on the given week numbers."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void setIsPresent(boolean[] attendance) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(attendance);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.isPresent \u003d attendance.clone();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        int result \u003d 0;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        for (boolean b : isPresent) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            if (b) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                result++;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return String.format(\"%d/%d weeks attended, with a participation score of: %d/%d\","
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                result,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                MAX_WEEK,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                value,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                MAX_SCORE"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                || (other instanceof Attendance // instanceof handles nulls"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \u0026\u0026 Arrays.equals(isPresent, ((Attendance) other).isPresent)) // state check"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \u0026\u0026 value \u003d\u003d ((Attendance) other).value;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return Objects.hash(isPresent, value);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 35,
      "fanminj": 162,
      "juandavinlie": 10,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/AttendanceBelowSpecifiedScorePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class AttendanceBelowSpecifiedScorePredicate implements Predicate\u003cStudent\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private final int specifiedScore;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public AttendanceBelowSpecifiedScorePredicate(int specifiedScore) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.specifiedScore \u003d specifiedScore;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public boolean test(Student student) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return student.getAttendance().getAttendanceScore() \u003c specifiedScore;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                || (other instanceof AttendanceBelowSpecifiedScorePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                \u0026\u0026 specifiedScore \u003d\u003d ((AttendanceBelowSpecifiedScorePredicate) other).specifiedScore); // state check"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 22,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 1,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 1,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cStudent\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public boolean test(Student student) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(student.getName().toString(), keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 3,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/ParticipationBelowSpecifiedScorePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class ParticipationBelowSpecifiedScorePredicate implements Predicate\u003cStudent\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private final int specifiedScore;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public ParticipationBelowSpecifiedScorePredicate(int specifiedScore) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.specifiedScore \u003d specifiedScore;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public boolean test(Student student) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return student.getAttendance().getParticipationScore() \u003c specifiedScore;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                || (other instanceof ParticipationBelowSpecifiedScorePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                \u0026\u0026 specifiedScore \u003d\u003d ((ParticipationBelowSpecifiedScorePredicate) other).specifiedScore); // state check"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 22,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 2,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Student.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Represents a Student in the app."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class Student {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private final StudentId studentId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private final Attendance attendance;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Constructor for Student."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public Student(Name name, Phone phone, Email email, Set\u003cTag\u003e tags, StudentId studentId, Attendance attendance) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireAllNonNull(name, phone, email, tags, studentId, attendance);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.studentId \u003d studentId;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.attendance \u003d attendance;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public StudentId getStudentId() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return studentId;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public Attendance getAttendance() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return attendance;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Returns true if both students have the same id. Other fields can be similar."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * This defines a weaker notion of equality between two students."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public boolean isSame(Student otherStudent) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (otherStudent \u003d\u003d this) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return otherStudent !\u003d null"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \u0026\u0026 otherStudent.getStudentId().equals(getStudentId());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Returns true if both students have the same identity and data fields."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * This defines a stronger notion of equality between two students."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (!(other instanceof Student)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Student otherStudent \u003d (Student) other;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return otherStudent.getName().equals(getName())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \u0026\u0026 otherStudent.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \u0026\u0026 otherStudent.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \u0026\u0026 otherStudent.getTags().equals(getTags())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \u0026\u0026 otherStudent.getStudentId().equals(getStudentId())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \u0026\u0026 otherStudent.getAttendance().equals(getAttendance());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return Objects.hash(name, phone, email, tags, studentId, attendance);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                .append(\" Student ID: \")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                .append(getStudentId())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                .append(\" Attendance: \")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                .append(getAttendance())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 38,
      "-": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/StudentId.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Represents a Student\u0027s id in the app."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidStudentId(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class StudentId {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Student IDs begin and end with a capital letter \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    + \"and should have 7 digits (e.g. A1243567X)\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[A-Z]\\\\d{7}[A-Z]$\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Constructs a {@code StudentId}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * @param studentId A valid student id."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public StudentId(String studentId) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(studentId);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        checkArgument(isValidStudentId(studentId), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        value \u003d studentId;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Returns true if a given string is a valid student id."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static boolean isValidStudentId(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                || (other instanceof StudentId // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \u0026\u0026 value.equals(((StudentId) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 1,
      "fanminj": 50,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/UniqueStudentList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.exceptions.DuplicateShowableException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.exceptions.ShowableNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class UniqueStudentList implements Iterable\u003cStudent\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private final ObservableList\u003cStudent\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private final ObservableList\u003cStudent\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Returns true if the list contains an equivalent student as the given argument."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public boolean contains(Student toCheck) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSame);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Adds a student to the list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * The student must not already exist in the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void addStudent(Student toAdd) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new DuplicateShowableException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Replaces the student {@code target} in the list with {@code editedStudent}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * The identity of {@code editedStudent} must not be the same as another existing student in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireAllNonNull(target, editedStudent);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new ShowableNotFoundException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (!target.isSame(editedStudent) \u0026\u0026 contains(editedStudent)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new DuplicateShowableException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        internalList.set(index, editedStudent);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Removes the equivalent object from the list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * The object must exist in the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void removeStudent(Student toRemove) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new ShowableNotFoundException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void setStudentList(UniqueStudentList replacement) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Replaces the contents of this list with {@code objects}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * {@code objects} must not contain duplicate objects."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void setStudentList(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        requireAllNonNull(students);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (!studentsAreUnique(students)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new DuplicateShowableException();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        internalList.setAll(students);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public ObservableList\u003cStudent\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public Iterator\u003cStudent\u003e iterator() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                || (other instanceof UniqueStudentList // instanceof handles nulls"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueStudentList) other).internalList));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public int count() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return this.internalList.size();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Returns true if {@code objects} contains only unique objects."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private boolean studentsAreUnique(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        for (int i \u003d 0; i \u003c students.size() - 1; i++) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            for (int j \u003d i + 1; j \u003c students.size(); j++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                if (students.get(i).isSame(students.get(j))) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 124,
      "juandavinlie": 4,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tutorialgroup/DayOfWeek.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "package seedu.address.model.tutorialgroup;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDayOfWeek(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "public class DayOfWeek {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            \"Day of the week can only be MON/TUE/WED/THU/FRI/SAT/SUN\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private final String day;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Constructs a {@code DayOfWeek}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param day The day of the week."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public DayOfWeek(String day) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        requireNonNull(day);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        checkArgument(isValidDayOfWeek(day), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Returns true if a given string is a valid ID."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static boolean isValidDayOfWeek(String day) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        List\u003cString\u003e daysOfWeek \u003d Arrays.asList(\"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return daysOfWeek.contains(day);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                || (other instanceof DayOfWeek // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                \u0026\u0026 day.equals(((DayOfWeek) other).day)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return day.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tutorialgroup/TimeOfDay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "package seedu.address.model.tutorialgroup;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTimeOfDay(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "public class TimeOfDay {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            \"Time is supposed to take the form of \u0027HH:MM\u0027\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static final String TIME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            \"Start time is supposed to be BEFORE End time\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private final LocalTime time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Constructs a {@code TimeOfDay}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param time The time of the week."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public TimeOfDay(String time) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        checkArgument(isValidTimeOfDay(time), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.time \u003d LocalTime.parse(time);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Returns true if a given string is a valid timeDate format."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static boolean isValidTimeOfDay(String time) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            LocalTime.parse(time);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Returns true if a given string is a valid timeDate format."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static boolean isValidTimes(String start, String end) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        int startTimeInteger \u003d Integer.parseInt(start.replace(\":\", \"\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        int endTimeInteger \u003d Integer.parseInt(end.replace(\":\", \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return endTimeInteger - startTimeInteger \u003e 0;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return time.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                || (other instanceof TimeOfDay // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                \u0026\u0026 time.equals(((TimeOfDay) other).time)); // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return time.hashCode();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tutorialgroup/TutorialContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "euzintan"
        },
        "content": "package seedu.address.model.tutorialgroup;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "euzintan"
        },
        "content": "public class TutorialContainsKeywordsPredicate implements Predicate\u003cTutorialGroup\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public TutorialContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public boolean test(TutorialGroup tutorialGroup) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        String idstring \u003d tutorialGroup.getId().toString();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            .anyMatch(keyword -\u003e idstring.toUpperCase().contains(keyword.toUpperCase()));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            || (other instanceof TutorialContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            \u0026\u0026 keywords.equals(((TutorialContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "euzintan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 1,
      "euzintan": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tutorialgroup/TutorialGroup.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "package seedu.address.model.tutorialgroup;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.UniqueStudentList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "euzintan"
        },
        "content": "public class TutorialGroup {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private final TutorialGroupId tutorialGroupId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private DayOfWeek dayOfWeek;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private TimeOfDay startTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private TimeOfDay endTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private final UniqueStudentList students;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Constructor for Tutorial Group"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param tutorialGroupId"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public TutorialGroup(TutorialGroupId tutorialGroupId, DayOfWeek dayOfWeek, TimeOfDay startTime, TimeOfDay endTime) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.tutorialGroupId \u003d tutorialGroupId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.dayOfWeek \u003d dayOfWeek;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.students \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Constructor for Tutorial Group"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param tutorialGroupId"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public TutorialGroup(TutorialGroupId tutorialGroupId, DayOfWeek dayOfWeek,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                         TimeOfDay startTime, TimeOfDay endTime, UniqueStudentList students) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.tutorialGroupId \u003d tutorialGroupId;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        this.dayOfWeek \u003d dayOfWeek;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.students \u003d students;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    //GETTERS"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public TutorialGroupId getId() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return this.tutorialGroupId;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public TimeOfDay getStartTime() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        return this.startTime;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public TimeOfDay getEndTime() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public DayOfWeek getDayOfWeek() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        return this.dayOfWeek;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public ObservableList\u003cStudent\u003e getStudents() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return students.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public UniqueStudentList getUniqueStudentList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return students;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public int getTotalStudents() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return this.students.count();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    //SETTERS"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void setLessonTime(TimeOfDay startTime, TimeOfDay endTime) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    //ADD"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     * By right this method should just take in a studentId,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     * then we search the Library of students for the correct instance"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     * But the Library has not been implemented yet so this will do for now"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     * @param student"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public void addStudent(Student student) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        students.addStudent(student);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     * Checks if two TutorialGroups are the same by first checking if they are the same object,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     * then checking if there have the same id."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     * @param otherTutorialGroup to check against"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     * @return true if same, false if not"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public boolean isSame(TutorialGroup otherTutorialGroup) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        if (otherTutorialGroup \u003d\u003d this) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        return otherTutorialGroup !\u003d null"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            \u0026\u0026 otherTutorialGroup.getId().equals(getId());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                || (other instanceof TutorialGroup) // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "euzintan"
        },
        "content": "                \u0026\u0026 getId().equals(((TutorialGroup) other).getId())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            \u0026\u0026 getDayOfWeek().equals(((TutorialGroup) other).getDayOfWeek())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            \u0026\u0026 getStartTime().equals(((TutorialGroup) other).getStartTime())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            \u0026\u0026 getEndTime().equals(((TutorialGroup) other).getEndTime()); // state check"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return getId().toString();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "euzintan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 40,
      "euzintan": 57,
      "fanminj": 18,
      "juandavinlie": 5,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tutorialgroup/TutorialGroupId.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "package seedu.address.model.tutorialgroup;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTutorialGroupId(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "public class TutorialGroupId {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            \"ID should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private final String id;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Constructs a {@code TutorialGroupId}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param id A valid id."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public TutorialGroupId(String id) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        checkArgument(isValidTutorialGroupId(id), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Returns true if a given string is a valid ID."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static boolean isValidTutorialGroupId(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                || (other instanceof TutorialGroupId // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                \u0026\u0026 id.equals(((TutorialGroupId) other).id)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return id.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tutorialgroup/UniqueTutorialGroupList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.model.tutorialgroup;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.exceptions.DuplicateShowableException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.exceptions.ShowableNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.UniqueStudentList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class UniqueTutorialGroupList implements Iterable\u003cTutorialGroup\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private final ObservableList\u003cTutorialGroup\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private final ObservableList\u003cTutorialGroup\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Returns true if the list contains an equivalent {@code Showable} object as the given argument."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public boolean contains(TutorialGroup toCheck) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSame);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Adds an {@code Showable} object to the list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * The object must not already exist in the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void addTutorialGroup(TutorialGroup toAdd) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new DuplicateShowableException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Replaces the {@code Showable} object {@code target} in the list with {@code editedObject}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * The identity of {@code editedObject} must not be the same as another existing object in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void setTutorialGroup(TutorialGroup target, TutorialGroup editedObject) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireAllNonNull(target, editedObject);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new ShowableNotFoundException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (!target.isSame(editedObject) \u0026\u0026 contains(editedObject)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new DuplicateShowableException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        internalList.set(index, editedObject);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Removes the equivalent object from the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * The object must exist in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void removeTutorialGroup(TutorialGroup toRemove) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new ShowableNotFoundException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void setTutorialGroupList(UniqueTutorialGroupList replacement) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Replaces the contents of this list with {@code objects}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * {@code objects} must not contain duplicate objects."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void setTutorialGroupList(List\u003cTutorialGroup\u003e objects) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (!tutorialGroupsAreUnique(objects)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new DuplicateShowableException();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        internalList.setAll(objects);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public ObservableList\u003cTutorialGroup\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Returns the tutorial group list of the given module as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public ObservableList\u003cStudent\u003e getStudentListOfTutorialGroup(TutorialGroup target) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return internalList.get(index).getStudents();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public UniqueStudentList getUniqueStudentList(TutorialGroup target) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return internalList.get(index).getUniqueStudentList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     * Adds a {@code Student} in the tutorial group list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     * @param student The new {@code Student} to be added"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     * @param currentTgInView The current tutorial group list"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void addStudent(Student student, TutorialGroup currentTgInView) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        int index \u003d internalList.indexOf(currentTgInView);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (index \u003e\u003d 0) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            internalList.get(index).addStudent(student);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public Stream\u003cTutorialGroup\u003e stream() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return internalList.stream();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public Iterator\u003cTutorialGroup\u003e iterator() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                || (other instanceof UniqueTutorialGroupList // instanceof handles nulls"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueTutorialGroupList) other).internalList));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Returns true if {@code objects} contains only unique objects."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private boolean tutorialGroupsAreUnique(List\u003cTutorialGroup\u003e objects) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        for (int i \u003d 0; i \u003c objects.size() - 1; i++) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            for (int j \u003d i + 1; j \u003c objects.size(); j++) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                if (objects.get(i).isSame(objects.get(j))) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 5,
      "EthanTheGoondu": 9,
      "fanminj": 22,
      "juandavinlie": 123,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.ReadOnlyTrackr;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.Trackr;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.ModuleId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.student.Attendance;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.StudentId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static Module[] getSampleModules() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return new Module[] {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            new Module(new ModuleId(\"CS2103T\"))"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static ReadOnlyTrackr\u003cModule\u003e getSampleModuleList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        Trackr sampleAb \u003d new Trackr();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        for (Module sampleModule : getSampleModules()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            sampleAb.addModule(sampleModule);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static Student[] getSampleStudents() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return new Student[] {new Student(new Name(\"john\"), new Phone(\"12345678\"), new Email(\"hello@email.com\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                        getTagSet(\"friends\"), new StudentId(\"A1234567X\"), new Attendance())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        };"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public static ReadOnlyTrackr\u003cStudent\u003e getSampleStudentList() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        Trackr\u003cStudent\u003e sample \u003d new Trackr\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        for (Student sampleStudent : getSampleStudents()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //            sample.addObject(sampleStudent);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        return sample;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 5,
      "fanminj": 9,
      "juandavinlie": 12,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedAttendance.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Attendance;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Jackson-friendly version of attendance records."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "class JsonAdaptedAttendance {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Attendance\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private final List\u003cJsonAdaptedWeekNumber\u003e weekNumbers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private final String participationScore;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Constructs a {@code JsonAdaptedAttendance} with the given {@code isPresent}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public JsonAdaptedAttendance(@JsonProperty(\"weekNumbers\") List\u003cJsonAdaptedWeekNumber\u003e weekNums,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                                 @JsonProperty(\"participationScore\") String participationScore) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (weekNums !\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            this.weekNumbers.addAll(weekNums);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.participationScore \u003d participationScore;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Converts a given {@code Attendance} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public JsonAdaptedAttendance (Attendance source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assert source !\u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        boolean[] attendanceRecords \u003d source.getIsPresent();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        List\u003cString\u003e attendanceRecordsString \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        for (int i \u003d 0; i \u003c attendanceRecords.length; i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            if (attendanceRecords[i]) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                attendanceRecordsString.add(String.valueOf(i + 1));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        weekNumbers.addAll(attendanceRecordsString.stream().map(JsonAdaptedWeekNumber::new)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        participationScore \u003d source.getParticipationScoreAsString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Converts this Jackson-friendly adapted attendance record into the model\u0027s {@code Attendance} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public Attendance toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        final Attendance modelAttendance \u003d new Attendance();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        for (JsonAdaptedWeekNumber weekNumber : weekNumbers) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            modelAttendance.addAttendance(weekNumber.toModelType());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (participationScore \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                    \"Participation Score\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (!Attendance.isValidParticipation(participationScore)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new IllegalValueException(Attendance.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        modelAttendance.setParticipation(participationScore);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return modelAttendance;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 43,
      "fanminj": 31,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedModule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.ModuleId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.tutorialgroup.UniqueTutorialGroupList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "public class JsonAdaptedModule {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Module\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private final String moduleId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private final List\u003cJsonAdaptedTutorialGroup\u003e tutorialGroups \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Constructs a {@code JsonAdaptedModule} with the given module details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public JsonAdaptedModule(@JsonProperty(\"moduleId\") String moduleId,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                             @JsonProperty(\"tutorialGroups\") List\u003cJsonAdaptedTutorialGroup\u003e tutorialGroups) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.moduleId \u003d moduleId;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (tutorialGroups !\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            this.tutorialGroups.addAll(tutorialGroups);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Converts a given {@code Module} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public JsonAdaptedModule(Module source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assert source !\u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        moduleId \u003d source.getModuleId().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        tutorialGroups.addAll(source.getTutorialGroups().stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                .map(JsonAdaptedTutorialGroup::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Converts this Jackson-friendly adapted module object into the model\u0027s {@code Module} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted module."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public Module toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        final UniqueTutorialGroupList modelTutorialGroups \u003d new UniqueTutorialGroupList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        for (JsonAdaptedTutorialGroup tutorialGroup : tutorialGroups) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            modelTutorialGroups.addTutorialGroup(tutorialGroup.toModelType());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (moduleId \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                    ModuleId.class.getSimpleName()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (!ModuleId.isValidModuleId(moduleId)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new IllegalValueException(ModuleId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        final ModuleId modelModuleId \u003d new ModuleId(moduleId);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return new Module(modelModuleId, modelTutorialGroups);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedStudent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Attendance;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.StudentId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": " * Jackson-friendly version of {@link Student}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "class JsonAdaptedStudent {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Student\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private final String studentId;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private final JsonAdaptedAttendance attendance;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Constructs a {@code JsonAdaptedStudent} with the given student details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public JsonAdaptedStudent(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                              @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                              @JsonProperty(\"studentId\") String studentId,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                              @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                              @JsonProperty(\"attendance\") JsonAdaptedAttendance attendance) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.studentId \u003d studentId;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.attendance \u003d attendance;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Converts a given {@code Student} into this class for Jackson use."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public JsonAdaptedStudent(Student source) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assert source !\u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        name \u003d source.getName().toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        phone \u003d source.getPhone().toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        email \u003d source.getEmail().toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        studentId \u003d source.getStudentId().toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        attendance \u003d new JsonAdaptedAttendance(source.getAttendance());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Student} object."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public Student toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (studentId \u003d\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                    StudentId.class.getSimpleName()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (!StudentId.isValidStudentId(studentId)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new IllegalValueException(StudentId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        final StudentId modelStudentId \u003d new StudentId(studentId);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (attendance \u003d\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                    \"Attendance\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        Attendance modelAttendance \u003d attendance.toModelType();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return new Student(modelName, modelPhone, modelEmail, modelTags, modelStudentId, modelAttendance);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 34,
      "fanminj": 2,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public JsonAdaptedTag(@JsonProperty(\"tagName\") String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assert source !\u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 3,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTutorialGroup.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.UniqueStudentList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.tutorialgroup.DayOfWeek;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.tutorialgroup.TimeOfDay;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroup;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroupId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "public class JsonAdaptedTutorialGroup {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Tutorial Group\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private final String tutorialGroupId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private final String startTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private final String endTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    private final String dayOfWeek;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private final List\u003cJsonAdaptedStudent\u003e students \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Constructs a {@code JsonAdaptedTutorialGroup} with the given tutorial group details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public JsonAdaptedTutorialGroup(@JsonProperty(\"tutorialGroupId\") String tutorialGroupId,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                                    @JsonProperty(\"dayOfWeek\") String dayOfWeek,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                                    @JsonProperty(\"startTime\") String startTime,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                                    @JsonProperty(\"endTime\") String endTime,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                                    @JsonProperty(\"students\") List\u003cJsonAdaptedStudent\u003e students) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.tutorialGroupId \u003d tutorialGroupId;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.dayOfWeek \u003d dayOfWeek;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.students.addAll(students);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Converts a given {@code TutorialGroup} into this class for Jackson use."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public JsonAdaptedTutorialGroup(TutorialGroup source) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assert source !\u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        tutorialGroupId \u003d source.getId().toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        dayOfWeek \u003d source.getDayOfWeek().toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        startTime \u003d source.getStartTime().toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        endTime \u003d source.getEndTime().toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.students.addAll(source.getStudents().stream().map(JsonAdaptedStudent::new)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Converts this Jackson-friendly adapted module object into the model\u0027s {@code Module} object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted module."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public TutorialGroup toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        final UniqueStudentList modelStudents \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        for (JsonAdaptedStudent student: students) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            modelStudents.addStudent(student.toModelType());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (tutorialGroupId \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                    TutorialGroupId.class.getSimpleName()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (!TutorialGroupId.isValidTutorialGroupId(tutorialGroupId)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new IllegalValueException(TutorialGroupId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        final TutorialGroupId modelTutorialGroupId \u003d new TutorialGroupId(tutorialGroupId);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (dayOfWeek \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                    DayOfWeek.class.getSimpleName()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (!DayOfWeek.isValidDayOfWeek(dayOfWeek)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new IllegalValueException(DayOfWeek.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        final DayOfWeek modelDayOfWeek \u003d new DayOfWeek(dayOfWeek);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (startTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                    TimeOfDay.class.getSimpleName()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (!TimeOfDay.isValidTimeOfDay(startTime)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new IllegalValueException(TimeOfDay.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        final TimeOfDay modelStartTime \u003d new TimeOfDay(startTime);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (endTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                    TimeOfDay.class.getSimpleName()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (!TimeOfDay.isValidTimeOfDay(endTime)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new IllegalValueException(TimeOfDay.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        final TimeOfDay modelEndTime \u003d new TimeOfDay(endTime);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (!TimeOfDay.isValidTimes(startTime, endTime)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new IllegalValueException(TimeOfDay.TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return new TutorialGroup(modelTutorialGroupId, modelDayOfWeek,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                modelStartTime, modelEndTime, modelStudents);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 109,
      "euzintan": 1,
      "fanminj": 3,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedWeekNumber.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.student.Attendance;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": " * Jackson-friendly version of week number."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "class JsonAdaptedWeekNumber {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private final String weekNumber;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public JsonAdaptedWeekNumber(@JsonProperty(\"weekNumber\") String weekNumber) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.weekNumber \u003d weekNumber;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Converts this Jackson-friendly adapted week number object into a string."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted week number."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public String toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (!Attendance.isValidWeekNumber(weekNumber)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new IllegalValueException(String.format((Attendance.WEEK_NUMBER_CONSTRAINTS),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                    Attendance.MIN_WEEK, Attendance.MAX_WEEK));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return weekNumber;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonModuleListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.ReadOnlyTrackr;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "// TODO better JavaDocs"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonModuleListStorage implements ModuleListStorage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonModuleListStorage.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonModuleListStorage(Path filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public Path getModuleFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public Optional\u003cReadOnlyTrackr\u003cModule\u003e\u003e readModuleList() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return readModuleList(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Reads the module list in the specified filePath."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param filePath The filePath containing the moduleList to be read."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public Optional\u003cReadOnlyTrackr\u003cModule\u003e\u003e readModuleList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        Optional\u003cJsonSerializableModuleList\u003e jsonModuleList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                filePath, JsonSerializableModuleList.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (!jsonModuleList.isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            return Optional.of(jsonModuleList.get().toModelType());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void saveModuleList(ReadOnlyTrackr\u003cModule\u003e moduleList) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        saveModuleList(moduleList, filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Saves the module list in the specified file path."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param moduleList The moduleList to be saved."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param filePath The filePath at which the moduleList will be saved."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void saveModuleList(ReadOnlyTrackr\u003cModule\u003e moduleList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        requireNonNull(moduleList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableModuleList(moduleList), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 72,
      "fanminj": 5,
      "-": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableModuleList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.ReadOnlyTrackr;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.Trackr;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "@JsonRootName(value \u003d \"modulelist\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "public class JsonSerializableModuleList {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"Module list contains duplicate module(s).\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private final List\u003cJsonAdaptedModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Constructs a {@code JsonSerializableModuleList} with the given modules."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public JsonSerializableModuleList(@JsonProperty(\"modules\") List\u003cJsonAdaptedModule\u003e modules) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.modules.addAll(modules);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Converts a given {@code ReadOnlyModuleList} into this class for Jackson use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableModuleList}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public JsonSerializableModuleList(ReadOnlyTrackr\u003cModule\u003e source) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assert source !\u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        modules.addAll(source.getList().stream().map(JsonAdaptedModule::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Converts this module list into the model\u0027s {@code ModuleList} object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public Trackr toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        Trackr moduleList \u003d new Trackr();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        for (JsonAdaptedModule jsonAdaptedModule : modules) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            Module module \u003d jsonAdaptedModule.toModelType();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            if (moduleList.hasModule(module)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            moduleList.addModule(module);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return moduleList;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 50,
      "fanminj": 4,
      "juandavinlie": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ModuleListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.ReadOnlyTrackr;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ModuleListStorage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    Path getModuleFilePath();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    Optional\u003cReadOnlyTrackr\u003cModule\u003e\u003e readModuleList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    Optional\u003cReadOnlyTrackr\u003cModule\u003e\u003e readModuleList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    void saveModuleList(ReadOnlyTrackr\u003cModule\u003e moduleList) throws IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    void saveModuleList(ReadOnlyTrackr\u003cModule\u003e moduleList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 16,
      "fanminj": 5,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.ReadOnlyTrackr;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "public interface Storage extends ModuleListStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //    Path getStudentFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //    Optional\u003cReadOnlyTrackr\u003cStudent\u003e\u003e readStudentList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //    void saveStudentList(ReadOnlyTrackr\u003cStudent\u003e studentList) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    Path getModuleFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    Optional\u003cReadOnlyTrackr\u003cModule\u003e\u003e readModuleList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    void saveModuleList(ReadOnlyTrackr\u003cModule\u003e moduleList) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 2,
      "fanminj": 12,
      "juandavinlie": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.ReadOnlyTrackr;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Manages storage of Trackr data in local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModuleListStorage moduleListStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Creates a {@code StorageManager} with the given storages."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageManager(ModuleListStorage moduleListStorage,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                          UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.moduleListStorage \u003d moduleListStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Module methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public Path getModuleFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return moduleListStorage.getModuleFilePath();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public Optional\u003cReadOnlyTrackr\u003cModule\u003e\u003e readModuleList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return readModuleList(moduleListStorage.getModuleFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public Optional\u003cReadOnlyTrackr\u003cModule\u003e\u003e readModuleList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        logger.fine(\"Attempting to read module data from file: \" + filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return moduleListStorage.readModuleList(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void saveModuleList(ReadOnlyTrackr\u003cModule\u003e moduleList) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        saveModuleList(moduleList, moduleListStorage.getModuleFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void saveModuleList(ReadOnlyTrackr\u003cModule\u003e moduleList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        logger.fine(\"Attempting to write to module data file: \" + filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        moduleListStorage.saveModuleList(moduleList, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 1,
      "fanminj": 11,
      "juandavinlie": 1,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static final String USERGUIDE_URL \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            \"https://ay2021s1-cs2103t-w12-2.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 2,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private ModuleListPanel moduleListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private TutorialGroupListPanel tutorialGroupListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private StudentListPanel studentListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    private ViewDisplay viewDisplay;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    private StackPane viewDisplayPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private StackPane listPanelPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        moduleListPanel \u003d new ModuleListPanel(logic.getFilteredModuleList());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        listPanelPlaceholder.getChildren().add(moduleListPanel.getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        viewDisplay \u003d new ViewDisplay();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        viewDisplayPlaceholder.getChildren().add(viewDisplay.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getTrackrFilePath());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    void refillInnerPartsWithTutorialGroupList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        tutorialGroupListPanel \u003d new TutorialGroupListPanel(logic.getFilteredTutorialGroupList());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        listPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        listPanelPlaceholder.getChildren().add(tutorialGroupListPanel.getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        viewDisplay.setCurrentView(\"TUTORIAL GROUPS\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        viewDisplayPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        viewDisplayPlaceholder.getChildren().add(viewDisplay.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    void refillInnerPartsWithModuleList() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        moduleListPanel \u003d new ModuleListPanel(logic.getFilteredModuleList());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        listPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        listPanelPlaceholder.getChildren().add(moduleListPanel.getRoot());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        viewDisplay.setCurrentView(\"MODULES\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        viewDisplayPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        viewDisplayPlaceholder.getChildren().add(viewDisplay.getRoot());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    void refillInnerPartsWithStudentList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        studentListPanel \u003d new StudentListPanel(logic.getFilteredStudentList());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        listPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        listPanelPlaceholder.getChildren().add(studentListPanel.getRoot());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        viewDisplay.setCurrentView(\"STUDENTS\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        viewDisplayPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        viewDisplayPlaceholder.getChildren().add(viewDisplay.getRoot());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public ModuleListPanel getModuleListPanel() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return moduleListPanel;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            if (commandResult.isShowTutorialGroupList()) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                refillInnerPartsWithTutorialGroupList();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            if (commandResult.isShowModuleList()) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                refillInnerPartsWithModuleList();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            if (commandResult.isShowStudentList()) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                refillInnerPartsWithStudentList();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 15,
      "fanminj": 12,
      "juandavinlie": 27,
      "-": 190
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ModuleCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class ModuleCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private static final String FXML \u003d \"ModuleListCard.fxml\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public final Module module;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private Label moduleId;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private Label totalStudents;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private Label totalGroups;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Person} and index to display."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public ModuleCard(Module module, int displayedIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        moduleId.setText(module.getModuleId().toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        totalStudents.setText(\"Total Students: \" + module.getTotalStudents());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        totalGroups.setText(\"Total Groups: \" + module.getTotalGroups());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //        person.getTags().stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (!(other instanceof ModuleCard)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        ModuleCard card \u003d (ModuleCard) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                \u0026\u0026 module.equals(card.module);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 2,
      "juandavinlie": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ModuleListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class ModuleListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private static final String FXML \u003d \"ModuleListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ModuleListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private ListView\u003cModule\u003e moduleListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public ModuleListPanel(ObservableList\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        moduleListView.setItems(moduleList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        moduleListView.setCellFactory(listView -\u003e new ModuleListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    class ModuleListViewCell extends ListCell\u003cModule\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        protected void updateItem(Module module, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            super.updateItem(module, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            if (empty || module \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                setGraphic(new ModuleCard(module, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 1,
      "juandavinlie": 12,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seantaysl"
        },
        "content": " * A ui for the status bar that is displayed at the bottom of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StudentCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * An UI component that displays information of a {@code Student}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class StudentCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private static final String FXML \u003d \"StudentListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public final Student student;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private Label studentId;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private Label attendance;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Person} and index to display."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public StudentCard(Student student, int displayedIndex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.student \u003d student;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        name.setText(student.getName().toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        phone.setText(student.getPhone().toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        email.setText(student.getEmail().toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        studentId.setText(student.getStudentId().toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        attendance.setText(student.getAttendance().toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        student.getTags().stream()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (!(other instanceof StudentCard)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        StudentCard card \u003d (StudentCard) other;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                \u0026\u0026 student.equals(card.student);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 4,
      "fanminj": 8,
      "juandavinlie": 7,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StudentListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Panel containing the list of students."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class StudentListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(StudentListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private ListView\u003cStudent\u003e personListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Creates a {@code StudentListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public StudentListPanel(ObservableList\u003cStudent\u003e studentList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        personListView.setItems(studentList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new StudentListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Student} using a {@code StudentCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    class StudentListViewCell extends ListCell\u003cStudent\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        protected void updateItem(Student student, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            super.updateItem(student, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            if (empty || student \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                setGraphic(new StudentCard(student, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 1,
      "fanminj": 7,
      "juandavinlie": 40,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TutorialGroupCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroup;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class TutorialGroupCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private static final String FXML \u003d \"TutorialGroupListCard.fxml\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public final TutorialGroup tutorialGroup;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private Label groupId;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private Label totalStudents;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    private Label startTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    private Label endTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    private Label dayOfWeek;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    private FlowPane tags;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Person} and index to display."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public TutorialGroupCard(TutorialGroup tutorialGroup, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.tutorialGroup \u003d tutorialGroup;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        groupId.setText(tutorialGroup.getId().toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        totalStudents.setText(\"Total Students: \" + tutorialGroup.getTotalStudents());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        dayOfWeek.setText(\"Day: \" + tutorialGroup.getDayOfWeek());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        startTime.setText(\"Start Time: \" + tutorialGroup.getStartTime().toString().substring(0, 5));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        endTime.setText(\"End Time: \" + tutorialGroup.getEndTime().toString().substring(0, 5));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //totalStudents.setText(\"Total Students: \" + module.getTotalStudents());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //        startTime.setText(tutorialGroup.getStartTime().toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //        endTime.setText(tutorialGroup.getEndTime().toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //        duration.setText(\"\" + tutorialGroup.getDurationInHours());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //        person.getTags().stream()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        //                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (!(other instanceof TutorialGroupCard)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        TutorialGroupCard card \u003d (TutorialGroupCard) other;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            \u0026\u0026 tutorialGroup.equals(card.tutorialGroup);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 2,
      "euzintan": 9,
      "juandavinlie": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TutorialGroupListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroup;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Panel containing the list of tutorial groups."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class TutorialGroupListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private static final String FXML \u003d \"TutorialGroupListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TutorialGroupListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private ListView\u003cTutorialGroup\u003e tutorialGroupListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Creates a {@code TutorialGroupListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public TutorialGroupListPanel(ObservableList\u003cTutorialGroup\u003e tutorialGroupList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        tutorialGroupListView.setItems(tutorialGroupList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        tutorialGroupListView.setCellFactory(listView -\u003e new TutorialGroupListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code TutorialGroup} using a {@code TutorialGroupCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    class TutorialGroupListViewCell extends ListCell\u003cTutorialGroup\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        protected void updateItem(TutorialGroup tutorialGroup, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            super.updateItem(tutorialGroup, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            if (empty || tutorialGroup \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                setGraphic(new TutorialGroupCard(tutorialGroup, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 1,
      "fanminj": 1,
      "juandavinlie": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/TrackrTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 1,
      "-": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ViewDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seantaysl"
        },
        "content": " * A ui for the current view display that is displayed at the header of the application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seantaysl"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "public class ViewDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    private static final String FXML \u003d \"ViewDisplay.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    private TextArea viewDisplay;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     * Constructor for ViewDisplay."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public ViewDisplay() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        viewDisplay.setText(\"MODULES\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        viewDisplay.setDisable(true);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        viewDisplay.getStyleClass().remove(0, 1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public void setCurrentView(String view) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        ObservableList\u003cString\u003e viewDisplayStyle \u003d viewDisplay.getStyleClass();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        viewDisplayStyle.clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        switch (view) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        case \"TUTORIAL GROUPS\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "            viewDisplayStyle.add(\"view-display-tg\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        case \"STUDENTS\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "            viewDisplayStyle.add(\"view-display-student\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "            viewDisplayStyle.add(\"view-display-module\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        viewDisplay.setText(view);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 47
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "\u003cStackPane styleClass\u003d\"command-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "seantaysl": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Trackr\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        \u003cURL value\u003d\"@TrackrTheme.css\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "            \u003cStackPane fx:id\u003d\"viewDisplayPlaceholder\" prefHeight\u003d\"55.0\" prefWidth\u003d\"340.0\" styleClass\u003d\"pane-with-border\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "          \u003cStackPane fx:id\u003d\"listPanelPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 13,
      "-": 42
    }
  },
  {
    "path": "src/main/resources/view/ModuleListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                \u003cLabel fx:id\u003d\"moduleId\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            \u003cLabel fx:id\u003d\"totalStudents\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$totalStudents\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            \u003cLabel fx:id\u003d\"totalGroups\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$totalGroups\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 34
    }
  },
  {
    "path": "src/main/resources/view/ModuleListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    \u003cListView fx:id\u003d\"moduleListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 8
    }
  },
  {
    "path": "src/main/resources/view/StudentListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            \u003cLabel fx:id\u003d\"studentId\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$studentId\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            \u003cLabel fx:id\u003d\"attendance\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$attendance\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "fanminj": 37
    }
  },
  {
    "path": "src/main/resources/view/TrackrTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: derive(#000000, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    background-color: #000000; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".list-panel {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: #000000;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-base: #000000;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-control-inner-background: #000000;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: #000000;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: derive(#000000, 20%);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: derive(#000000, 40%);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-fills: #000000;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: derive(#000000, 20%);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     -fx-background-color: derive(#000000, 20%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".command-pane {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     -fx-background-color: derive(#000000, 10%);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     -fx-background-color: derive(#000000, 20%);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     -fx-border-color: derive(#000000, 20%);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: derive(#000000, 20%);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: derive(#000000, 30%);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".view-display-pane {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".view-display-module {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-font-size: 15pt;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".view-display-module .label {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".view-display-module .text {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-text-alignment: center;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".view-display-tg {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: #8e8e8e;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-font-size: 15pt;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".view-display-tg .label {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".view-display-tg .text {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-text-alignment: center;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".view-display-student {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: ffffff;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-font-size: 15pt;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".view-display-student .label {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ".view-display-student .text {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-text-alignment: center;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: #000000;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: #000000;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: derive(#000000, 25%);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: derive(#000000, 20%);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-color: derive(#000000, 50%);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-border-color: derive(#000000, 30%);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "#listPanel {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    -fx-background-fills: #000000"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 82,
      "-": 332
    }
  },
  {
    "path": "src/main/resources/view/TutorialGroupListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                \u003cLabel fx:id\u003d\"groupId\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            \u003cLabel fx:id\u003d\"totalStudents\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$totalStudents\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            \u003cLabel fx:id\u003d\"dayOfWeek\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$Day of The Week\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            \u003cLabel fx:id\u003d\"startTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$startTime\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            \u003cLabel fx:id\u003d\"endTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$endTime\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 2,
      "euzintan": 1,
      "juandavinlie": 32
    }
  },
  {
    "path": "src/main/resources/view/TutorialGroupListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    \u003cListView fx:id\u003d\"tutorialGroupListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 8
    }
  },
  {
    "path": "src/main/resources/view/ViewDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"view-display-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "   \u003cTextArea fx:id\u003d\"viewDisplay\" prefHeight\u003d\"109.0\" prefWidth\u003d\"407.0\" styleClass\u003d\"view-display-module\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 8
    }
  },
  {
    "path": "src/test/data/JsonModuleListStorageTest/invalidAndValidModuleModuleList.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Valid Person\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    \"email\": \"hans@example.com\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person With Invalid Phone Field\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"948asdf2424\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    \"email\": \"hans@example.com\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 2,
      "-": 9
    }
  },
  {
    "path": "src/test/data/JsonModuleListStorageTest/invalidModuleModuleList.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    \"email\": \"hans@example.com\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 1,
      "-": 6
    }
  },
  {
    "path": "src/test/data/JsonModuleStorageTest/invalidAndValidModuleModuleList.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    \"name\": \"Valid Person\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    \"email\": \"hans@example.com\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    \"name\": \"Person With Invalid Phone Field\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    \"phone\": \"948asdf2424\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    \"email\": \"hans@example.com\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 11
    }
  },
  {
    "path": "src/test/data/JsonModuleStorageTest/invalidModuleModuleList.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    \"email\": \"hans@example.com\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 7
    }
  },
  {
    "path": "src/test/data/JsonModuleStorageTest/notJsonFormatModuleList.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "not json format!"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 1
    }
  },
  {
    "path": "src/test/data/JsonSerializableModuleListTest/duplicateModuleModuleList.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"alice@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\": [ \"friends\" ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    \"email\": \"pauline@example.com\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 1,
      "-": 11
    }
  },
  {
    "path": "src/test/data/JsonSerializableModuleListTest/invalidModuleModuleList.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Hans Muster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    \"email\": \"invalid@email!3e\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 1,
      "-": 6
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "  \"addressBookFilePath\" : \"addressbook.json\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "  \"moduleListFilePath\" : \"data\\\\modulelist.json\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 1,
      "-": 142
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MODULE_DESC_ALEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.AddModuleCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.ListModuleCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.ReadOnlyTrackr;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonModuleListStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonModuleListStorage moduleStorage \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonModuleListStorage(temporaryFolder.resolve(\"modulelist.json\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        StorageManager storage \u003d new StorageManager(moduleStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String deleteCommand \u003d \"deleteMod 9\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String listCommand \u003d ListModuleCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertCommandSuccess(listCommand, ListModuleCommand.MESSAGE_VIEWING_MODULES_SUCCESS, model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonModuleListStorage moduleStorage \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonModuleListIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionModuleList.json\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        StorageManager storage \u003d new StorageManager(moduleStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // Execute add module command"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String addModuleCommand \u003d AddModuleCommand.COMMAND_WORD + MODULE_DESC_ALEX;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Module expectedModule \u003d new ModuleBuilder(CS2103T).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        expectedModel.addModule(expectedModule);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertCommandFailure(addModuleCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void getFilteredModuleList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                -\u003e logic.getFilteredModuleList().remove(0)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                                      Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getModuleList(), new UserPrefs());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                                      String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonModuleListIoExceptionThrowingStub extends JsonModuleListStorage {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonModuleListIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        public void saveModuleList(ReadOnlyTrackr\u003cModule\u003e moduleList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 28,
      "-": 132
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalTrackr;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        model \u003d new ModelManager(getTypicalTrackr(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //    public void execute_newModule_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //        Module validModule \u003d new ModuleBuilder().withModuleId(\"MA1521\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //        Model expectedModel \u003d new ModelManager(model.getModuleList(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //        expectedModel.addModule(validModule);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //        assertCommandSuccess(new AddModuleCommand(validModule), model,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //                String.format(AddModuleCommand.MESSAGE_SUCCESS, validModule), expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //    public void execute_duplicateModule_throwsCommandException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //        Module moduleInList \u003d model.getModuleList().getList().get(0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //        assertCommandFailure(new AddModuleCommand(moduleInList), model,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //                AddModuleCommand.MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //    // todo: tutorial group"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //    public void execute_newStudent_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //        Student validStudent \u003d new StudentBuilder().withStudentId(\"A2037483T\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //        Model expectedModel \u003d new ModelManager(model.getModuleList(), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //        expectedModel.addStudent(validStudent);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //        assertCommandSuccess(new AddStudentCommand(validStudent), model,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //                String.format(AddStudentCommand.MESSAGE_SUCCESS, validStudent), expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //    public void execute_duplicateStudent_throwsCommandException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //        Student studentInList \u003d model.getFilteredStudentList().get(0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //        assertCommandFailure(new AddStudentCommand(studentInList), model,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //                AddStudentCommand.MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 39,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddModuleCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.ReadOnlyTrackr;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.Trackr;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroup;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "public class AddModuleCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void constructor_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddModuleCommand(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void execute_moduleAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        ModelStubAcceptingModuleAdded modelStub \u003d new ModelStubAcceptingModuleAdded();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        Module validModule \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        CommandResult commandResult \u003d new AddModuleCommand(validModule).execute(modelStub);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertEquals(String.format(AddModuleCommand.MESSAGE_SUCCESS, validModule), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertEquals(Arrays.asList(validModule), modelStub.modulesAdded);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void execute_duplicateModule_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        Module validModule \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        AddModuleCommand addModuleCommand \u003d new AddModuleCommand(validModule);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithModule(validModule);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertThrows(CommandException.class, AddModuleCommand.MESSAGE_DUPLICATE_MODULE, ()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                -\u003e addModuleCommand.execute(modelStub)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        Module cs2103t \u003d new ModuleBuilder().withModuleId(\"CS2103T\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        Module cs3243 \u003d new ModuleBuilder().withModuleId(\"CS3243\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        AddModuleCommand addCs2103tCommand \u003d new AddModuleCommand(cs2103t);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        AddModuleCommand addCs3243Command \u003d new AddModuleCommand(cs3243);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertTrue(addCs2103tCommand.equals(addCs2103tCommand));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        AddModuleCommand addCs2103tCommandCopy \u003d new AddModuleCommand(cs2103t);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertTrue(addCs2103tCommand.equals(addCs2103tCommandCopy));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertFalse(addCs2103tCommand.equals(1));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertFalse(addCs2103tCommand.equals(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertFalse(addCs2103tCommand.equals(addCs3243Command));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static class ModelStub implements Model {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public Path getTrackrFilePath() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public void setTrackrFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public boolean isInModuleView() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public Module getCurrentModuleInView() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public void setViewToTutorialGroup(Module target) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public void setCurrentViewToTutorialGroup() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public void addTutorialGroup(TutorialGroup tutorialGroup) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public void deleteTutorialGroup(TutorialGroup tutorialGroup) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public boolean hasTutorialGroup(TutorialGroup tutorialGroup) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public void setTutorialGroup(TutorialGroup target, TutorialGroup edited) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public boolean isInTutorialGroupView() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public void setViewToStudent(TutorialGroup target) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public void setCurrentViewToStudent() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public TutorialGroup getCurrentTgInView() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public void deleteStudent(Student target) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public void addStudent(Student student) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public boolean isInStudentView() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public void setModuleList(ReadOnlyTrackr\u003cModule\u003e newData) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public ReadOnlyTrackr\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public void setViewToModule() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public void setCurrentViewToModule() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public void deleteModule(Module module) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public ObservableList\u003cTutorialGroup\u003e getFilteredTutorialGroupList() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public void updateFilteredTutorialGroupList(Predicate\u003cTutorialGroup\u003e predicate) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private class ModelStubWithModule extends ModelStub {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        private final Module module;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        ModelStubWithModule(Module module) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            this.module \u003d module;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return this.module.isSame(module);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private class ModelStubAcceptingModuleAdded extends ModelStub {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        final ArrayList\u003cModule\u003e modulesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        final ArrayList\u003cTutorialGroup\u003e tutorialGroupsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public boolean hasTutorialGroup(TutorialGroup tutorialGroup) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            requireNonNull(tutorialGroup);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return tutorialGroupsAdded.stream().anyMatch(tutorialGroup::isSame);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public void addTutorialGroup(TutorialGroup tutorialGroup) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            requireNonNull(tutorialGroup);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            tutorialGroupsAdded.add(tutorialGroup);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return modulesAdded.stream().anyMatch(module::isSame);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            modulesAdded.add(module);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public ReadOnlyTrackr\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return new Trackr();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 4,
      "fanminj": 36,
      "juandavinlie": 286,
      "-": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddStudentTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.AddModuleCommandTest.ModelStub;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.ReadOnlyTrackr;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.Trackr;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class AddStudentTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void constructor_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddStudentCommand(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void execute_studentAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        ModelStubAcceptingStudentAdded modelStub \u003d new ModelStubAcceptingStudentAdded();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Student validStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        CommandResult commandResult \u003d new AddStudentCommand(validStudent).execute(modelStub);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertEquals(String.format(AddStudentCommand.MESSAGE_SUCCESS, validStudent),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertEquals(Arrays.asList(validStudent), modelStub.studentsAdded);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void execute_duplicateStudent_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Student validStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        AddStudentCommand addStudentCommand \u003d new AddStudentCommand(validStudent);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithStudent(validStudent);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertThrows(CommandException.class, AddStudentCommand.MESSAGE_DUPLICATE_STUDENT, ()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                -\u003e addStudentCommand.execute(modelStub)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Student alex \u003d new StudentBuilder().withName(\"Alex\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Student beng \u003d new StudentBuilder().withName(\"Beng\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        AddStudentCommand addAlexCommand \u003d new AddStudentCommand(alex);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        AddStudentCommand addBengCommand \u003d new AddStudentCommand(beng);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertTrue(addAlexCommand.equals(addAlexCommand));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        AddStudentCommand addAlexCommandCopy \u003d new AddStudentCommand(alex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertTrue(addAlexCommand.equals(addAlexCommandCopy));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertFalse(addAlexCommand.equals(1));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertFalse(addAlexCommand.equals(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertFalse(addAlexCommand.equals(addBengCommand));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * A Model stub that contains a single student."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private class ModelStubWithStudent extends ModelStub {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        private final Student student;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        ModelStubWithStudent(Student student) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            this.student \u003d student;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        public boolean isInStudentView() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return this.student.isSame(student);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * A Model stub that always accept the student being added."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private class ModelStubAcceptingStudentAdded extends ModelStub {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        final ArrayList\u003cStudent\u003e studentsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        public boolean isInStudentView() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return studentsAdded.stream().anyMatch(student::isSame);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        public void addStudent(Student student) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            studentsAdded.add(student);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        public ReadOnlyTrackr\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return new Trackr();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 126,
      "-": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddTutorialGroupCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "euzintan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.logic.commands.AddTutorialGroupCommand.MESSAGE_DUPLICATE_TUTORIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.ReadOnlyTrackr;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.Trackr;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroup;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.testutil.TutorialGroupBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "euzintan"
        },
        "content": "public class AddTutorialGroupCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public void constructor_nullTutorialGroup_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddTutorialGroupCommand(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public void execute_tutorialGroupAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        ModelStubAcceptingTutorialGroupAdded modelStub \u003d new ModelStubAcceptingTutorialGroupAdded();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        TutorialGroup validTutorialGroup \u003d new TutorialGroupBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        CommandResult commandResult \u003d new AddTutorialGroupCommand(validTutorialGroup).execute(modelStub);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        assertEquals(String.format(AddTutorialGroupCommand.MESSAGE_SUCCESS, validTutorialGroup),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        assertEquals(Arrays.asList(validTutorialGroup), modelStub.tutorialGroupsAdded);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public void execute_duplicateTutorialGroup_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        TutorialGroup validTutorialGroup \u003d new TutorialGroupBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        AddTutorialGroupCommand addTutorialGroupCommand \u003d new AddTutorialGroupCommand(validTutorialGroup);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithTutorialGroup(validTutorialGroup);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_DUPLICATE_TUTORIAL, ()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            -\u003e addTutorialGroupCommand.execute(modelStub)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        TutorialGroup b014 \u003d new TutorialGroupBuilder().withTutorialGroupId(\"B014\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        TutorialGroup t003 \u003d new TutorialGroupBuilder().withTutorialGroupId(\"T003\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        AddTutorialGroupCommand addb014Command \u003d new AddTutorialGroupCommand(b014);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        AddTutorialGroupCommand addt003Command \u003d new AddTutorialGroupCommand(t003);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        assertTrue(addb014Command.equals(addb014Command));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        AddTutorialGroupCommand addb014CommandCopy \u003d new AddTutorialGroupCommand(b014);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        assertTrue(addb014Command.equals(addb014CommandCopy));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        assertFalse(addb014Command.equals(1));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        assertFalse(addb014Command.equals(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        assertFalse(addb014Command.equals(addt003Command));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public static class ModelStub implements Model {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public Path getTrackrFilePath() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void setTrackrFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public boolean isInModuleView() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public Module getCurrentModuleInView() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void setViewToTutorialGroup(Module target) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void setCurrentViewToTutorialGroup() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void addTutorialGroup(TutorialGroup tutorialGroup) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void deleteTutorialGroup(TutorialGroup tutorialGroup) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public boolean hasTutorialGroup(TutorialGroup tutorialGroup) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void setTutorialGroup(TutorialGroup target, TutorialGroup edited) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public boolean isInTutorialGroupView() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void setViewToStudent(TutorialGroup target) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void setCurrentViewToStudent() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public TutorialGroup getCurrentTgInView() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void deleteStudent(Student target) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void addStudent(Student student) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public boolean isInStudentView() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void setModuleList(ReadOnlyTrackr\u003cModule\u003e newData) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public ReadOnlyTrackr\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void setViewToModule() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void setCurrentViewToModule() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void deleteModule(Module module) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public ObservableList\u003cTutorialGroup\u003e getFilteredTutorialGroupList() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void updateFilteredTutorialGroupList(Predicate\u003cTutorialGroup\u003e predicate) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    private class ModelStubWithTutorialGroup extends ModelStub {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        private ObservableList\u003cTutorialGroup\u003e tutorialGroupsList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        private final TutorialGroup tutorialGroup;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        ModelStubWithTutorialGroup(TutorialGroup tutorialGroup) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            requireNonNull(tutorialGroup);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            this.tutorialGroup \u003d tutorialGroup;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            tutorialGroupsList.add(tutorialGroup);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            tutorialGroupsList \u003d new FilteredList\u003c\u003e(tutorialGroupsList);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public boolean hasTutorialGroup(TutorialGroup tutorialGroup) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            requireNonNull(tutorialGroup);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            return this.tutorialGroup.isSame(tutorialGroup);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public ObservableList\u003cTutorialGroup\u003e getFilteredTutorialGroupList() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            return tutorialGroupsList;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     * A Model stub that always accept the Module being added."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    private class ModelStubAcceptingTutorialGroupAdded extends ModelStub {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        final ArrayList\u003cModule\u003e modulesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        final ArrayList\u003cTutorialGroup\u003e tutorialGroupsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        final ObservableList\u003cTutorialGroup\u003e tutorialGroupsList \u003d"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            new FilteredList\u003cTutorialGroup\u003e(FXCollections.observableArrayList());"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public boolean hasTutorialGroup(TutorialGroup tutorialGroup) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            requireNonNull(tutorialGroup);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            return tutorialGroupsAdded.stream().anyMatch(tutorialGroup::isSame);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void addTutorialGroup(TutorialGroup tutorialGroup) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            requireNonNull(tutorialGroup);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            tutorialGroupsAdded.add(tutorialGroup);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public ObservableList\u003cTutorialGroup\u003e getFilteredTutorialGroupList() {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            return tutorialGroupsList;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            return modulesAdded.stream().anyMatch(module::isSame);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            modulesAdded.add(module);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public ReadOnlyTrackr\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            return new Trackr();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "euzintan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "euzintan": 340,
      "juandavinlie": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AttendanceBelowCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.testutil.TypicalModulesPopulatedWithTutorialGroups.getTypicalTrackr;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ALEX;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BENG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.CHARLIE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.DAVID;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ELIZABETH;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.FIONA;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.testutil.TypicalTutorialGroups.T05;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.student.AttendanceBelowSpecifiedScorePredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class AttendanceBelowCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTrackr(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalTrackr(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        int firstUpperBound \u003d 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        int secondUpperBound \u003d 14;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        AttendanceBelowSpecifiedScorePredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                new AttendanceBelowSpecifiedScorePredicate(firstUpperBound);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        AttendanceBelowSpecifiedScorePredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                new AttendanceBelowSpecifiedScorePredicate(secondUpperBound);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        AttendanceBelowCommand firstAttendanceBelow \u003d new AttendanceBelowCommand(firstPredicate, firstUpperBound);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        AttendanceBelowCommand secondAttendanceBelow \u003d new AttendanceBelowCommand(secondPredicate, secondUpperBound);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertTrue(firstAttendanceBelow.equals(firstAttendanceBelow));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        AttendanceBelowCommand firstAttendanceBelowCommandCopy \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                new AttendanceBelowCommand(firstPredicate, firstUpperBound);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertTrue(firstAttendanceBelow.equals(firstAttendanceBelowCommandCopy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertFalse(firstAttendanceBelow.equals(1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertFalse(firstAttendanceBelow.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // different command -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertFalse(firstAttendanceBelow.equals(secondAttendanceBelow));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void execute_zeroUpperBound_noModuleFound() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        model.setViewToTutorialGroup(CS2103T);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        model.setViewToStudent(T05);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        expectedModel.setViewToTutorialGroup(CS2103T);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        expectedModel.setViewToStudent(T05);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        String expectedMessage \u003d String.format(AttendanceBelowCommand.MESSAGE_ATTENDANCE_BELOW_SUCCESS, 0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        AttendanceBelowSpecifiedScorePredicate predicate \u003d preparePredicate(0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        AttendanceBelowCommand command \u003d new AttendanceBelowCommand(predicate, 0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        expectedModel.updateFilteredStudentList(predicate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredStudentList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void execute_validUpperBound_multipleModulesFound() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        model.setViewToTutorialGroup(CS2103T);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        model.setViewToStudent(T05);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        expectedModel.setViewToTutorialGroup(CS2103T);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        expectedModel.setViewToStudent(T05);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        String expectedMessage \u003d String.format(AttendanceBelowCommand.MESSAGE_ATTENDANCE_BELOW_SUCCESS, 4);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        AttendanceBelowSpecifiedScorePredicate predicate \u003d preparePredicate(4);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        AttendanceBelowCommand command \u003d new AttendanceBelowCommand(predicate, 4);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        expectedModel.updateFilteredStudentList(predicate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertEquals(Arrays.asList(CHARLIE, ELIZABETH), model.getFilteredStudentList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void execute_topUpperBound_multipleModulesFound() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        model.setViewToTutorialGroup(CS2103T);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        model.setViewToStudent(T05);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        expectedModel.setViewToTutorialGroup(CS2103T);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        expectedModel.setViewToStudent(T05);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        String expectedMessage \u003d String.format(AttendanceBelowCommand.MESSAGE_ATTENDANCE_BELOW_SUCCESS, 14);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        AttendanceBelowSpecifiedScorePredicate predicate \u003d preparePredicate(14);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        AttendanceBelowCommand command \u003d new AttendanceBelowCommand(predicate, 14);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        expectedModel.updateFilteredStudentList(predicate);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertEquals(Arrays.asList(ALEX, BENG, CHARLIE, DAVID, ELIZABETH, FIONA), model.getFilteredStudentList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private AttendanceBelowSpecifiedScorePredicate preparePredicate(int upperBound) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return new AttendanceBelowSpecifiedScorePredicate(upperBound);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false, false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, false, false, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, false, false, false)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertNotEquals(commandResult.hashCode(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                new CommandResult(\"feedback\", true, false, false, false, false)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                        .hashCode()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertNotEquals(commandResult.hashCode(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                new CommandResult(\"feedback\", false, true, false, false, false)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                        .hashCode()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 8,
      "juandavinlie": 3,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_ID;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_GRP;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_GRP_DAY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_GRP_END_TIME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_GRP_START_TIME;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.Trackr;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.module.ModuleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String VALID_NAME_ALEX \u003d \"Alex Tan\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String VALID_NAME_BENG \u003d \"Ah Beng\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String VALID_PHONE_ALEX \u003d \"91234567\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String VALID_PHONE_BENG \u003d \"81234567\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String VALID_EMAIL_ALEX \u003d \"alextan@u.nus.edu\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String VALID_EMAIL_BENG \u003d \"abeng@u.nus.edu\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String VALID_STUDENT_ID_AMY \u003d \"A1234567X\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String VALID_STUDENT_ID_ALEX \u003d \"A1234567X\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String VALID_STUDENT_ID_BOB \u003d \"A7654321X\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String VALID_STUDENT_ID_BENG \u003d \"A7654321B\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public static final String VALID_TUTORIAL_GROUP_B014 \u003d \"B014\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public static final String VALID_TUTORIAL_GROUP_DAY_MON \u003d \"MON\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public static final String VALID_TUTORIAL_GROUP_1300 \u003d \"13:00\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public static final String VALID_TUTORIAL_GROUP_1500 \u003d \"15:00\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public static final String INVALID_TUTORIAL_GROUP_1500 \u003d \"1500\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static final String VALID_MODULE_CS2103T \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static final String VALID_MODULE_CS2040 \u003d \"CS2040\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static final String MODULE_ID_DESC_CS2103T \u003d \" \" + PREFIX_MODULE + VALID_MODULE_CS2103T;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static final String MODULE_ID_DESC_CS2040 \u003d \" \" + PREFIX_MODULE + VALID_MODULE_CS2040;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static final String INVALID_MODULE_ID \u003d \" \" + PREFIX_MODULE + \"CS@\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public static final String TUTORIAL_GROUP_ID_B014 \u003d \" \" + PREFIX_TUTORIAL_GRP + VALID_TUTORIAL_GROUP_B014"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        + \" \" + PREFIX_TUTORIAL_GRP_DAY + VALID_TUTORIAL_GROUP_DAY_MON"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        + \" \" + PREFIX_TUTORIAL_GRP_START_TIME + VALID_TUTORIAL_GROUP_1300"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        + \" \" + PREFIX_TUTORIAL_GRP_END_TIME + VALID_TUTORIAL_GROUP_1500;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String NAME_DESC_ALEX \u003d \" \" + PREFIX_NAME + VALID_NAME_ALEX;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String NAME_DESC_BENG \u003d \" \" + PREFIX_NAME + VALID_NAME_BENG;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String PHONE_DESC_ALEX \u003d \" \" + PREFIX_PHONE + VALID_PHONE_ALEX;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String PHONE_DESC_BENG \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BENG;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String EMAIL_DESC_ALEX \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_ALEX;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String EMAIL_DESC_BENG \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BENG;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String STUDENT_ID_DESC_ALEX \u003d \" \" + PREFIX_STUDENT_ID + VALID_STUDENT_ID_ALEX;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String STUDENT_ID_DESC_BENG \u003d \" \" + PREFIX_STUDENT_ID + VALID_STUDENT_ID_BENG;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String MODULE_DESC_ALEX \u003d \" \" + PREFIX_MODULE + VALID_MODULE_CS2103T;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String INVALID_STUDENT_ID_DESC \u003d \" \" + PREFIX_STUDENT_ID + \"a1234567x\"; // capital letters only"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final EditStudentCommand.EditStudentDescriptor DESC_ALEX;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final EditStudentCommand.EditStudentDescriptor DESC_BENG;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        DESC_ALEX \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_ALEX)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                .withPhone(VALID_PHONE_ALEX).withEmail(VALID_EMAIL_ALEX)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        DESC_BENG \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_BENG)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                .withPhone(VALID_PHONE_BENG).withEmail(VALID_EMAIL_BENG)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Convenience wrapper to {@link"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * - the trackr, filtered module list and selected module in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Trackr expectedTrackr \u003d new Trackr(actualModel.getModuleList());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        List\u003cModule\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredModuleList());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertEquals(expectedTrackr, actualModel.getModuleList());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredModuleList());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the module at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * {@code model}\u0027s module list."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static void showModuleAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredModuleList().size());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Module module \u003d model.getFilteredModuleList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        final String[] splitName \u003d module.getModuleId().toString().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        model.updateFilteredModuleList(new ModuleContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertEquals(1, model.getFilteredModuleList().size());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 2,
      "euzintan": 15,
      "fanminj": 48,
      "juandavinlie": 7,
      "-": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteModuleCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showModuleAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class DeleteModuleCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalModuleList(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        Module moduleToDelete \u003d model.getFilteredModuleList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        DeleteModuleCommand deleteModuleCommand \u003d new DeleteModuleCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteModuleCommand.MESSAGE_DELETE_MODULE_SUCCESS, moduleToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getModuleList(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        expectedModel.deleteModule(moduleToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertCommandSuccess(deleteModuleCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredModuleList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        DeleteModuleCommand deleteModuleCommand \u003d new DeleteModuleCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertCommandFailure(deleteModuleCommand, model, Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        showModuleAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        Module moduleToDelete \u003d model.getFilteredModuleList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        DeleteModuleCommand deleteCommand \u003d new DeleteModuleCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteModuleCommand.MESSAGE_DELETE_MODULE_SUCCESS, moduleToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getModuleList(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        expectedModel.deleteModule(moduleToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        showNoModule(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        showModuleAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getModuleList().getList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        DeleteModuleCommand deleteModuleCommand \u003d new DeleteModuleCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertCommandFailure(deleteModuleCommand, model, Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        DeleteModuleCommand deleteFirstCommand \u003d new DeleteModuleCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        DeleteModuleCommand deleteSecondCommand \u003d new DeleteModuleCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        DeleteModuleCommand deleteFirstCommandCopy \u003d new DeleteModuleCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private void showNoModule(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        model.updateFilteredModuleList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertTrue(model.getFilteredModuleList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteTutorialGroupCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "euzintan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.ReadOnlyTrackr;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.Trackr;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroup;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.testutil.TypicalModules;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.testutil.TypicalModulesPopulatedWithTutorialGroups;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "euzintan"
        },
        "content": "public class DeleteTutorialGroupCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalModulesPopulatedWithTutorialGroups.getTypicalModuleList(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        Module moduleToDeleteFrom \u003d model.getFilteredModuleList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        model.setViewToTutorialGroup(moduleToDeleteFrom);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        TutorialGroup tutorialGroupToDelete \u003d moduleToDeleteFrom.getTutorialGroups()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            .get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        DeleteTutorialGroupCommand deleteTutorialGroupCommand \u003d new DeleteTutorialGroupCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteTutorialGroupCommand.MESSAGE_DELETE_TUTORIAL_SUCCESS,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            tutorialGroupToDelete);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getModuleList(), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        expectedModel.setViewToTutorialGroup(moduleToDeleteFrom);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        CommandResult deleteTutorialGroupCommandResult \u003d deleteTutorialGroupCommand.execute(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        assertEquals(expectedMessage, deleteTutorialGroupCommandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    private void showNoTutorialGroup(Model model) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        model.updateFilteredTutorialGroupList(p -\u003e false);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        assertTrue(model.getFilteredTutorialGroupList().isEmpty());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public static class ModelStub implements Model {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        private final Trackr moduleList;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        private FilteredList\u003cModule\u003e filteredModules;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        private FilteredList\u003cTutorialGroup\u003e filteredTutorialGroup;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        private FilteredList\u003cStudent\u003e filteredStudents;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        private Module currentModuleInView;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        private TutorialGroup currentTgInView;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        private boolean isInModuleView;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        private boolean isInTutorialGroupView;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        private boolean isInStudentView;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public ModelStub(Trackr moduleList, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            super();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            requireAllNonNull(moduleList, userPrefs);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            logger.fine(\"Initializing with module data: \" + moduleList + \" and user prefs: \" + userPrefs);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            this.moduleList \u003d new Trackr(moduleList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            this.filteredModules \u003d new FilteredList\u003c\u003e(this.moduleList.getList());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            this.filteredTutorialGroup \u003d new FilteredList\u003c\u003e(FXCollections.observableArrayList());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            this.filteredStudents \u003d new FilteredList\u003c\u003e(FXCollections.observableArrayList());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            this.isInModuleView \u003d true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            this.isInTutorialGroupView \u003d false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            this.isInStudentView \u003d false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public Path getTrackrFilePath() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void setTrackrFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public boolean isInModuleView() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public Module getCurrentModuleInView() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void setViewToTutorialGroup(Module target) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void setCurrentViewToTutorialGroup() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void addTutorialGroup(TutorialGroup tutorialGroup) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void deleteTutorialGroup(TutorialGroup tutorialGroup) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public boolean hasTutorialGroup(TutorialGroup tutorialGroup) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void setTutorialGroup(TutorialGroup target, TutorialGroup edited) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public boolean isInTutorialGroupView() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void setViewToStudent(TutorialGroup target) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void setCurrentViewToStudent() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public TutorialGroup getCurrentTgInView() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void deleteStudent(Student target) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void addStudent(Student student) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public boolean isInStudentView() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void setModuleList(ReadOnlyTrackr\u003cModule\u003e newData) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public ReadOnlyTrackr\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void setViewToModule() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void setCurrentViewToModule() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void deleteModule(Module module) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public ObservableList\u003cTutorialGroup\u003e getFilteredTutorialGroupList() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void updateFilteredTutorialGroupList(Predicate\u003cTutorialGroup\u003e predicate) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    private class ModelStubWithTutorialGroup extends ModelStub {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        private final TutorialGroup tutorialGroup;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        private ObservableList\u003cTutorialGroup\u003e tutorialGroupsList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        ModelStubWithTutorialGroup(TutorialGroup tutorialGroup) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            super(TypicalModules.getTypicalModuleList(), new UserPrefs());"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            requireNonNull(tutorialGroup);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            this.tutorialGroup \u003d tutorialGroup;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            tutorialGroupsList.add(tutorialGroup);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            tutorialGroupsList \u003d new FilteredList\u003c\u003e(tutorialGroupsList);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public boolean hasTutorialGroup(TutorialGroup tutorialGroup) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            requireNonNull(tutorialGroup);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            return this.tutorialGroup.isSame(tutorialGroup);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public ObservableList\u003cTutorialGroup\u003e getFilteredTutorialGroupList() {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            return tutorialGroupsList;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "euzintan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "euzintan": 311,
      "juandavinlie": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditModuleCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showModuleAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.EditModuleCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.Trackr;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.module.ModuleId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class EditModuleCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalModuleList(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            Module editedModule \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            EditModuleCommand editCommand \u003d new EditModuleCommand(INDEX_FIRST_PERSON, \"CS21\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            String expectedMessage \u003d String.format(EditModuleCommand.MESSAGE_EDIT_MODULE_SUCCESS, editedModule);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            Model expectedModel \u003d new ModelManager(new Trackr(model.getModuleList()), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            expectedModel.setModule(model.getFilteredModuleList().get(0), \"CS21\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        EditModuleDescriptor editModuleDescriptor \u003d new EditModuleDescriptor();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        EditModuleCommand editCommand \u003d new EditModuleCommand(INDEX_FIRST_PERSON, editModuleDescriptor);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        Module editedModule \u003d model.getFilteredModuleList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        String expectedMessage \u003d String.format(EditModuleCommand.MESSAGE_EDIT_MODULE_SUCCESS, editedModule);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Trackr(model.getModuleList()), new UserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        showModuleAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        EditModuleDescriptor editModuleDescriptor \u003d new EditModuleDescriptor();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        editModuleDescriptor.setModuleId(new ModuleId(\"CS22\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        Module moduleInFilteredList \u003d model.getFilteredModuleList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        Module editedModule \u003d new ModuleBuilder(moduleInFilteredList).withModuleId(\"CS22\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        EditModuleCommand editCommand \u003d new EditModuleCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                editModuleDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        String expectedMessage \u003d String.format(EditModuleCommand.MESSAGE_EDIT_MODULE_SUCCESS, editedModule);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Trackr(model.getModuleList()), new UserPrefs());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        Module target \u003d model.getFilteredModuleList().get(0);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        expectedModel.setModule(target, new Module(new ModuleId(\"CS22\"), target.getUniqueTutorialGroupList()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void execute_duplicateModuleUnfilteredList_failure() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        Module firstModule \u003d model.getFilteredModuleList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        EditModuleDescriptor editModuleDescriptor \u003d new EditModuleDescriptor();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        editModuleDescriptor.setModuleId(firstModule.getModuleId());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        EditModuleCommand editCommand \u003d new EditModuleCommand(INDEX_SECOND_PERSON, editModuleDescriptor);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertCommandFailure(editCommand, model, EditModuleCommand.MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void execute_duplicateModuleFilteredList_failure() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        showModuleAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // edit module in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        Module moduleInList \u003d model.getModuleList().getList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        EditModuleDescriptor editModuleDescriptor \u003d new EditModuleDescriptor();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        editModuleDescriptor.setModuleId(moduleInList.getModuleId());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        EditModuleCommand editCommand \u003d new EditModuleCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                editModuleDescriptor);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertCommandFailure(editCommand, model, EditModuleCommand.MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void execute_invalidModuleIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredModuleList().size() + 1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        EditModuleDescriptor editModuleDescriptor \u003d new EditModuleDescriptor();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        editModuleDescriptor.setModuleId(new ModuleId(\"CS22\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        EditModuleCommand editCommand \u003d new EditModuleCommand(outOfBoundIndex, editModuleDescriptor);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void execute_invalidModuleIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        showModuleAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getModuleList().getList().size());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        EditModuleDescriptor editModuleDescriptor \u003d new EditModuleDescriptor();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        editModuleDescriptor.setModuleId(new ModuleId(\"CS22\"));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        EditModuleCommand editCommand \u003d new EditModuleCommand(outOfBoundIndex, editModuleDescriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        EditModuleDescriptor editModuleDescriptor \u003d new EditModuleDescriptor();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        editModuleDescriptor.setModuleId(new ModuleId(\"CS22\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        final EditModuleCommand standardCommand \u003d new EditModuleCommand(INDEX_FIRST_PERSON, editModuleDescriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        EditModuleCommand commandWithSameValues \u003d new EditModuleCommand(INDEX_FIRST_PERSON, editModuleDescriptor);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertFalse(standardCommand.equals(new EditModuleCommand(INDEX_SECOND_PERSON, editModuleDescriptor)));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // different descriptor, same values -\u003e returns true"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertTrue(standardCommand.equals(new EditModuleCommand(INDEX_FIRST_PERSON, editModuleDescriptor)));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "euzintan": 14,
      "fanminj": 5,
      "juandavinlie": 138
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditTutorialGroupCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "euzintan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.logic.commands.EditTutorialGroupCommand.EditTutorialGroupDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.ReadOnlyTrackr;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroup;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.testutil.TutorialGroupBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "euzintan"
        },
        "content": "public class EditTutorialGroupCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        ModelStubWithOneTutorialGroup modelStub \u003d new ModelStubWithOneTutorialGroup();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        TutorialGroup editedTutorialGroup \u003d new TutorialGroupBuilder().withTutorialGroupId(\"B014\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        EditTutorialGroupDescriptor editTutorialGroupDescriptor \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            new EditTutorialGroupDescriptor(editedTutorialGroup);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        CommandResult commandResult \u003d new EditTutorialGroupCommand(INDEX_FIRST_PERSON, editTutorialGroupDescriptor)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            .execute(modelStub);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        assertEquals(String.format(EditTutorialGroupCommand.MESSAGE_EDIT_TUTORIAL_SUCCESS, editedTutorialGroup.getId()),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        assertEquals(editedTutorialGroup, modelStub.tutorialGroup);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public void execute_duplicateTutorialUnfilteredList_failure() throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        ModelStubWithTwoTutorialGroup modelStub \u003d new ModelStubWithTwoTutorialGroup();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        TutorialGroup editedTutorialGroup \u003d new TutorialGroupBuilder().withTutorialGroupId(\"T003\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        EditTutorialGroupDescriptor editTutorialGroupDescriptor \u003d new EditTutorialGroupDescriptor(editedTutorialGroup);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        EditTutorialGroupCommand editCommand \u003d new EditTutorialGroupCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            editTutorialGroupDescriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        assertThrows(CommandException.class, EditTutorialGroupCommand.MESSAGE_DUPLICATE_TUTORIAL, ()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            -\u003e editCommand.execute(modelStub));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    private class ModelStubWithOneTutorialGroup extends ModelStub {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        private ObservableList\u003cModule\u003e filteredModuleList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        private ObservableList\u003cTutorialGroup\u003e filteredTutorialGroupList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        private TutorialGroup defaultTutorialGroup \u003d new TutorialGroupBuilder().build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        private TutorialGroup tutorialGroup \u003d defaultTutorialGroup;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public ModelStubWithOneTutorialGroup() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            Module module \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            module.addTutorialGroup(defaultTutorialGroup);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            filteredModuleList.add(module);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            filteredModuleList \u003d new FilteredList\u003c\u003e(filteredModuleList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            filteredTutorialGroupList.add(defaultTutorialGroup);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            filteredTutorialGroupList \u003d new FilteredList\u003c\u003e(filteredTutorialGroupList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void setTutorialGroup(TutorialGroup target, TutorialGroup edited) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            this.tutorialGroup \u003d edited;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            return filteredModuleList;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public ObservableList\u003cTutorialGroup\u003e getFilteredTutorialGroupList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            return filteredTutorialGroupList;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    private class ModelStubWithTwoTutorialGroup extends ModelStub {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        private ObservableList\u003cModule\u003e filteredModuleList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        private ObservableList\u003cTutorialGroup\u003e filteredTutorialGroupList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        private TutorialGroup defaultTutorialGroup1 \u003d new TutorialGroupBuilder().build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        private TutorialGroup defaultTutorialGroup2 \u003d new TutorialGroupBuilder().withTutorialGroupId(\"T003\").build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public ModelStubWithTwoTutorialGroup() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            Module module \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            module.addTutorialGroup(defaultTutorialGroup1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            module.addTutorialGroup(defaultTutorialGroup2);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            filteredModuleList.add(module);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            filteredModuleList \u003d new FilteredList\u003c\u003e(filteredModuleList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            filteredTutorialGroupList.add(defaultTutorialGroup1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            filteredTutorialGroupList.add(defaultTutorialGroup2);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            filteredTutorialGroupList \u003d new FilteredList\u003c\u003e(filteredTutorialGroupList);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void setTutorialGroup(TutorialGroup target, TutorialGroup edited) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            filteredTutorialGroupList.remove(target);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            filteredTutorialGroupList.add(edited);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            return filteredModuleList;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public ObservableList\u003cTutorialGroup\u003e getFilteredTutorialGroupList() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            return filteredTutorialGroupList;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public boolean hasTutorialGroup(TutorialGroup tutorialGroup) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            return filteredTutorialGroupList.contains(tutorialGroup);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public static class ModelStub implements Model {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public Path getTrackrFilePath() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void setTrackrFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public boolean isInModuleView() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public Module getCurrentModuleInView() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void setViewToTutorialGroup(Module target) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void setCurrentViewToTutorialGroup() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void addTutorialGroup(TutorialGroup tutorialGroup) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void deleteTutorialGroup(TutorialGroup tutorialGroup) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public boolean hasTutorialGroup(TutorialGroup tutorialGroup) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void setTutorialGroup(TutorialGroup target, TutorialGroup edited) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public boolean isInTutorialGroupView() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void setViewToStudent(TutorialGroup target) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void setCurrentViewToStudent() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public TutorialGroup getCurrentTgInView() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void deleteStudent(Student target) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void addStudent(Student student) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public boolean isInStudentView() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void setModuleList(ReadOnlyTrackr\u003cModule\u003e newData) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public ReadOnlyTrackr\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void setViewToModule() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void setCurrentViewToModule() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void deleteModule(Module module) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) { }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public ObservableList\u003cTutorialGroup\u003e getFilteredTutorialGroupList() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void updateFilteredTutorialGroupList(Predicate\u003cTutorialGroup\u003e predicate) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "euzintan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "euzintan": 317,
      "juandavinlie": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public void execute_exit_success() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 5,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindModuleCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MODULES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2040;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2100;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalTrackr;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.module.ModuleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class FindModuleCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTrackr(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalTrackr(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        ModuleContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                new ModuleContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        ModuleContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                new ModuleContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        FindModuleCommand findFirstCommand \u003d new FindModuleCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        FindModuleCommand findSecondCommand \u003d new FindModuleCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        FindModuleCommand findFirstCommandCopy \u003d new FindModuleCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void execute_zeroKeywords_noModuleFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MODULES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        ModuleContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        FindModuleCommand command \u003d new FindModuleCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        expectedModel.updateFilteredModuleList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredModuleList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void execute_multipleKeywords_multipleModulesFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MODULES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        ModuleContainsKeywordsPredicate predicate \u003d preparePredicate(\"CS2100 CS2103T CS2040\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        FindModuleCommand command \u003d new FindModuleCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        expectedModel.updateFilteredModuleList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertEquals(Arrays.asList(CS2100, CS2103T, CS2040), model.getFilteredModuleList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private ModuleContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return new ModuleContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 5,
      "juandavinlie": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public void execute_help_success() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 5,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListModuleCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showModuleAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class ListModuleCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        model \u003d new ModelManager(getTypicalModuleList(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getModuleList(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertCommandSuccess(new ListModuleCommand(), model,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                ListModuleCommand.MESSAGE_VIEWING_MODULES_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        showModuleAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertCommandSuccess(new ListModuleCommand(), model,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                ListModuleCommand.MESSAGE_VIEWING_MODULES_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 1,
      "juandavinlie": 9,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ParticipationBelowCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.testutil.TypicalModulesPopulatedWithTutorialGroups.getTypicalTrackr;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ALEX;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BENG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.CHARLIE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.DAVID;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ELIZABETH;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.FIONA;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.testutil.TypicalTutorialGroups.T05;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.student.ParticipationBelowSpecifiedScorePredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class ParticipationBelowCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTrackr(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalTrackr(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        int firstUpperBound \u003d 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        int secondUpperBound \u003d 101;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        ParticipationBelowSpecifiedScorePredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                new ParticipationBelowSpecifiedScorePredicate(firstUpperBound);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        ParticipationBelowSpecifiedScorePredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                new ParticipationBelowSpecifiedScorePredicate(secondUpperBound);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        ParticipationBelowCommand firstParticipationBelow \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                new ParticipationBelowCommand(firstPredicate, firstUpperBound);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        ParticipationBelowCommand secondParticipationBelow \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                new ParticipationBelowCommand(secondPredicate, secondUpperBound);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertTrue(firstParticipationBelow.equals(firstParticipationBelow));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        ParticipationBelowCommand firstParticipationBelowCommandCopy \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                new ParticipationBelowCommand(firstPredicate, firstUpperBound);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertTrue(firstParticipationBelow.equals(firstParticipationBelowCommandCopy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertFalse(firstParticipationBelow.equals(1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertFalse(firstParticipationBelow.equals(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // different command -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertFalse(firstParticipationBelow.equals(secondParticipationBelow));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void execute_zeroUpperBound_noModuleFound() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        model.setViewToTutorialGroup(CS2103T);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        model.setViewToStudent(T05);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        expectedModel.setViewToTutorialGroup(CS2103T);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        expectedModel.setViewToStudent(T05);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        String expectedMessage \u003d String.format(ParticipationBelowCommand.MESSAGE_PARTICIPATION_BELOW_SUCCESS, 0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        ParticipationBelowSpecifiedScorePredicate predicate \u003d preparePredicate(0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        ParticipationBelowCommand command \u003d new ParticipationBelowCommand(predicate, 0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        expectedModel.updateFilteredStudentList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredStudentList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void execute_validUpperBound_multipleModulesFound() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        model.setViewToTutorialGroup(CS2103T);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        model.setViewToStudent(T05);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        expectedModel.setViewToTutorialGroup(CS2103T);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        expectedModel.setViewToStudent(T05);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        String expectedMessage \u003d String.format(ParticipationBelowCommand.MESSAGE_PARTICIPATION_BELOW_SUCCESS, 50);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        ParticipationBelowSpecifiedScorePredicate predicate \u003d preparePredicate(50);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        ParticipationBelowCommand command \u003d new ParticipationBelowCommand(predicate, 50);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        expectedModel.updateFilteredStudentList(predicate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertEquals(Arrays.asList(BENG, CHARLIE, DAVID, FIONA), model.getFilteredStudentList());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void execute_topUpperBound_multipleModulesFound() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        model.setViewToTutorialGroup(CS2103T);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        model.setViewToStudent(T05);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        expectedModel.setViewToTutorialGroup(CS2103T);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        expectedModel.setViewToStudent(T05);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        String expectedMessage \u003d String.format(ParticipationBelowCommand.MESSAGE_PARTICIPATION_BELOW_SUCCESS, 101);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        ParticipationBelowSpecifiedScorePredicate predicate \u003d preparePredicate(101);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        ParticipationBelowCommand command \u003d new ParticipationBelowCommand(predicate, 101);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        expectedModel.updateFilteredStudentList(predicate);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertEquals(Arrays.asList(ALEX, BENG, CHARLIE, DAVID, ELIZABETH, FIONA), model.getFilteredStudentList());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private ParticipationBelowSpecifiedScorePredicate preparePredicate(int upperBound) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return new ParticipationBelowSpecifiedScorePredicate(upperBound);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 111
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddModuleCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MODULE_ID_DESC_CS2103T;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.logic.commands.AddModuleCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "public class AddModuleCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    private AddModuleCommandParser parser \u003d new AddModuleCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public void parse_validArgs_returnsAddModuleCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        Module expectedModule \u003d CS2103T;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertParseSuccess(parser, MODULE_ID_DESC_CS2103T, new AddModuleCommand(expectedModule));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        assertParseFailure(parser, \" \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 23,
      "EthanTheGoondu": 1,
      "juandavinlie": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddStudentCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class AddStudentCommandParserTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    // todo: add test cases"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddTutorialGroupCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "euzintan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TUTORIAL_GROUP_ID_B014;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TUTORIAL_GROUP_1300;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TUTORIAL_GROUP_1500;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TUTORIAL_GROUP_B014;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TUTORIAL_GROUP_DAY_MON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.logic.commands.AddTutorialGroupCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.tutorialgroup.DayOfWeek;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.tutorialgroup.TimeOfDay;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroup;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroupId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "euzintan"
        },
        "content": "public class AddTutorialGroupCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    private AddTutorialGroupCommandParser parser \u003d new AddTutorialGroupCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public void parse_validArgs_returnsAddTutorialGroupCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        TutorialGroup expectedTutorialGroup \u003d new TutorialGroup(new TutorialGroupId(VALID_TUTORIAL_GROUP_B014),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            new DayOfWeek(VALID_TUTORIAL_GROUP_DAY_MON), new TimeOfDay(VALID_TUTORIAL_GROUP_1300),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            new TimeOfDay(VALID_TUTORIAL_GROUP_1500));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        assertParseSuccess(parser, TUTORIAL_GROUP_ID_B014, new AddTutorialGroupCommand(expectedTutorialGroup));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        assertParseFailure(parser, \" \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            AddTutorialGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "euzintan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "euzintan": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteModuleCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.DeleteModuleCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class DeleteModuleCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private DeleteModuleCommandParser parser \u003d new DeleteModuleCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteModuleCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteModuleCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 3,
      "juandavinlie": 4,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteTutorialGroupCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "euzintan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.logic.commands.DeleteTutorialGroupCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "euzintan"
        },
        "content": "public class DeleteTutorialGroupCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    private DeleteTutorialGroupCommandParser parser \u003d new DeleteTutorialGroupCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteTutorialGroupCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTutorialGroupCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "euzintan"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "euzintan": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditTutorialGroupCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "euzintan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TUTORIAL_GROUP_1500;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TUTORIAL_GROUP_ID_B014;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TUTORIAL_GROUP_1300;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TUTORIAL_GROUP_1500;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TUTORIAL_GROUP_B014;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TUTORIAL_GROUP_DAY_MON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_GRP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_GRP_START_TIME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.model.tutorialgroup.TimeOfDay.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.logic.commands.EditTutorialGroupCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.logic.commands.EditTutorialGroupCommand.EditTutorialGroupDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.tutorialgroup.DayOfWeek;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.tutorialgroup.TimeOfDay;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroup;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroupId;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "euzintan"
        },
        "content": "public class EditTutorialGroupCommandParserTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    private EditTutorialGroupCommandParser parser \u003d new EditTutorialGroupCommandParser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public void parse_allValidArgs_returnsEditTutorialGroupCommand() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        TutorialGroup expectedTutorialGroup \u003d new TutorialGroup(new TutorialGroupId(VALID_TUTORIAL_GROUP_B014),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            new DayOfWeek(VALID_TUTORIAL_GROUP_DAY_MON), new TimeOfDay(VALID_TUTORIAL_GROUP_1300),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            new TimeOfDay(VALID_TUTORIAL_GROUP_1500));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        EditTutorialGroupDescriptor editTutorialGroupDescriptor \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            new EditTutorialGroupDescriptor(expectedTutorialGroup);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        EditTutorialGroupCommand editTutorialGroupCommand \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            new EditTutorialGroupCommand(INDEX_FIRST_PERSON, editTutorialGroupDescriptor);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        assertParseSuccess(parser, INDEX_FIRST_PERSON.getOneBased() + \" \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            + TUTORIAL_GROUP_ID_B014, editTutorialGroupCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public void parse_oneValidArgs_returnsEditTutorialGroupCommand() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        EditTutorialGroupDescriptor editTutorialGroupDescriptor \u003d new EditTutorialGroupDescriptor();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        editTutorialGroupDescriptor.setId(new TutorialGroupId(\"B014\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        EditTutorialGroupCommand editTutorialGroupCommand \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            new EditTutorialGroupCommand(INDEX_FIRST_PERSON, editTutorialGroupDescriptor);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        assertParseSuccess(parser, INDEX_FIRST_PERSON.getOneBased() + \" \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            + PREFIX_TUTORIAL_GRP + VALID_TUTORIAL_GROUP_B014, editTutorialGroupCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public void parse_oneValidOneInvalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        EditTutorialGroupDescriptor editTutorialGroupDescriptor \u003d new EditTutorialGroupDescriptor();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        editTutorialGroupDescriptor.setId(new TutorialGroupId(\"B014\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        assertParseFailure(parser, INDEX_FIRST_PERSON.getOneBased() + \" \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            + PREFIX_TUTORIAL_GRP + VALID_TUTORIAL_GROUP_B014 + \" \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            + PREFIX_TUTORIAL_GRP_START_TIME + INVALID_TUTORIAL_GROUP_1500, String.format(MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        assertParseFailure(parser, \" \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            EditTutorialGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "euzintan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "euzintan": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindModuleCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.FindModuleCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.module.ModuleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class FindModuleCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private FindModuleCommandParser parser \u003d new FindModuleCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        FindModuleCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                new FindModuleCommand(new ModuleContainsKeywordsPredicate(Arrays.asList(\"CS2103T\", \"CS2030\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertParseSuccess(parser, \"CS2103T CS2030\", expectedFindCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertParseSuccess(parser, \" \\n CS2103T \\n \\t CS2030  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 1,
      "juandavinlie": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.StudentId;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private static final String INVALID_STUDENT_ID \u003d \"A1234\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private static final String VALID_STUDENT_ID \u003d \"A1234567X\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void parseStudentId_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseStudentId((String) null));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void parseStudentId_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseStudentId(INVALID_STUDENT_ID));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void parseStudentId_validValueWithoutWhitespace_returnsStudentId() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        StudentId expectedStudentId \u003d new StudentId(VALID_STUDENT_ID);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertEquals(expectedStudentId, ParserUtil.parseStudentId(VALID_STUDENT_ID));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void parseStudentId_validValueWithWhitespace_returnsTrimmedStudentId() throws Exception {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String studentIdWithWhitespace \u003d WHITESPACE + VALID_STUDENT_ID + WHITESPACE;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        StudentId expectedStudentId \u003d new StudentId(VALID_STUDENT_ID);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertEquals(expectedStudentId, ParserUtil.parseStudentId(studentIdWithWhitespace));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 25,
      "-": 171
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/TrackrParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.logic.commands.AddAttendanceCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.AddModuleCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.logic.commands.AddStudentCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.logic.commands.AddTutorialGroupCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.logic.commands.AttendanceBelowCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.logic.commands.DeleteAttendanceCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.DeleteModuleCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.logic.commands.DeleteStudentCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "//import seedu.address.logic.commands.DeleteTutorialGroupCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.EditModuleCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.EditModuleCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "//import seedu.address.logic.commands.EditStudentCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "//import seedu.address.logic.commands.EditTutorialGroupCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.logic.commands.EditParticipationCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.EditStudentCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "//import seedu.address.logic.commands.EditTutorialGroupCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.FindModuleCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.logic.commands.FindStudentCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.logic.commands.FindTutorialGroupCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.ListModuleCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.logic.commands.ListStudentCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.logic.commands.ListTutorialGroupCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.logic.commands.ParticipationBelowCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.logic.commands.PreviousViewCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.logic.commands.ViewAttendanceCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.logic.commands.ViewStudentCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.logic.commands.ViewTutorialGroupCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.module.ModuleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.module.ModuleId;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.model.student.Attendance;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroup;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "//import seedu.address.model.tutorialgroup.TutorialGroupId;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.testutil.AttendanceBuilder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.testutil.AttendanceUtil;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.testutil.ModuleUtil;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.testutil.StudentUtil;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.testutil.TutorialGroupBuilder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.testutil.TutorialGroupUtil;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "public class TrackrParserTest {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private final TrackrParser parser \u003d new TrackrParser();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void parseCommand_addModule() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        Module module \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        AddModuleCommand command \u003d (AddModuleCommand) parser.parseCommand(ModuleUtil.getAddModuleCommand(module));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertEquals(new AddModuleCommand(module), command);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public void parseCommand_addTutorialGroup() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        TutorialGroup tutorialGroup \u003d new TutorialGroupBuilder().build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        AddTutorialGroupCommand command \u003d (AddTutorialGroupCommand) parser.parseCommand(("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                TutorialGroupUtil.getAddTutorialGroupCommand(tutorialGroup)));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        assertEquals(new AddTutorialGroupCommand(tutorialGroup), command);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public void parseCommand_addStudent() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        AddStudentCommand command \u003d (AddStudentCommand) parser.parseCommand(StudentUtil.getAddStudentCommand(student));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        assertEquals(new AddStudentCommand(student), command);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public void parseCommand_addAttendance() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        Attendance attendance \u003d new AttendanceBuilder().build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        AddAttendanceCommand command \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "            (AddAttendanceCommand) parser.parseCommand(AttendanceUtil.getAddAttendanceCommand(attendance));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        assertEquals(new AddAttendanceCommand(INDEX_FIRST_PERSON, new int[]{2}), command);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void parseCommand_deleteModule() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        DeleteModuleCommand command \u003d (DeleteModuleCommand) parser.parseCommand("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                DeleteModuleCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertEquals(new DeleteModuleCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    //    Todo: deleteTutorialGroupTest"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    //    public void parseCommand_deleteTutorialGroup() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    //        DeleteTutorialGroupCommand command \u003d (DeleteTutorialGroupCommand) parser.parseCommand("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    //                DeleteTutorialGroupCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    //        assertEquals(new DeleteTutorialGroupCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public void parseCommand_deleteStudent() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        DeleteStudentCommand command \u003d (DeleteStudentCommand) parser.parseCommand("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                DeleteStudentCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        assertEquals(new DeleteStudentCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public void parseCommand_deleteAttendance() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        DeleteAttendanceCommand command \u003d (DeleteAttendanceCommand) parser.parseCommand("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                DeleteAttendanceCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                + \" week/2\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        assertEquals(new DeleteAttendanceCommand(INDEX_FIRST_PERSON, new int[]{2}), command);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    //    Example edit Test for reference, delete after"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void parseCommand_editModule() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        EditModuleCommand command \u003d (EditModuleCommand) parser.parseCommand(EditModuleCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + \"m/CS21\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        EditModuleDescriptor editModuleDescriptor \u003d new EditModuleDescriptor();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        editModuleDescriptor.setModuleId(new ModuleId(\"CS21\"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertEquals(new EditModuleCommand(INDEX_FIRST_PERSON, editModuleDescriptor), command);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    //    Todo: EditTutorialGroup test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    //    public void parseCommand_editTutorialGroup() throws Exception {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    //        TutorialGroup tutorialGroup \u003d new TutorialGroupBuilder().build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    //        EditTutorialGroupCommand toTest \u003d new EditTutorialGroupCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    //                new TutorialGroupId(\"T03\"), tutorialGroup.getDayOfWeek(),"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    //                tutorialGroup.getStartTime(), tutorialGroup.getEndTime());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    //        EditTutorialGroupCommand command \u003d"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    //                (EditTutorialGroupCommand) parser.parseCommand(EditTutorialGroupCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    //                        + \" \" + INDEX_FIRST_PERSON.getOneBased() + \" \" + \"tg/T03 day/MON start/15:00 end/17:00\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    //        assertEquals(toTest, command);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    //    Todo: EditStudent test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void parseCommand_editStudent() throws Exception {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        EditStudentCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(student).build();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        EditStudentCommand command \u003d (EditStudentCommand) parser.parseCommand("
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                EditStudentCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                        + \" \" + StudentUtil.getEditStudentDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertEquals(new EditStudentCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public void parseCommand_editParticipation() throws Exception {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        EditParticipationCommand command \u003d (EditParticipationCommand) parser.parseCommand("
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                EditParticipationCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + \"score/2\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        assertEquals(new EditParticipationCommand(INDEX_FIRST_PERSON, \"2\"), command);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void parseCommand_findModule() throws Exception {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        FindModuleCommand command \u003d (FindModuleCommand) parser.parseCommand("
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                FindModuleCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertEquals(new FindModuleCommand(new ModuleContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public void parseCommand_findTutorialGroup() throws Exception {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        FindTutorialGroupCommand command \u003d (FindTutorialGroupCommand) parser.parseCommand("
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                FindTutorialGroupCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        assertEquals(new FindTutorialGroupCommand(new TutorialContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public void parseCommand_findStudentGroup() throws Exception {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        FindStudentCommand command \u003d (FindStudentCommand) parser.parseCommand("
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                FindStudentCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        assertEquals(new FindStudentCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void parseCommand_listModule() throws Exception {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertTrue(parser.parseCommand(ListModuleCommand.COMMAND_WORD) instanceof ListModuleCommand);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertTrue(parser.parseCommand(ListModuleCommand.COMMAND_WORD + \" 3\") instanceof ListModuleCommand);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public void parseCommand_listTutorialGroup() throws Exception {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        assertTrue(parser.parseCommand(ListTutorialGroupCommand.COMMAND_WORD) instanceof ListTutorialGroupCommand);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                ListTutorialGroupCommand.COMMAND_WORD + \" 3\") instanceof ListTutorialGroupCommand);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public void parseCommand_listStudent() throws Exception {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        assertTrue(parser.parseCommand(ListStudentCommand.COMMAND_WORD) instanceof ListStudentCommand);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        assertTrue(parser.parseCommand(ListStudentCommand.COMMAND_WORD + \" 3\") instanceof ListStudentCommand);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public void parseCommand_attendanceBelow() throws Exception {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                AttendanceBelowCommand.COMMAND_WORD + \" 3\") instanceof AttendanceBelowCommand);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public void attendanceBelow_emptyIndex_throwsParseException() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        assertThrows(ParseException.class, \"Invalid command format! \\n\""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                + AttendanceBelowCommand.MESSAGE_USAGE, () -\u003e parser.parseCommand("
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                AttendanceBelowCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public void parseCommand_participationBelow() throws Exception {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                ParticipationBelowCommand.COMMAND_WORD + \" 3\") instanceof ParticipationBelowCommand);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public void participationBelow_emptyIndex_throwsParseException() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        assertThrows(ParseException.class, \"Invalid command format! \\n\""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                + ParticipationBelowCommand.MESSAGE_USAGE, () -\u003e parser.parseCommand("
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                ParticipationBelowCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public void parseCommand_viewTutorialGroup() throws Exception {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        ViewTutorialGroupCommand command \u003d (ViewTutorialGroupCommand) parser.parseCommand("
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                ViewTutorialGroupCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        assertEquals(new ViewTutorialGroupCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public void parseCommand_viewStudent() throws Exception {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        ViewStudentCommand command \u003d (ViewStudentCommand) parser.parseCommand("
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                ViewStudentCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        assertEquals(new ViewStudentCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public void parseCommand_viewAttendance() throws Exception {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        ViewAttendanceCommand command \u003d (ViewAttendanceCommand) parser.parseCommand("
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "                ViewAttendanceCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        assertEquals(new ViewAttendanceCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public void parseCommand_previousView() throws Exception {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        assertTrue(parser.parseCommand(PreviousViewCommand.COMMAND_WORD) instanceof PreviousViewCommand);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        assertTrue(parser.parseCommand(PreviousViewCommand.COMMAND_WORD + \" 3\") instanceof PreviousViewCommand);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 183,
      "fanminj": 23,
      "juandavinlie": 39,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MODULES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TUTORIALGROUPS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2030;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ALEX;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.FIONA;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.testutil.TypicalTutorialGroups.T05;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.testutil.TypicalTutorialGroups.V04;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.module.ModuleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.testutil.TrackrBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertEquals(new Trackr(), new Trackr(modelManager.getModuleList()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void setTrackrFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setTrackrFilePath(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void setTrackrFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        modelManager.setTrackrFilePath(path);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertEquals(path, modelManager.getTrackrFilePath());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void hasModule_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasModule(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //    public void hasTutorialGroup_nullTutorialGroup_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //        modelManager.setCurrentModuleInView(CS2103T);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //        assertThrows(NullPointerException.class, () -\u003e modelManager.hasTutorialGroup(null));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void hasStudent_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasStudent(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void hasModule_moduleNotInTrackr_returnsFalse() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertFalse(modelManager.hasModule(CS2103T));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //    public void hasTutorialGroup_tutorialGroupNotInTrackr_returnsFalse() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //        modelManager.setCurrentModuleInView(CS2103T);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //        assertFalse(modelManager.hasTutorialGroup(T05));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //    public void hasStudent_studentNotInTrackr_returnsFalse() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //        modelManager.setCurrentModuleInView(CS2103T);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //        modelManager.setCurrentTgInView(T05);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //        assertFalse(modelManager.hasStudent(ALEX));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void hasModule_moduleInTrackr_returnsTrue() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        modelManager.addModule(CS2103T);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertTrue(modelManager.hasModule(CS2103T));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //    public void hasTutorialGroup_tutorialGroupInTrackr_returnsTrue() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //        modelManager.setCurrentModuleInView(CS2103T);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //        modelManager.addTutorialGroup(T05);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //        assertTrue(modelManager.hasTutorialGroup(T05));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //    public void hasStudent_studentInTrackr_returnsTrue() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //        modelManager.setCurrentModuleInView(CS2103T);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //        modelManager.setCurrentTgInView(T05);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //        modelManager.addStudent(ALEX);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //        assertTrue(modelManager.hasStudent(ALEX));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void getFilteredModuleList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredModuleList().remove(0));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void getFilteredTutorialGroupList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                -\u003e modelManager.getFilteredTutorialGroupList().remove(0)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void getFilteredStudentList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredStudentList().remove(0));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Trackr trackr \u003d new TrackrBuilder()"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                .withModule(CS2030)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                .withTutorialGroup(V04, CS2030)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                .withStudent(FIONA, V04, CS2030)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Trackr differentTrackr \u003d new Trackr();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        modelManager \u003d new ModelManager(trackr, userPrefs);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(trackr, userPrefs);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentTrackr, userPrefs)));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // different module filteredList -\u003e returns false"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        String[] moduleKeywords \u003d CS2103T.getModuleId().toString().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        modelManager.updateFilteredModuleList(new ModuleContainsKeywordsPredicate(Arrays.asList(moduleKeywords)));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(trackr, userPrefs)));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // different tutorial group filteredList -\u003e returns false"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        String[] tutorialGroupKeywords \u003d T05.getId().toString().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        modelManager.updateFilteredTutorialGroupList("
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                        new TutorialContainsKeywordsPredicate(Arrays.asList(tutorialGroupKeywords))"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(trackr, userPrefs)));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // different student filteredList -\u003e returns false"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        String[] studentKeywords \u003d ALEX.getName().toString().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        modelManager.updateFilteredStudentList(new NameContainsKeywordsPredicate(Arrays.asList(studentKeywords)));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(trackr, userPrefs)));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        modelManager.updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        modelManager.updateFilteredTutorialGroupList(PREDICATE_SHOW_ALL_TUTORIALGROUPS);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        modelManager.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(trackr, differentUserPrefs)));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 5,
      "fanminj": 88,
      "juandavinlie": 14,
      "-": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/AttendanceTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.student.Attendance.MAX_SCORE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.student.Attendance.MIN_SCORE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.student.Attendance.MIN_VALUE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class AttendanceTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void isValidWeekNumber() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // null attendance week number"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Attendance.isValidWeekNumber(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // invalid attendance week numbers"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertFalse(Attendance.isValidWeekNumber(\"0\")); // 1 less than lower bound"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertFalse(Attendance.isValidWeekNumber(\"14\")); // 1 more than upper bound"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertFalse(Attendance.isValidWeekNumber(\"ab\")); // non-numeric"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertFalse(Attendance.isValidWeekNumber(\"one\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertFalse(Attendance.isValidWeekNumber(\"Week 1\")); // contains alphabets"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertFalse(Attendance.isValidWeekNumber(\"1 1\")); // contains space"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // valid attendance week numbers"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertTrue(Attendance.isValidWeekNumber(\"1\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertTrue(Attendance.isValidWeekNumber(\"13\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertTrue(Attendance.isValidWeekNumber(\"10\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void isValidParticipationEdit() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        // null participation score"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Attendance.isValidParticipationEdit(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        // invalid participation score"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertFalse(Attendance.isValidParticipationEdit(\"-101\")); // 1 less than lower bound"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertFalse(Attendance.isValidParticipationEdit(\"101\")); // 1 more than upper bound"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertFalse(Attendance.isValidParticipationEdit(\"two\")); // non-numeric"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertFalse(Attendance.isValidParticipationEdit(\"score 10\")); // contains alphabets"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertFalse(Attendance.isValidParticipationEdit(\"10 0\")); // contains space"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        // valid participation edit score"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertTrue(Attendance.isValidParticipationEdit(\"-100\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertTrue(Attendance.isValidParticipationEdit(\"100\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertTrue(Attendance.isValidParticipationEdit(\"-49\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertTrue(Attendance.isValidParticipationEdit(\"61\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void isValidParticipation() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // null participation score"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Attendance.isValidParticipation(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // invalid participation score"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertFalse(Attendance.isValidParticipation(\"-1\")); // 1 less than lower bound"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertFalse(Attendance.isValidParticipation(\"101\")); // 1 more than upper bound"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertFalse(Attendance.isValidParticipation(\"thirty\")); // non-numeric"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertFalse(Attendance.isValidParticipation(\"score 45\")); // contains alphabets"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertFalse(Attendance.isValidParticipation(\"5 9\")); // contains space"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        // valid participation edit score"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertTrue(Attendance.isValidParticipation(\"0\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertTrue(Attendance.isValidParticipation(\"100\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertTrue(Attendance.isValidParticipation(\"49\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertTrue(Attendance.isValidParticipation(\"61\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void addAttendance_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Attendance attendance \u003d new Attendance();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String invalidAttendance \u003d \"-1\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e attendance.addAttendance(invalidAttendance));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void deleteAttendance_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Attendance attendance \u003d new Attendance();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String invalidAttendance \u003d \"14\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e attendance.deleteAttendance(invalidAttendance));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void editParticipation_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Attendance attendance \u003d new Attendance();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String invalidParticipation \u003d \"105\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e attendance.editParticipation(invalidParticipation));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Edit participation always add the given score to the value. To reduce the score, provide a negative number."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void editParticipation() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Attendance attendance \u003d new Attendance();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // null participation score"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e attendance.editParticipation(null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // doesn\u0027t exceed max score"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        attendance.editParticipation(Integer.toString(MAX_SCORE));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        attendance.editParticipation(Integer.toString(MAX_SCORE));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertEquals(MAX_SCORE, attendance.getParticipationScore());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // doesn\u0027t fall below min score"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        attendance.editParticipation(\"0\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        attendance.editParticipation(Integer.toString(MIN_VALUE));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertEquals(MIN_SCORE, attendance.getParticipationScore());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // valid scores"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        attendance.editParticipation(\"49\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertEquals(49, attendance.getParticipationScore());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        attendance.editParticipation(\"-15\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertEquals(34, attendance.getParticipationScore());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 37,
      "fanminj": 80,
      "-": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/ModuleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.ModuleId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "public class ModuleTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Module(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Module(new ModuleId(invalidAddress)));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ModuleId.isValidModuleId(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertFalse(ModuleId.isValidModuleId(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertFalse(ModuleId.isValidModuleId(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertTrue(ModuleId.isValidModuleId(\"CS2103T\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertFalse(ModuleId.isValidModuleId(\"-\")); // one character"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertTrue(ModuleId.isValidModuleId(\"GER1000H\")); // long address"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 27,
      "EthanTheGoondu": 9,
      "juandavinlie": 1,
      "-": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        // One keyword"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    // NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        // Multiple keywords"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        // Only one matching keyword"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        // Mixed-case keywords"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        // Zero keywords"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        // Non-matching keyword"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //                .withEmail(\"alice@email.com\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 34,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/StudentIdTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class StudentIdTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new StudentId(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void constructor_invalidStudentId_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String invalidStudentId \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new StudentId(invalidStudentId));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void isValidStudentId() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // null student id"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StudentId.isValidStudentId(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // invalid student id"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertFalse(StudentId.isValidStudentId(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertFalse(StudentId.isValidStudentId(\"  \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertFalse(StudentId.isValidStudentId(\"myId\")); // alphabets only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertFalse(StudentId.isValidStudentId(\"1234AX567\")); // alphabets within digits"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertFalse(StudentId.isValidStudentId(\"A123456X7\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertFalse(StudentId.isValidStudentId(\"A123456X\")); // less than 7 digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertFalse(StudentId.isValidStudentId(\"a1234567x\")); // non-capital alphabets"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertFalse(StudentId.isValidStudentId(\"1234567X\")); // missing first alphabet"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // valid student id"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertTrue(StudentId.isValidStudentId(\"A1234567X\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 39,
      "-": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/StudentTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BENG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BENG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BENG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STUDENT_ID_BENG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ALEX;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BENG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class StudentTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationsException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e student.getTags().remove(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void isSameStudent() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertTrue(ALEX.isSame(ALEX));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertFalse(ALEX.isSame(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // students with same id are considered the same student"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // different phone and email -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Student editedAlex \u003d new StudentBuilder(ALEX).withPhone(VALID_PHONE_BENG).withEmail(VALID_EMAIL_BENG).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertTrue(ALEX.isSame(editedAlex));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // different name -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        editedAlex \u003d new StudentBuilder(ALEX).withName(VALID_NAME_BENG).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertTrue(ALEX.isSame(editedAlex));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // different student id -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        editedAlex \u003d new StudentBuilder(ALEX).withStudentId(VALID_STUDENT_ID_BENG).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertFalse(ALEX.isSame(editedAlex));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // same name, same phone, same id, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        editedAlex \u003d new StudentBuilder(ALEX).withEmail(VALID_EMAIL_BENG)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertTrue(ALEX.isSame(editedAlex));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // same name, same email, same id, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        editedAlex \u003d new StudentBuilder(ALEX).withPhone(VALID_PHONE_BENG)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertTrue(ALEX.isSame(editedAlex));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // same name, same phone, same email, same id, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        editedAlex \u003d new StudentBuilder(ALEX).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertTrue(ALEX.isSame(editedAlex));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Student alexCopy \u003d new StudentBuilder(ALEX).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertTrue(ALEX.equals(alexCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertTrue(ALEX.equals(ALEX));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertFalse(ALEX.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertFalse(ALEX.equals(5));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertFalse(ALEX.equals(BENG));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Student editedAlex \u003d new StudentBuilder(ALEX).withName(VALID_NAME_BENG).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertFalse(ALEX.equals(editedAlex));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        editedAlex \u003d new StudentBuilder(ALEX).withPhone(VALID_PHONE_BENG).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertFalse(ALEX.equals(editedAlex));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        editedAlex \u003d new StudentBuilder(ALEX).withEmail(VALID_EMAIL_BENG).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertFalse(ALEX.equals(editedAlex));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        editedAlex \u003d new StudentBuilder(ALEX).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertFalse(ALEX.equals(editedAlex));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 95,
      "-": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/UniqueStudentListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ALEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BENG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.exceptions.DuplicateShowableException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.exceptions.ShowableNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class UniqueStudentListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private final UniqueStudentList uniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void contains_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void contains_studentNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertFalse(uniqueStudentList.contains(ALEX));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void contains_studentInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        uniqueStudentList.addStudent(ALEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertTrue(uniqueStudentList.contains(ALEX));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void contains_studentWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        uniqueStudentList.addStudent(ALEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Student editedAlex \u003d new StudentBuilder(ALEX).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertTrue(uniqueStudentList.contains(editedAlex));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void add_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.addStudent(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void add_duplicateStudent_throwsDuplicateShowableException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        uniqueStudentList.addStudent(ALEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertThrows(DuplicateShowableException.class, () -\u003e uniqueStudentList.addStudent(ALEX));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void setStudent_nullTargetStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.setStudent(null, ALEX));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void setStudent_nullEditedStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.setStudent(ALEX, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void setStudent_targetStudentNotInList_throwsShowableNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertThrows(ShowableNotFoundException.class, () -\u003e uniqueStudentList.setStudent(ALEX, ALEX));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void setStudent_editedStudentIsSameStudent_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        uniqueStudentList.addStudent(ALEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        uniqueStudentList.setStudent(ALEX, ALEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        expectedUniqueStudentList.addStudent(ALEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void setStudent_editedStudentHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        uniqueStudentList.addStudent(ALEX);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Student editedAlex \u003d new StudentBuilder(ALEX).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        uniqueStudentList.setStudent(ALEX, editedAlex);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        expectedUniqueStudentList.addStudent(editedAlex);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void setStudent_editedStudentHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        uniqueStudentList.addStudent(ALEX);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        uniqueStudentList.setStudent(ALEX, BENG);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        expectedUniqueStudentList.addStudent(BENG);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void setStudent_editedStudentHasNonUniqueIdentity_throwsDuplicateShowableException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        uniqueStudentList.addStudent(ALEX);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        uniqueStudentList.addStudent(BENG);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertThrows(DuplicateShowableException.class, () -\u003e uniqueStudentList.setStudent(ALEX, BENG));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void remove_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.removeStudent(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void remove_studentDoesNotExist_throwsShowableNotFoundException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertThrows(ShowableNotFoundException.class, () -\u003e uniqueStudentList.removeStudent(ALEX));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void remove_existingStudent_removesStudent() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        uniqueStudentList.addStudent(ALEX);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        uniqueStudentList.removeStudent(ALEX);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void setStudentList_nullUniqueStudentList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.setStudentList((UniqueStudentList) null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void setStudentList_uniqueStudentList_replacesOwnListWithProvidedUniqueStudentList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        uniqueStudentList.addStudent(ALEX);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        expectedUniqueStudentList.addStudent(BENG);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        uniqueStudentList.setStudentList(expectedUniqueStudentList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void setStudentList_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.setStudentList((List\u003cStudent\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void setStudentList_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        uniqueStudentList.addStudent(ALEX);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        List\u003cStudent\u003e studentList \u003d Collections.singletonList(BENG);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        uniqueStudentList.setStudentList(studentList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        expectedUniqueStudentList.addStudent(BENG);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void setStudentList_listWithDuplicateStudents_throwsDuplicateShowableException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        List\u003cStudent\u003e listWithDuplicateStudents \u003d Arrays.asList(ALEX, ALEX);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertThrows(DuplicateShowableException.class, ()"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                -\u003e uniqueStudentList.setStudentList(listWithDuplicateStudents)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                -\u003e uniqueStudentList.asUnmodifiableObservableList().remove(0)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 172,
      "-": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedAttendanceTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import static seedu.address.storage.JsonAdaptedAttendance.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ALEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.student.Attendance;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "public class JsonAdaptedAttendanceTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private static final String INVALID_PARTICIPATION_SCORE \u003d \"4524324\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private static final String INVALID_WEEK_NUMBER \u003d \"365\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private static final String VALID_PARTICIPATION_SCORE \u003d ALEX.getAttendance().getParticipationScoreAsString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private static final List\u003cJsonAdaptedWeekNumber\u003e VALID_WEEK_NUMBERS \u003d List.of(\"1\", \"2\", \"5\", \"11\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            .stream().map(JsonAdaptedWeekNumber::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private static final List\u003cJsonAdaptedWeekNumber\u003e DUMMY_WEEK_NUMBERS \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void toModelType_validAttendanceDetails_returnsAttendance() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        JsonAdaptedAttendance attendance \u003d new JsonAdaptedAttendance(ALEX.getAttendance());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertEquals(ALEX.getAttendance(), attendance.toModelType());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void toModelType_invalidWeekNumbers_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        List\u003cJsonAdaptedWeekNumber\u003e invalidWeekNumbers \u003d new ArrayList\u003c\u003e(VALID_WEEK_NUMBERS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        invalidWeekNumbers.add(new JsonAdaptedWeekNumber(INVALID_WEEK_NUMBER));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        JsonAdaptedAttendance attendance \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                new JsonAdaptedAttendance(invalidWeekNumbers, VALID_PARTICIPATION_SCORE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        String expectedMessage \u003d String.format((Attendance.WEEK_NUMBER_CONSTRAINTS),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                Attendance.MIN_WEEK, Attendance.MAX_WEEK);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, attendance::toModelType);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void toModelType_invalidParticipationScore_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        JsonAdaptedAttendance attendance \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                new JsonAdaptedAttendance(DUMMY_WEEK_NUMBERS, INVALID_PARTICIPATION_SCORE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        String expectedMessage \u003d Attendance.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, attendance::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void toModelType_nullParticipationScore_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        JsonAdaptedAttendance attendance \u003d new JsonAdaptedAttendance(DUMMY_WEEK_NUMBERS, null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Participation Score\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, attendance::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedModuleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import static seedu.address.storage.JsonAdaptedModule.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2100;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.ModuleId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "public class JsonAdaptedModuleTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private static final String INVALID_MODULE_ID \u003d \"CS2##3T\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private static final String VALID_MODULE_ID \u003d CS2100.getModuleId().toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private static final List\u003cJsonAdaptedTutorialGroup\u003e DUMMY_TUTORIAL_GROUP_LIST \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void toModelType_validModuleDetails_returnsModule() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        JsonAdaptedModule module \u003d new JsonAdaptedModule(CS2100);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertEquals(CS2100, module.toModelType());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void toModelType_invalidModuleId_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        JsonAdaptedModule module \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                new JsonAdaptedModule(INVALID_MODULE_ID, DUMMY_TUTORIAL_GROUP_LIST);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        String expectedMessage \u003d ModuleId.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void toModelType_nullModuleId_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        JsonAdaptedModule module \u003d new JsonAdaptedModule(null, DUMMY_TUTORIAL_GROUP_LIST);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ModuleId.class.getSimpleName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedStudentTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import static seedu.address.storage.JsonAdaptedStudent.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BENG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.student.StudentId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "public class JsonAdaptedStudentTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private static final String INVALID_STUDENT_ID \u003d \"ThisIsNotValid\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private static final String VALID_NAME \u003d BENG.getName().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private static final String VALID_PHONE \u003d BENG.getPhone().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENG.getEmail().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private static final String VALID_STUDENT_ID \u003d BENG.getStudentId().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENG.getTags().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private static final JsonAdaptedAttendance VALID_ATTENDANCE \u003d new JsonAdaptedAttendance(BENG.getAttendance());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void toModelType_validStudentDetails_returnsStudent() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(BENG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertEquals(BENG, student.toModelType());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                new JsonAdaptedStudent(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_STUDENT_ID, VALID_TAGS,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                        VALID_ATTENDANCE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(null, VALID_PHONE, VALID_EMAIL, VALID_STUDENT_ID,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                VALID_TAGS, VALID_ATTENDANCE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_STUDENT_ID, VALID_TAGS,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                        VALID_ATTENDANCE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(VALID_NAME, null, VALID_EMAIL, VALID_STUDENT_ID, VALID_TAGS,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                VALID_ATTENDANCE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_STUDENT_ID, VALID_TAGS,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                        VALID_ATTENDANCE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, null, VALID_STUDENT_ID,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                VALID_TAGS, VALID_ATTENDANCE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void toModelType_invalidStudentId_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_STUDENT_ID, VALID_TAGS,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                        VALID_ATTENDANCE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        String expectedMessage \u003d StudentId.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void toModelType_nullStudentId_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                VALID_TAGS, VALID_ATTENDANCE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, StudentId.class.getSimpleName());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void toModelType_nullAttendance_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_STUDENT_ID,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                VALID_TAGS, null);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Attendance\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_STUDENT_ID, invalidTags,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                        VALID_ATTENDANCE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertThrows(IllegalValueException.class, student::toModelType);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 130
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedTutorialGroupTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import static seedu.address.storage.JsonAdaptedTutorialGroup.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import static seedu.address.testutil.TypicalTutorialGroups.S12;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.tutorialgroup.DayOfWeek;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.tutorialgroup.TimeOfDay;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroupId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "public class JsonAdaptedTutorialGroupTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private static final String INVALID_TUTORIAL_GROUP_ID \u003d \"$12\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private static final String INVALID_DAY_OF_WEEK \u003d \"M0N\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private static final String INVALID_START_TIME \u003d \"1200\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private static final String INVALID_END_TIME \u003d \"Thirteen O-clock\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private static final String INVALID_TIME_PAIR_START \u003d \"11:00\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private static final String INVALID_TIME_PAIR_END \u003d \"06:00\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private static final String VALID_TUTORIAL_GROUP_ID \u003d S12.getId().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private static final String VALID_DAY_OF_WEEK \u003d S12.getDayOfWeek().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private static final String VALID_START_TIME \u003d S12.getStartTime().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private static final String VALID_END_TIME \u003d S12.getEndTime().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private static final List\u003cJsonAdaptedStudent\u003e DUMMY_STUDENT_LIST \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void toModelType_validTutorialGroupDetails_returnsTutorialGroup() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        JsonAdaptedTutorialGroup module \u003d new JsonAdaptedTutorialGroup(S12);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertEquals(S12, module.toModelType());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void toModelType_invalidTutorialGroupId_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        JsonAdaptedTutorialGroup tutorialGroup \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                new JsonAdaptedTutorialGroup("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                        INVALID_TUTORIAL_GROUP_ID,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                        VALID_DAY_OF_WEEK,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                        VALID_START_TIME,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                        VALID_END_TIME,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                        DUMMY_STUDENT_LIST);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        String expectedMessage \u003d TutorialGroupId.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, tutorialGroup::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void toModelType_nullTutorialGroupId_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        JsonAdaptedTutorialGroup tutorialGroup \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                new JsonAdaptedTutorialGroup("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                        VALID_DAY_OF_WEEK,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                        VALID_START_TIME,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                        VALID_END_TIME,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                        DUMMY_STUDENT_LIST);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, TutorialGroupId.class.getSimpleName());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, tutorialGroup::toModelType);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void toModelType_invalidDayOfWeek_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        JsonAdaptedTutorialGroup tutorialGroup \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                new JsonAdaptedTutorialGroup("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                        VALID_TUTORIAL_GROUP_ID,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                        INVALID_DAY_OF_WEEK,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                        VALID_START_TIME,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                        VALID_END_TIME,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                        DUMMY_STUDENT_LIST);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        String expectedMessage \u003d DayOfWeek.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, tutorialGroup::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void toModelType_nullDayOfWeek_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        JsonAdaptedTutorialGroup tutorialGroup \u003d new JsonAdaptedTutorialGroup("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                VALID_TUTORIAL_GROUP_ID,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                VALID_START_TIME,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                VALID_END_TIME,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                DUMMY_STUDENT_LIST);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, DayOfWeek.class.getSimpleName());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, tutorialGroup::toModelType);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void toModelType_invalidStartTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        JsonAdaptedTutorialGroup tutorialGroup \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                new JsonAdaptedTutorialGroup("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                        VALID_TUTORIAL_GROUP_ID,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                        VALID_DAY_OF_WEEK,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                        INVALID_START_TIME,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                        VALID_END_TIME,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                        DUMMY_STUDENT_LIST);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        String expectedMessage \u003d TimeOfDay.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, tutorialGroup::toModelType);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void toModelType_nullStartTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        JsonAdaptedTutorialGroup tutorialGroup \u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                new JsonAdaptedTutorialGroup(VALID_TUTORIAL_GROUP_ID,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                        VALID_DAY_OF_WEEK,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                        VALID_END_TIME,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                        DUMMY_STUDENT_LIST);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, TimeOfDay.class.getSimpleName());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, tutorialGroup::toModelType);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void toModelType_invalidEndTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        JsonAdaptedTutorialGroup tutorialGroup \u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                new JsonAdaptedTutorialGroup("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                        VALID_TUTORIAL_GROUP_ID,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                        VALID_DAY_OF_WEEK,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                        VALID_START_TIME,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                        INVALID_END_TIME,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                        DUMMY_STUDENT_LIST);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        String expectedMessage \u003d TimeOfDay.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, tutorialGroup::toModelType);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void toModelType_nullEndTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        JsonAdaptedTutorialGroup tutorialGroup \u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                new JsonAdaptedTutorialGroup(VALID_TUTORIAL_GROUP_ID,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                        VALID_DAY_OF_WEEK,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                        VALID_START_TIME,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                        DUMMY_STUDENT_LIST);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, TimeOfDay.class.getSimpleName());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, tutorialGroup::toModelType);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void toModelType_invalidTimePair_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        JsonAdaptedTutorialGroup tutorialGroup \u003d"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                new JsonAdaptedTutorialGroup("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                        VALID_TUTORIAL_GROUP_ID,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                        VALID_DAY_OF_WEEK,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                        INVALID_TIME_PAIR_START,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                        INVALID_TIME_PAIR_END,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                        DUMMY_STUDENT_LIST);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        String expectedMessage \u003d TimeOfDay.TIME_CONSTRAINTS;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, tutorialGroup::toModelType);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 155
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonModuleListStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2030;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2040;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2100;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalTrackr;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import static seedu.address.testutil.TypicalTutorialGroups.V04;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.ReadOnlyTrackr;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.Trackr;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonModuleListStorageTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonModuleListStorageTest\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void readModuleList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readModuleList(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private java.util.Optional\u003cReadOnlyTrackr\u003cModule\u003e\u003e readModuleList(String filePath) throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonModuleListStorage(Paths.get(filePath)).readModuleList(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertFalse(readModuleList(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readModuleList(\"notJsonFormatModuleList.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readModuleList(\"invalidModuleModuleList.json\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void readModuleList_invalidAndValidModuleModuleList_throwDataConversionException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readModuleList(\"invalidAndValidModuleModuleList.json\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void readAndSaveModuleList_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempModuleList.json\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        Trackr original \u003d getTypicalTrackr();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        JsonModuleListStorage jsonModuleListStorage \u003d new JsonModuleListStorage(filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        jsonModuleListStorage.saveModuleList(original, filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        ReadOnlyTrackr\u003cModule\u003e readBack \u003d jsonModuleListStorage.readModuleList(filePath).get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertEquals(original, new Trackr(readBack));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        original.removeModule(CS2100);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        original.removeModule(CS2040);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        jsonModuleListStorage.saveModuleList(original, filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        readBack \u003d jsonModuleListStorage.readModuleList(filePath).get();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertEquals(original, new Trackr(readBack));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        original.addTutorialGroup(V04, CS2030);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        jsonModuleListStorage.saveModuleList(original); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        readBack \u003d jsonModuleListStorage.readModuleList().get(); // file path not specified"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertEquals(original, new Trackr(readBack));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveModuleList(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private void saveModuleList(ReadOnlyTrackr\u003cModule\u003e moduleList, String filePath) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonModuleListStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                    .saveModuleList(moduleList, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveModuleList(new Trackr(), null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 107,
      "fanminj": 2,
      "-": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableModuleListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "public class JsonSerializableModuleListTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.ReadOnlyTrackr;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.Trackr;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonModuleListStorage moduleListStorage \u003d new JsonModuleListStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        storageManager \u003d new StorageManager(moduleListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void moduleListReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        Trackr original \u003d new Trackr();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        storageManager.saveModuleList(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        ReadOnlyTrackr\u003cModule\u003e retrieved \u003d storageManager.readModuleList().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertEquals(original, new Trackr(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void getModuleListFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertNotNull(storageManager.getModuleFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 10,
      "fanminj": 1,
      "juandavinlie": 2,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AttendanceBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.model.student.Attendance;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "public class AttendanceBuilder {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public static final String DEFAULT_ATTENDANCE_WEEK \u003d \"2\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     * Creates a {@code AttendanceBuilder} with the default details."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public AttendanceBuilder() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     * Builds and returns a Attendance with the specified attribute values."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     * @return Predefined Attendance object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public Attendance build() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        Attendance attendance \u003d new Attendance();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        attendance.addAttendance(DEFAULT_ATTENDANCE_WEEK);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        return attendance;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AttendanceUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.logic.commands.AddAttendanceCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.model.student.Attendance;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "public class AttendanceUtil {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     * Returns an add command string for adding the {@code Attendance}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public static String getAddAttendanceCommand(Attendance attendance) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        String correctArgument \u003d \"1 week/2\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        return AddAttendanceCommand.COMMAND_WORD + \" \" + correctArgument;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditStudentDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.EditStudentCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.StudentId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * An utility class to help with building EditStudentDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class EditStudentDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private EditStudentDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public EditStudentDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.descriptor \u003d new EditStudentDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public EditStudentDescriptorBuilder(EditStudentDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.descriptor \u003d new EditStudentDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Returns an {@code EditStudentDescriptor} with fields containing {@code student}\u0027s details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public EditStudentDescriptorBuilder(Student student) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.descriptor \u003d new EditStudentDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        descriptor.setName(student.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        descriptor.setPhone(student.getPhone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        descriptor.setEmail(student.getEmail());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        descriptor.setStudentId(student.getStudentId());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        descriptor.setTags(student.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Sets the {@code Name} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public EditStudentDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public EditStudentDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Sets the {@code Email} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public EditStudentDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Sets the {@code StudentId} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public EditStudentDescriptorBuilder withStudentId(String id) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        descriptor.setStudentId(new StudentId(id));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditStudentDescriptor}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public EditStudentDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public EditStudentDescriptor build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 82,
      "-": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ModuleBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.module.ModuleId;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": " * A utility class to help with building Module objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class ModuleBuilder {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static final String DEFAULT_MODULE_ID \u003d \"CS2100\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private ModuleId moduleId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Creates a {@code ModuleBuilder} with the default details."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public ModuleBuilder() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        moduleId \u003d new ModuleId(DEFAULT_MODULE_ID);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Initializes the ModuleBuilder with the data of {@code moduleToCopy}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public ModuleBuilder(Module moduleToCopy) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        moduleId \u003d moduleToCopy.getModuleId();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Sets the {@code ModuleId} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public ModuleBuilder withModuleId(String moduleId) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.moduleId \u003d new ModuleId(moduleId);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public Module build() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return new Module(moduleId);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 3,
      "juandavinlie": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ModuleUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.logic.commands.AddModuleCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditStudentCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * A utility class for Module."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class ModuleUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static String getAddModuleCommand(Module module) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return AddModuleCommand.COMMAND_WORD + \" \" + getModuleDetails(module);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static String getModuleDetails(Module module) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        sb.append(PREFIX_MODULE + module.getModuleId().toString() + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditStudentCommand.EditStudentDescriptor descriptor) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.toString()).append(\" \"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.toString()).append(\" \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.toString()).append(\" \"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 3,
      "fanminj": 2,
      "juandavinlie": 7,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/StudentBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.student.Attendance;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.StudentId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * An utility class to help with building Student objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class StudentBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String DEFAULT_STUDENT_ID \u003d \"A1234567X\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private StudentId studentId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private Attendance attendance;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Creates a {@code StudentBuilder} with the default details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public StudentBuilder() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        studentId \u003d new StudentId(DEFAULT_STUDENT_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        attendance \u003d new Attendance();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Initializes the StudentBuilder with the data of {@code studentToCopy}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public StudentBuilder(Student studentToCopy) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        name \u003d studentToCopy.getName();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        phone \u003d studentToCopy.getPhone();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        email \u003d studentToCopy.getEmail();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(studentToCopy.getTags());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        studentId \u003d studentToCopy.getStudentId();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        attendance \u003d studentToCopy.getAttendance();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Sets the {@code Name} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public StudentBuilder withName(String name) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Student} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public StudentBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Sets the {@code Phone} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public StudentBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Sets the {@code Email} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public StudentBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Sets the {@code StudentId} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public StudentBuilder withStudentId(String studentId) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.studentId \u003d new StudentId(studentId);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Sets the {@code Attendance} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public StudentBuilder withAttendance(String... weekNumbers) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        Attendance newAttendance \u003d new Attendance();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        for (String weekNumber : weekNumbers) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            newAttendance.addAttendance(weekNumber);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        newAttendance.setParticipation(attendance.getParticipationScoreAsString());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        attendance \u003d newAttendance;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Sets the participation score of the {@code Student} that we are building."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public StudentBuilder withParticipation(String participationScoreAsString) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        attendance.setParticipation(participationScoreAsString);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public Student build() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return new Student(name, phone, email, tags, studentId, attendance);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 26,
      "fanminj": 89,
      "-": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/StudentUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_ID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.AddStudentCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.logic.commands.EditStudentCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * An utility class for Student."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class StudentUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Returns an AddStudentCommand string for adding the {@code student}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static String getAddStudentCommand(Student student) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return AddStudentCommand.COMMAND_WORD + \" \" + getStudentDetails(student);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Returns the part of command string for the given {@code student}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static String getStudentDetails(Student student) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        sb.append(PREFIX_NAME + student.getName().toString() + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        sb.append(PREFIX_PHONE + student.getPhone().toString() + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        sb.append(PREFIX_EMAIL + student.getEmail().toString() + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        sb.append(PREFIX_STUDENT_ID + student.getStudentId().toString() + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        student.getTags().stream().forEach(s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Returns the part of command string for the given {@code EditStudentDescriptor}\u0027s details."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static String getEditStudentDescriptorDetails(EditStudentDescriptor descriptor) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME + name.toString() + \" \"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE + phone.toString() + \" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL + email.toString() + \" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        descriptor.getStudentId().ifPresent(id -\u003e sb.append(PREFIX_STUDENT_ID + id.toString() + \" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                tags.forEach(tag -\u003e sb.append(PREFIX_TAG + tag.tagName + \" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 9,
      "fanminj": 50,
      "juandavinlie": 1,
      "-": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return Index.fromOneBased(model.getFilteredModuleList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return Index.fromOneBased(model.getFilteredModuleList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static Module getModule(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return model.getFilteredModuleList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 1,
      "juandavinlie": 4,
      "-": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TrackrBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.Trackr;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroup;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * An utility class to help with building Trackr objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class TrackrBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private Trackr trackr;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public TrackrBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.trackr \u003d new Trackr();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public TrackrBuilder(Trackr trackr) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.trackr \u003d trackr;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Adds a new {@code Module} to the {@code Trackr} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public TrackrBuilder withModule(Module module) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        trackr.addModule(module);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Adds a new {@code TutorialGroup} to the {@code Trackr} that we are building."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public TrackrBuilder withTutorialGroup(TutorialGroup tutorialGroup, Module module) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        trackr.addTutorialGroup(tutorialGroup, module);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Adds a new {@code Student} to the {@code Trackr} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public TrackrBuilder withStudent(Student student, TutorialGroup tutorialGroup, Module module) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        trackr.addStudent(module, tutorialGroup, student);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public Trackr build() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return trackr;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 49,
      "-": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TutorialGroupBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "euzintan"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.tutorialgroup.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.tutorialgroup.TimeOfDay;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroup;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroupId;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "euzintan"
        },
        "content": "public class TutorialGroupBuilder {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public static final String DEFAULT_TUTORIAL_GROUP_ID \u003d \"B014\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public static final TimeOfDay DEFAULT_START_TIME \u003d new TimeOfDay(\"15:00\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public static final TimeOfDay DEFAULT_END_TIME \u003d new TimeOfDay(\"17:00\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public static final DayOfWeek DEFAULT_DAY_OF_WEEK \u003d new DayOfWeek(\"MON\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    private TutorialGroupId tutorialGroupId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    private TimeOfDay startTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    private TimeOfDay endTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    private DayOfWeek dayOfWeek;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     * Creates a {@code PersonBuilder} with the default details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public TutorialGroupBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        tutorialGroupId \u003d new TutorialGroupId(DEFAULT_TUTORIAL_GROUP_ID);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        startTime \u003d DEFAULT_START_TIME;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        endTime \u003d DEFAULT_END_TIME;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        dayOfWeek \u003d DEFAULT_DAY_OF_WEEK;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     * Initializes the ModuleBuilder with the data of {@code moduleToCopy}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public TutorialGroupBuilder(TutorialGroup tutorialGroupToCopy) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        tutorialGroupId \u003d tutorialGroupToCopy.getId();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        startTime \u003d tutorialGroupToCopy.getStartTime();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        endTime \u003d tutorialGroupToCopy.getEndTime();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        dayOfWeek \u003d tutorialGroupToCopy.getDayOfWeek();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public TutorialGroupBuilder withTutorialGroupId(String tutorialGroupId) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        this.tutorialGroupId \u003d new TutorialGroupId(tutorialGroupId);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     * Returns a TutorialGroupBuilder that builds a Tutorial Group with the specified startTime"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     * @param startTimeString"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public TutorialGroupBuilder withStartTime(String startTimeString) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        this.startTime \u003d new TimeOfDay(startTimeString);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     * Returns a TutorialGroupBuilder that builds a Tutorial Group with the specified startTime"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     * @param endTimeString"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public TutorialGroupBuilder withEndTime(String endTimeString) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        this.startTime \u003d new TimeOfDay(endTimeString);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     * Builds and returns a Tutorial Group with the specified attribute values"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public TutorialGroup build() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        return new TutorialGroup(tutorialGroupId, dayOfWeek, startTime, endTime);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "euzintan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "euzintan": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TutorialGroupUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.logic.commands.AddTutorialGroupCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroup;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "public class TutorialGroupUtil {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     * Returns an add command string for adding the {@code TutorialGroup}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    public static String getAddTutorialGroupCommand(TutorialGroup tutorialGroup) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        String correctArgument \u003d \"tg/B014 day/MON start/15:00 end/17:00\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "        return AddTutorialGroupCommand.COMMAND_WORD + \" \" + correctArgument;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalModules.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static seedu.address.testutil.TypicalTutorialGroups.getTutorialGroupList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.Trackr;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.module.ModuleId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seantaysl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seantaysl"
        },
        "content": " * A utility class containing a list of {@code Module} objects to be used in tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seantaysl"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "public class TypicalModules {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static final Module CS2100 \u003d new Module(new ModuleId(\"CS2100\"), getTutorialGroupList());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static final Module CS2103T \u003d new Module(new ModuleId(\"CS2103T\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static final Module CS2040 \u003d new Module(new ModuleId(\"CS2040\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final Module CS2030 \u003d new Module(new ModuleId(\"CS2030\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static Trackr getTypicalModuleList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        Trackr tr \u003d new Trackr();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        for (Module module: getTypicalModules()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            tr.addModule(module);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return tr;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Returns an {@code Trackr} with all the typical modules, tutorial groups and students."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static Trackr getTypicalTrackr() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Trackr trackr \u003d new Trackr();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        // populate modules with the same tutorial groups and students"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        for (Module module : getTypicalModules()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            trackr.addModule(module);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return trackr;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static List\u003cModule\u003e getTypicalModules() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CS2100, CS2103T, CS2040));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seantaysl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seantaysl": 8,
      "EthanTheGoondu": 10,
      "fanminj": 15,
      "juandavinlie": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalModulesPopulatedWithTutorialGroups.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "euzintan"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalStudents;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.testutil.TypicalTutorialGroups.T05;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import static seedu.address.testutil.TypicalTutorialGroups.getTutorialGroupList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.Trackr;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.module.ModuleId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "euzintan"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroup;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "euzintan"
        },
        "content": "public class TypicalModulesPopulatedWithTutorialGroups {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public static final Module CS2100 \u003d new Module(new ModuleId(\"CS2100\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public static final Module CS2103T \u003d new Module(new ModuleId(\"CS2103T\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public static final Module CS2040 \u003d new Module(new ModuleId(\"CS2040\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public static final Module CS2030 \u003d new Module(new ModuleId(\"CS2030\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public static Trackr getTypicalModuleList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        Trackr tr \u003d new Trackr();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        for (Module module: getTypicalModules()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            for (TutorialGroup tutorialGroup : TypicalTutorialGroups.getTutorialGroupList()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                if (!module.getUniqueTutorialGroupList().contains(tutorialGroup)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "euzintan"
        },
        "content": "                    module.addTutorialGroup(tutorialGroup);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "euzintan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            tr.addModule(module);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        return tr;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     * Returns an {@code Trackr} with all the typical modules, tutorial groups and students."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "euzintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public static Trackr getTypicalTrackr() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        Trackr trackr \u003d new Trackr();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        // populate modules with the same tutorial groups and students"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        for (Module module : getTypicalModules()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            trackr.addModule(module);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        for (TutorialGroup tutorialGroup : getTutorialGroupList()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            if (!CS2103T.getUniqueTutorialGroupList().contains(tutorialGroup)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "euzintan"
        },
        "content": "                trackr.addTutorialGroup(tutorialGroup, CS2103T);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        for (Student student : getTypicalStudents()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            if (!T05.getUniqueStudentList().contains(student)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "euzintan"
        },
        "content": "                trackr.addStudent(CS2103T, T05, student);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "euzintan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        return trackr;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "euzintan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    public static List\u003cModule\u003e getTypicalModules() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "euzintan"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CS2100, CS2103T, CS2040));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "euzintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "euzintan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "euzintan": 59,
      "juandavinlie": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalStudents.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.UniqueStudentList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * A utility class containing a list of {@code Student} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class TypicalStudents {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final Student ALEX \u003d new StudentBuilder()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withName(\"Alex Tan\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withEmail(\"alextan@u.nus.edu\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withPhone(\"91234567\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withTags(\"CS2103T\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withStudentId(\"A1234567X\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            .withAttendance(\"1\", \"2\", \"3\", \"6\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            .withParticipation(\"96\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final Student BENG \u003d new StudentBuilder()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withName(\"Ah Beng\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withEmail(\"abeng@u.nus.edu\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withPhone(\"81234567\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withTags(\"CS2103T\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withStudentId(\"A7654321B\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            .withAttendance(\"1\", \"2\", \"5\", \"13\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final Student CHARLIE \u003d new StudentBuilder()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withName(\"CHARLIE CHEN\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withEmail(\"ccharlie@u.nus.edu\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withPhone(\"82223333\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withTags(\"CS2103T\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withStudentId(\"A1928835B\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final Student DAVID \u003d new StudentBuilder()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withName(\"David Ong\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withEmail(\"dong@u.nus.edu\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withPhone(\"81320987\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            .withTags(\"CS2103T\", \"UTCP\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withStudentId(\"A1837538N\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            .withAttendance(\"1\", \"4\", \"3\", \"12\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            .withParticipation(\"24\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final Student ELIZABETH \u003d new StudentBuilder()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withName(\"Elizabeth Teo\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withEmail(\"eteo@u.nus.edu\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withPhone(\"89993333\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            .withTags(\"CS2103T\", \"DDP\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withStudentId(\"A1938563M\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            .withParticipation(\"100\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final Student FIONA \u003d new StudentBuilder()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withName(\"Fiona Chan\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withEmail(\"fionachan@u.nus.edu\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withPhone(\"82938378\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withTags(\"CS1231S\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .withStudentId(\"A2038468T\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            .withAttendance(\"1\", \"2\", \"4\", \"10\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private TypicalStudents() {} // prevents instantiation"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static UniqueStudentList getTypicalStudentList() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        UniqueStudentList sl \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Student student : getTypicalStudents()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            sl.addStudent(student);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return sl;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static List\u003cStudent\u003e getTypicalStudents() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALEX, BENG, CHARLIE, DAVID, ELIZABETH, FIONA));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 10,
      "fanminj": 63,
      "-": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalTutorialGroups.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalStudentList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.tutorialgroup.DayOfWeek;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.tutorialgroup.TimeOfDay;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroup;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.tutorialgroup.TutorialGroupId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import seedu.address.model.tutorialgroup.UniqueTutorialGroupList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": " * A utility class containing a list of {@code Module} objects to be used in tests."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "public class TypicalTutorialGroups {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final TutorialGroup T05 \u003d new TutorialGroup("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            new TutorialGroupId(\"T05\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            new DayOfWeek(\"MON\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            new TimeOfDay(\"13:00\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            new TimeOfDay(\"14:00\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            getTypicalStudentList()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    );"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final TutorialGroup B06 \u003d new TutorialGroup("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            new TutorialGroupId(\"B06\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            new DayOfWeek(\"THU\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            new TimeOfDay(\"12:00\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            new TimeOfDay(\"14:00\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    );"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final TutorialGroup S12 \u003d new TutorialGroup("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            new TutorialGroupId(\"S12\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            new DayOfWeek(\"FRI\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            new TimeOfDay(\"08:00\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            new TimeOfDay(\"10:30\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final TutorialGroup V04 \u003d new TutorialGroup("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            new TutorialGroupId(\"V04\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            new DayOfWeek(\"TUE\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            new TimeOfDay(\"09:00\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            new TimeOfDay(\"10:00\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    );"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Returns an {@code UniqueTutorialGroupList} with all the typical tutorial groups."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static UniqueTutorialGroupList getTutorialGroupList() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        UniqueTutorialGroupList tgl \u003d new UniqueTutorialGroupList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        for (TutorialGroup tutorialGroup: getTypicalTutorialGroups()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            tgl.addTutorialGroup(tutorialGroup);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return tgl;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static List\u003cTutorialGroup\u003e getTypicalTutorialGroups() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(T05, B06, S12, V04));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 48,
      "fanminj": 16
    }
  }
]
