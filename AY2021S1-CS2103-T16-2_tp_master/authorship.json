[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103-T16-2/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "* This is **a CS2103 Project done by Wei Jie, Joven and Javier from NUS**. It is called Insurance4insurance and is targeted for insurance agents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " to save the details of the clients and connections that they meet.\u003cbr\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  Example usages:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "  * Adding client\u0027s details into the app"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "  * Adding the different policies of the client."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "  * Deleting client\u0027s entries. "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "* The project makes use of an ongoing software project for a desktop application (called _AddressBook_) used for managing contact details and would fine-tune it"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "such that it can be used as a client tracking software for insurance agents."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "* At the end of the project, we would want to ensure that: "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "  * Our end product is a **working product** and can actually be used to record client information. "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "  * Our end product will have **no** bugs. "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "  * The project comes with a **reasonable number of tests**."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  * It comes with a **reasonable level of user and developer documentation**."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "* It is named `Insurance4Insurance` (`I4I` for short) because we thought that this app would be a form of insurance for insurance advisors such that they do not forget their clients."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "* For the detailed documentation of this project, see [here](https://ay2021s1-cs2103-t16-2.github.io/tp/)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "* Credits:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    * This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    * Professor Damith, Teaching Assistant Kim Saehyun and fellow peer reviewers who have graciously tested our app :)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 18,
      "-": 5,
      "WeiJie96": 1
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    archiveName \u003d \u0027Insurance4Insurance.jar\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "run {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 1,
      "-": 71,
      "WeiJie96": 4
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "### Fong Wei Jie"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "\u003cimg src\u003d\"images/weijie96.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "[github](https://github.com/WeiJie96)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "[portfolio](team/weijie96.md)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "* Role: Code Quality"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* Responsibilities: "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    * Looks after code quality, ensures adherence to coding standards, etc."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "### Javier Lim Xin Long"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "\u003cimg src\u003d\"images/ijavierja.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "[github](https://github.com/ijavierja)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "[portfolio](team/johndoe.md)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "* Role: Project Manager"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "* Responsibilities:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    * Deliverables and deadlines: Ensure project deliverables are done on time and in the right format. "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    * Scheduling and tracking: In charge of defining, assigning, and tracking project tasks."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "### Heng Jie Kai Joven"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "\u003cimg src\u003d\"images/joven-heng.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "[github](http://github.com/Joven-Heng)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "[portfolio](team/johndoe.md)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "* Role: Testing"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* Responsibilities: "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    * Ensures the testing of the project is done properly and on time."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ijavierja": 2,
      "Joven-Heng": 12,
      "-": 22,
      "WeiJie96": 8
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Coming soon."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Coming soon."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Coming soon."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Coming soon."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Coming soon."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Coming soon."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "### \\[Proposed\\] Priority Feature"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "The proposed priority feature would involve the UI javafx feature as well as a newly implemented field for the Clientlist.This field for the Clientlist would affect the UI of the ClientList. "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "There would be 4 settings for the priority feature: High, Medium, Low, Undefined. If a user never include any of the settings, it would default to undefined. The priority feature would change the entries in the Clientlist, changing the colors of the UI for each entry based on the priority assigned for the Client. "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "![Proposed UI](images/UIPriority.png)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "Firstly, the field would be added to the Person class. This would be similar to the method described in the tutorial:  https://nus-cs2103-ay2021s1.github.io/tp/tutorials/AddRemark.html, where instead of adding a command, we would be editing the add command to include an optional priority field. "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "Given below is an example usage scenario and how the priority mechanism behaves when a user is added. Note that this addition of users via addcommand is the same command used when the user launches the application for the first time. "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "Step 1. The user adds a command using addcommand and specifies the user. The addcommandparser will check if there was an empty string input for the priority field, if there is, we will set it as Undefined. If the user puts any other input other than the predefined inputs(H for high, M for medium, L for low), the user will get an error message. "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "Step 2: The addcommand parser will pass the command to the addcommand in the logic package to check if the user is a duplicated user or not.  If the person is a valid person, the person would be passed on to the UI."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "Step 3: In the UI, as it is an addCommand, the MainWindow will update the PersonListPanel, which will call the updateItem based on the Person and H. This will go to the PersonListViewCell, and would attempt to create a person class. "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "Step 4: To identify between the different levels of priority, I propose to use a PriorityParser class which would parse the PersonCard to identify the type of person it is and would adjust the GUI based on it. The results would then be used to create a new PersonCard class and with a custom GUI based on the priority of the individual."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "Step 5: This card would be returned back to the PersonListViewCell, updated on the PersonListPanel and finally shown in the Mainwindow. "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "The following sequence diagram shows how the Priority operation works:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "![Proposed Sequence Diagram](images/ImplementationSuggestionSequence.png)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "##### Aspect: How Priority feature works."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "* **Alternative 1 (current choice):** Create a parser to settle the image inside the UI class. "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "  * Pros: Decreased coupling, easier to find bugs."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "* **Alternative 2:** Do aside the parser, just put the switch cases inside the PersonListViewCell"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "  * Pros: Will use less memory (No need to show the parser field)."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "  * Cons: Increased coupling"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "### \\[Proposed\\] Policy feature"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "Policy (class) is a field in Person that is uniquely different from the current fields in Person"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ijavierja"
        },
        "content": " such as phone, address, email, etc. A Person can have up to a single Policy. "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ijavierja"
        },
        "content": " "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ijavierja"
        },
        "content": " Policy class contains 3 attributes: String name, String description."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "Prior to adding a Policy field to a Person, User creates the Policy objects "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "via `addp` (Add Policy Command). A collection stores these Policy objects to be referenced and"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ijavierja"
        },
        "content": " a json file stores Policy objects that are created. "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ijavierja"
        },
        "content": " "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ijavierja"
        },
        "content": " A user can then add one of these Policy objects as a field in a Person object by specifying with "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "  `z/ [POLICY_NAME]` during Add Command."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "  "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "Sequence diagram to create new Policy:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "\u003cimg src\u003d\"images/AddPolicySequenceDiagram.png\"/\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "Additionally, a new Command, ClearPolicyCommand will clear the collection of Policy classes"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "in the list to facilitate the management of Policy objects."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "When adding the Policy field to a Person object, the Policy name has to be correct, and"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "the Policy object should already be created."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "### Archive feature"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "The archive mechanism is facilitated by `ModelManager` and `Person`. `Person` contains an archive status, stored internally as `isArchive`. "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "`ModelManager` tracks the current viewing mode of the list of `Person`, which is either the active mode or archive mode, stored internally as `isArchiveMode`."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Additionally, `ModelManager` implements the following operations:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* `ModelManager#getIsArchiveMode()` — Gets the current archive mode."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* `ModelManager#setIsArchiveMode(...)` — Sets the current archive mode."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#getIsArchiveMode()` and `Model#setIsArchiveMode(...)` respectively."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Given below is an example usage scenario and how the archive mechanism behaves at each step."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Step 1. The user launches the application for the first time. The `ModelManager` will be initialized with the active mode with `isArchiveMode` set to `false`."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "For simplicity, we only show 2 example persons, `david` and `ben`, who are both not in the archive, i.e. their `isArchive` is `false`. "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "The user can view both of these persons as he is in the active mode."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "![Archive0](images/Archive0.png)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Step 2. The user executes `archive 2` command to archive the 2nd person (`ben`) in the client list. "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "The `archive` command creates a new `Person` with `isArchive` set to `true`, then calls `Model#setPerson(...)` to update the model."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "This is followed by `Model#updateFilteredPersonList(PREDICATE_SHOW_ALL_ACTIVE)` to view all the active persons, "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "where `PREDICATE_SHOW_ALL_ACTIVE` is used to filter `Person`s with `isArchive` set to `false`. "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "The 2nd person (`ben`) would be hidden from the user\u0027s current view, so he can only see `david`."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "![Archive1](images/Archive1.png)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "The following sequence diagram shows how the archive operation works:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "![ArchiveSequenceDiagram](images/ArchiveSequenceDiagram.png)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `ArchiveCommandParser` and `ArchiveCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Step 3. The user executes `list r/` to view the archive. "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "The `list r/` command calls `ModelManager#setIsArchiveMode(true)` to set the viewing mode to the archive mode, "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "followed by `Model#updateFilteredPersonList(PREDICATE_SHOW_ALL_ARCHIVE)` to view the archive."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "`PREDICATE_SHOW_ALL_ARCHIVE` is used to filter `Person`s with `isArchive` set to `true`. "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "This causes the user to only view archived persons, which is `ben` in this case."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "![Archive2](images/Archive2.png)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "The following activity diagram summarizes what happens when a user executes the archive command and list command:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "![ArchiveActivityDiagram](images/ArchiveActivityDiagram.png)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "##### Potential issues with other commands and Resolutions"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Since the archive is implemented using predicate filtering, it might potentially conflict with `FindCommand`, "
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "if it were to be implemented in future. However, this can be easily resolved using predicate composition with conjunction "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "(AND) logic, a method already available in `Java`’s `Predicate`s. "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "As an example, `predicate1` could be a filter for archive, and `predicate2` could be from the find command:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "```java"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Predicate\u003cPerson\u003e composedPredicate \u003d predicate1.and(predicate2);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "```"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "##### Aspect: How archive executes"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* **Alternative 1 (current choice):** Uses a variable in `Person` to track if he is in the archive."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "  * Cons: With an additional variable in the `Person` class, we must ensure that the reading and updating of the variable is correct. "
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "  A `Person` would also “know” that he is archived or not, which may not be that ideal."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* **Alternative 2:** Have a separate storage for archive."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "  * Pros: A more intuitive solution, and only `Storage`-related modules \"knows\" about the presence of an archive."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "  * Cons: We must ensure that the implementation the reading and saving of the 2 different storages, and updating of the models are correct, which is time-consuming."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Insurance Agents - Financial Advisors"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Insurance agents represent insurance companies, such as AIA and Prudential, as their sales person. They bring in "
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "clients and promote various insurance schemes. Their clients could be individuals or other businesses. Insurance agents’ "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "mode of conducting their job generally involves talking directly to these clients in a face-to-face setting and giving "
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "their pitch. "
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Insurance agents need to be familiar with their clients’ profile, such as their family status, financial needs and "
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "interests, to better promote their insurance schemes as it gives their pitch a personal touch. "
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "These users are likely used to typing notes and formulas to manage their clients into a tracker, for example in  Excel "
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "notebooks. They would add in attributes of users into the tracker, and add in additional functionalities using formulas. "
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Thus, they are likely to be comfortable in using a command-line interface."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "**Value proposition**: "
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Remembering people like a good neighbour."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Successful Financial advisors can have more than a hundred clients. They may not be able to remember the personal "
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "details of all their clients at once. This product aims to provide a command-line interface for the financial agent to "
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "record the details of the client, from their scheme details, such as the policies they own, to their personal details, "
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "like their hobbies. As such, they would be better prepared for meetings and are able to provide a personal touch when "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "giving their pitch."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "| Priority | As a/an …                                  | I can …                        | So that I can…                                                         |"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "| `* * *`  | regular user                               | add more clients               | handle more clients                                                    |"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "| `* * *`  | regular user                               | delete a client                | account for my clients who churned                                     |"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "|  `* *`   | first-time user                            | get some help on using the product | know how to use it                                                 |"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "| `* * *`  | first-time user                            | view all (active) clients      | get a general overview                                                 |"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "| `* * *`  | first-time user                            | load existing data that I have on user personal details |                                               |"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "| `* * *`  | regular user                               | save my client information     | save my edits for next time use                                        |"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "| `* *`    | expert user                                | archive clients                | hide clients whom I am no longer working with                          |"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "| `* *`    | expert user                                | view all archived clients      | see the clients that I am no longer working with                       |"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "| `* *`    | expert user                                | unarchive clients              | display them when I start working with them again                      |"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "| `* *`    | regular user                               | clear all clients              | delete irrelevant client data when I move to a new company             |"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "(For all use cases below, the **System** is `I4I` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "**UC01 - User adds client**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "1. User chooses to add new client with client details."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "2. System gives success message."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* 1a. User enters wrong add command format."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    * 1a1. System gives corresponding error message."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* 1b. User attempts to add clients in the archive mode."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "   "
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    * 1b1. System gives corresponding error message."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* 1c. User attempts to add an existing client."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "   "
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    * 1c1. System gives corresponding error message."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "      "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "**UC02 - User deletes client**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "1. User requests to \u003cins\u003elist all active clients (UC03)\u003c/ins\u003e or to \u003cins\u003elist all archived clients (UC04)\u003c/ins\u003e."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "2. User chooses to delete particular client."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "3. System gives success message."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* 1a. The list is empty."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* 2a. User enters wrong delete command format."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    * 2a1. System gives corresponding error message."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* 2b. User enters invalid index."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    * 2b1. System gives corresponding error message."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "**UC03 - User lists all active clients**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "1. User chooses to list all active clients."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "2. System shows all active clients."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* 1a. User enters wrong list command format (for active clients)."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    * 1a1. System gives corresponding error message."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "**UC04 - User lists all archived clients**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "1. User chooses to list all archived clients."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "2. System shows all archived clients."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* 1a. User enters wrong list command format (for archived clients)."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    * 1a1. System gives corresponding error message."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "**UC05 - User requests for help**"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "1. User requests for help on how to use the system."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "2. System gives a guide to help user."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* 1a. User enters wrong help command format."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    * 1a1. System gives corresponding error message."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "      "
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "**UC06 - User archives client**"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "1. User requests to \u003cins\u003elist all active clients (UC03)\u003c/ins\u003e."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "2. User chooses to archive particular active client."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "3. System gives success message."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* 1a. The list is empty."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* 2a. User enters wrong archive command format."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    * 2a1. System gives corresponding error message."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "      "
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* 2b. User enters invalid index."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    * 2b1. System gives corresponding error message."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "**UC07 - User unarchives client**"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "1. User requests to \u003cins\u003elist all archived clients (UC04)\u003c/ins\u003e."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "2. User chooses to unarchive particular archived client."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "3. System gives success message."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* 1a. The list is empty."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* 2a. User enters wrong unarchive command format."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    * 2a1. System gives corresponding error message."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "      "
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* 2b. User enters invalid index."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    * 2b1. System gives corresponding error message."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "      "
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "**UC08 - User clears client list**"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "1. User chooses to clear the active client list and archived client list."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "2. System gives success message."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    Use case ends.  "
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    "
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "* 1a. The list is empty."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "  "
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "**UC09 - User quits app**"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "1. User chooses to quit app."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "2. System exits app and closes the interface."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "  "
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "      "
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "      "
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` installed."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "2.  Should be able to store up to 1000 clients."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) "
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* **Insurance4Insurance**: Name of the product."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* **I4I**: Short for Insurance4Insurance, the name of the product."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* **Active Client**: A client not in the archive."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* **Active List** / **Active Client List**: List of clients not in the archive."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* **Active Mode**: The mode which allows users to view the active list."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* **Archive Mode**: The mode which allows users to view the archive."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "   1. Download the jar file and copy into an empty folder."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "   2. Launch the app by using the `java -jar` command (do not use double-clicking). Expected: Shows the GUI with a set of sample clients. The window size may not be optimum."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "   2. Re-launch the app by using the `java -jar` command.\u003cbr\u003e"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "      Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "      "
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "      "
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " ### Listing all active clients"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " "
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " 1. Listing all active clients"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " "
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    1. Prerequisites: At least one active client (for easier comparison)."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " "
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    2. Test case: `list`\u003cbr\u003e"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "       Expected: All active clients listed. Success message shown. \"Active Client List\" is shown below the success message."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "       "
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "       ![List All Active Clients](images/listAllActiveClients.png)"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " "
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " "
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "### Listing all archived clients"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " "
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " 1. Listing all archived clients"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " "
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    1. Prerequisites: At least one archived client (for easier comparison). See [Archiving a Client](#archiving-a-client) for details on how to archive a client."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " "
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    2. Test case: `list r/`\u003cbr\u003e"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "       Expected: All archived clients listed. Success message shown. \"Archived Client List\" is shown below the success message."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "       "
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "       ![List All Archived Clients](images/listAllArchivedClients.png)"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "### Archiving a client"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "1. Archiving a client while active clients are being shown"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "   1. Prerequisites: List all active clients (see [List Active Clients](#listing-all-active-clients)). At least one active client."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "   2. Test case: `archive 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "      Expected: "
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "      First client is archived, and is no longer shown in the active list. Details of the archived client shown in the status message."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "      Upon listing all archived clients (see [List Archived Clients](#listing-all-archived-clients)), the archived client can be seen."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "   3. Test case: `archive 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "      Expected: No client is archived. Error details shown in the status message."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "   4. Other incorrect archive commands to try: `archive`, `archive x`, `...` (where x is larger than the active list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "### Unarchiving a client"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "1. Unarchiving a client while archived clients are being shown"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "   1. Prerequisites: List all archived clients (see [List Archived Clients](#listing-all-archived-clients)). At least one archived client."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "   2. Test case: `unarchive 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "      Expected: "
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "      First client is unarchived, and is no longer shown in the archive. Details of the unarchived client shown in the status message."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "      Upon listing all active clients (see [List Active Clients](#listing-all-active-clients)), the unarchived client can be seen."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "   3. Test case: `unarchive 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "      Expected: No client is unarchived. Error details shown in the status message."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "   4. Other incorrect unarchive commands to try: `unarchive`, `unarchive x`, `...` (where x is larger than the archive size)\u003cbr\u003e"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "### Deleting a client"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "1. Deleting a client while active clients are being shown"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "   1. Prerequisites: List all active clients (see [List Active Clients](#listing-all-active-clients)). At least one active client."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "   2. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "      Expected: "
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "      First client is deleted, and is no longer shown in the active list. Details of the deleted client shown in the status message."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "      "
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "   3. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "      Expected: No client is deleted. Error details shown in the status message."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "   4. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the active list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "   "
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "   5. Another similar test to try: Deleting a client while archived clients are being shown"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     "
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "### Displaying help"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " "
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " 1. Displaying help"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " "
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    1. Prerequisites: Internet access."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    2. Test case: `help`\u003cbr\u003e"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "       Expected: Success message shown. Also shows a popup explaining how to access the User Guide. The URL can be copied with \"Copy URL\"."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "       "
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "       ![help message](images/helpMessage.png)"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "       "
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "       Upon pasting the URL into the browser, the User Guide is displayed."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "       "
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     "
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "**TO UPDATE BELOW**"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 19,
      "Joven-Heng": 52,
      "-": 217,
      "WeiJie96": 304
    }
  },
  {
    "path": "docs/Documentation.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Documentation guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "**Setting up and maintaining the project website:**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* We use [**Jekyll**](https://jekyllrb.com/) to manage documentation."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "* The `docs/` folder is used for documentation."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* To learn how set it up and maintain the project website, follow the guide [_[se-edu/guides] **Using Jekyll for project documentation**_](https://se-education.org/guides/tutorials/jekyll.html)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "**Style guidance:**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* Follow the [**_Google developer documentation style guide_**](https://developers.google.com/style)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "* Also relevant is the [_[se-edu/guides] **Markdown coding standard**_](https://se-education.org/guides/conventions/markdown.html)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "**Diagrams:**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* See the [_[se-edu/guides] **Using PlantUML**_](https://se-education.org/guides/tutorials/plantUml.html)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "* Some diagrams were created with [**Powerpoint**](https://www.microsoft.com/en-sg/microsoft-365/powerpoint), one can learn powerpoint using the following guide [**Microsoft Powerpoint Support**](https://support.microsoft.com/en-us/powerpoint)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "* Alternatively, a free alternative to powerpoint would be [**Google Slides**](https://www.google.com/slides/about/)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "**Converting a document to the PDF format:**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* See the guide [_[se-edu/guides] **Saving web documents as PDF files**_](https://se-education.org/guides/tutorials/savingPdf.html)"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 4,
      "-": 25
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Insurance4Insurance (I4I) is an app for insurance agents to manage clients. It helps manage client profile information "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "for insurance agents to remember personal details about his/her client. It is optimized for use via a Command Line "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Interface (CLI) while still having the benefits of a Graphic User Interface (GUI). "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "1. Ensure you have Java `11` installed in your Computer. "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "   You can check the version by opening a command window, and running the `java -version` command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "2. Download the latest `[CS2103-T16-2][Insurance4Insurance].jar` from [here](https://github.com/AY2021S1-CS2103-T16-2/tp/releases)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "3. Copy the file to the **empty folder** you want to use as the _home folder_."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "4. Launch the app by using the `java -jar` command (do not use double-clicking). "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "   The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "   "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "5. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "   * **`list`** : Lists all active clients."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "   * **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 l/h` : "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "   Adds a contact named `John Doe` to the client list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "   * **`delete`**`3` : Deletes the 3rd client shown in the current list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "6. Refer to the [Commands](#commands) below for details of each command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "## Commands"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "  e.g `n/NAME [s/CLIENT_SOURCE]` can be used as `n/John Doe s/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "  e.g. `[s/CLIENT_SOURCE]…​` can be used as ` ` (i.e. 0 times), `s/friend`, `s/friend s/family` etc."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "**:information_source: Notes and terminologies on archiving:**\u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* Clients not in the archive are said to be \"active clients\" in the \"active list\"."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* Upon starting up the app, users would see the active list by default."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* In the \"active mode\", users can view the active list. In the \"archive mode\", users can view the archive."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "### Viewing help : `help`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Shows a message explaining how to access the User Guide."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "![help message](images/helpMessage.png)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "### Adding a client : `add`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Adds a client to I4I\u0027s active list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "A client can have any number of client sources (including 0)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "Format: `add n/NAME [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [o/NOTE] [s/CLIENT_SOURCE]…​ [l/PRIORITY] [pn/POLICY_NAME]`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "Examples: "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "   "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "   * `add n/Cai Shen Ye`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "   * `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 l/h`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "   * `add n/Betsy Crowe s/friend s/enemy from jac e/betsycrowe@example.com a/Newgate Prison p/1234567 "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "   o/This client is new. l/high pn/Life Time Policy`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Notes: "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* If the priority field is empty, I4I will set the priority of the client to undefined. "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    See [Priority Feature](#priority-feature) for more information."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* The policy must already exist in the policy list. You can do so by using the"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "`addp` command. See [Add Policy Command](#adding-a-policy--addp) for more information."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* This command should not be used when viewing the archived client list.  "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "### Adding a policy : `addp`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Adds a Policy into the policy list."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Format : `addp pn/POLICY_NAME pd/POLICY_DESCRIPTION`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Examples :"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* `addp pn/Medishield pd/Covers COVID`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Note :"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* Policy added must not have the same name as an existing policy."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "### Listing all active clients : `list`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Lists the active clients in I4I."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "### Archiving an active client : `archive`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Archives the client at the given index."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Format: `archive CLIENT_INDEX`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Example: `list` followed by `archive 2` archives the 2nd active client in I4I."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Notes: "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* Archives the client at the specified `INDEX`."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* The index refers to the index number shown in the displayed client list."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* The index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* This command should not be used in the archive mode."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "### Listing all archived clients : `list r/`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Lists the archived clients in I4I."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Format: `list r/`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "### Unarchiving an archived client : `unarchive`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Unarchives the client at the given index."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Format: `unarchive CLIENT_INDEX`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Example: `list r/` followed by `unarchive 2` unarchives the 2nd archived client in I4I."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Notes: "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* Unarchives the client at the specified `INDEX`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* The index refers to the index number shown in the displayed client list."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* The index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* This command should not be used in the active mode."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "### Deleting a client : `delete`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Deletes the client at the given index."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "Format: `delete CLIENT_INDEX`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Example: `list` followed by `delete 2` deletes the 2nd active client in I4I."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "Notes: "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* Deletes the client at the specified `INDEX`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* The index refers to the index number shown in the displayed client list."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "* The index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "### Clearing all clients : `clear`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Clears all entries from the client list."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e **Warning:**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "This command clears all clients, from both the active list and the archive."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Notes: "
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* This command does not clear the policy list."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "### Clearing all policies : `clearp`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "Clears all entries from the policy list."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "Format : `clearp`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "### Exiting the program : `exit`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving the data"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "## Additional Features"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "### Priority Feature"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "There are four priority settings to the priority feature - Undefined, Low, Medium and High."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "I4I would show different colored bars at the right of each client depending on the priority assigned to each client."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "They are: "
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " "
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "|Priority Type   |Syntax  |Picture   |"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "|---|---|---|"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "|Undefined   |`l/undefined`,`l/u`, `l/U`   |![Undefined Priority](images/Priority Bar/UndefinedPriority.png)  |"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "|Low   |`l/low`,`l/l`, `l/L`    |![Low Priority](images/Priority Bar/LowPriority.png)   |"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "|Medium   |`l/medium`,`l/m`, `l/M`    |![Medium Priority](images/Priority Bar/MediumPriority.png)   |"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "|High   |`l/high`,`l/h`, `l/H`    |![High Priority](images/Priority Bar/HighPriority.png)   |"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "Note: "
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "* If a client is not assigned a priority, I4I would automatically assign an undefined priority to the client."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "* Currently, one can only set the priority on adding the client. "
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "Example: "
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* `add n/Jojo l/h` would add a client named Jojo with a high priority. "
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* `add n/Giorno` would add a client named Giorno with an undefined priority."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "### Policy Feature"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Insurance policies belonging to the user\u0027s company can be added into I4I\u0027s policy list."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "A client can then be added with the corresponding policy."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "Policies have a name and a description."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "The policy list is also saved to the hard disk."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "Currently, 2 commands, `addp` \u0026 `clearp`, are used to control the policy list."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "### Archive Feature"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "The archive is meant as a way to store clients which may not be currently relevant to the user. "
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "For example, clients which are no longer managed by the user can be stored in the archive, with the `archive` command. "
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "The user may decide not to delete the client straight away, "
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "in case they happen to start interacting again, so the users can store them in the archive."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "The archive has a separate view from the active list, so that the user would not be distracted by archived clients. "
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "The default view upon starting up the app is the active list."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "The user has the option to switch the view to the archive if needed, with `list r/`. "
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "They can also switch the view back to the active list with `list`."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "The user can unarchive an archived client, for which case the client would become active, with `unarchive`."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "**Q**: How do I transfer my data to another computer?"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "**A**: Install the app in the other computer, and overwrite the empty data files it creates with the files that contain "
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "the data of your previous I4I home folder. By default, the 2 data files are named `clientlist.json` and `policylist.json`."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "**Add** | `add n/NAME [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [o/NOTE] [s/CLIENT_SOURCE]…​ [l/PRIORITY]` \u003cbr\u003ee.g., `add n/Betsy Crowe e/betsycrowe@example.com a/Newgate Prison p/1234567 o/This client is new. s/friend from jc s/Jack\u0027s Girlfriend l/h`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "**Add Policy** | `addp pn/POLICY_NAME pd/POLICY_DESCRIPTION` \u003cbr\u003ee.g., `addp pn/Medishield pd/Covers COVID`"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "**Archive** | `archive INDEX`\u003cbr\u003e e.g., `archive 3`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "**Clear Clients** | `clear`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "**Clear Policies** | `clearp`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "**Delete** | `delete INDEX`\u003cbr\u003e e.g., `delete 3`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "**Exit** | `exit`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "**List Active Clients** | `list`"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "**List Archived Clients** | `list r/`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "**Help** | `help`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "**Unarchive** | `unarchive INDEX`\u003cbr\u003e e.g., `unarchive 3`"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 36,
      "Joven-Heng": 22,
      "-": 110,
      "WeiJie96": 126
    }
  },
  {
    "path": "docs/diagrams/AddPolicySequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "participant \":ClientListParser\" as ClientListParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "participant \":AddPolicyCommandParser\" as AddPolicyCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "participant \"a:AddPolicyCommand\" as AddPolicyCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "[-\u003e LogicManager : execute(\"addp n/ Star Assure d/ Protection against death and terminal illness\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "LogicManager -\u003e ClientListParser : parseCommand(\"addp n/ Star Assure d/ Protection against death and terminal illness\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "activate ClientListParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "create AddPolicyCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "ClientListParser -\u003e AddPolicyCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "activate AddPolicyCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "AddPolicyCommandParser --\u003e ClientListParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "deactivate AddPolicyCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "ClientListParser -\u003e AddPolicyCommandParser : parse(\"n/ Star Assure d/ Protection against death and terminal illness\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "activate AddPolicyCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "create AddPolicyCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "AddPolicyCommandParser -\u003e AddPolicyCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "activate AddPolicyCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "AddPolicyCommand --\u003e AddPolicyCommandParser : a"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "deactivate AddPolicyCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "AddPolicyCommandParser --\u003e ClientListParser : a"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "deactivate AddPolicyCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "AddPolicyCommandParser -[hidden]-\u003e ClientListParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "destroy AddPolicyCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "ClientListParser --\u003e LogicManager : a"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "deactivate ClientListParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "LogicManager -\u003e AddPolicyCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "activate AddPolicyCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "AddPolicyCommand -\u003e Model : addPolicy(\"Star Assure\", \"Protection against death and terminal illness\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "Model --\u003e AddPolicyCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "AddPolicyCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "CommandResult --\u003e AddPolicyCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "AddPolicyCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "deactivate AddPolicyCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 69
    }
  },
  {
    "path": "docs/diagrams/ArchiveActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ":User starts app for the first time;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ":User views 2 clients in active list;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "if () then ([User executes view archived clients])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    :User views 0 clients in archive;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    :User attempts to archive"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    client while in archive mode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    :User views error;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    :User archives client;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    :User views 1 client in active list;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    :User executes view archived clients;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    :User views 1 client in archive;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "endif"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "stop"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "WeiJie96": 24
    }
  },
  {
    "path": "docs/diagrams/ArchiveSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "participant \":ArchiveCommandParser\" as ArchiveCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "participant \"a:ArchiveCommand\" as ArchiveCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "participant \"p:Person\" as Person MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "[-\u003e LogicManager : execute(\"archive 2\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"archive 2\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "create ArchiveCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "AddressBookParser -\u003e ArchiveCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "activate ArchiveCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "ArchiveCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "deactivate ArchiveCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "AddressBookParser -\u003e ArchiveCommandParser : parse(\"2\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "activate ArchiveCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "create ArchiveCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "ArchiveCommandParser -\u003e ArchiveCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "activate ArchiveCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "ArchiveCommand --\u003e ArchiveCommandParser : a"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "deactivate ArchiveCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "ArchiveCommandParser --\u003e AddressBookParser : a"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "deactivate ArchiveCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "ArchiveCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "destroy ArchiveCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "AddressBookParser --\u003e LogicManager : a"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "LogicManager -\u003e ArchiveCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "activate ArchiveCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "create Person"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "ArchiveCommand -\u003e Person"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "activate Person"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Person --\u003e ArchiveCommand : p"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "deactivate Person"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "ArchiveCommand -\u003e Model : setPerson(p)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Model --\u003e ArchiveCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "ArchiveCommand -\u003e Model : updateFilteredPersonList(PREDICATE_SHOW_ALL_ACTIVE)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Model --\u003e ArchiveCommand"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "ArchiveCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "deactivate ArchiveCommand"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "ArchiveCommand -[hidden]-\u003e LogicManager"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "destroy ArchiveCommand"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "WeiJie96": 78
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "Interface ReadOnlyClientList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "Class ClientList"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "Class ReadOnlyClientList"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Package Person {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "Class Person {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "isArchived"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class Address"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class Email"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Class Phone"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Class UniquePersonList"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "Class Note"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "Class Priority"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "Package ClientSource {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "Class ClientSource"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "Package Policy {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "Class Policy"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "Class PolicyName"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "Class PolicyDescription"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "Class PolicyList"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "ClientList .up.|\u003e ReadOnlyClientList"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "ModelManager o--\u003e \"1\" ClientList"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "ClientList *--\u003e \"1\" UniquePersonList"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "UniquePersonList o--\u003e \"*\" Person"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Name"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "Person *--\u003e \"0..1\" Phone"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "Person *--\u003e \"0..1\" Email"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "Person *--\u003e \"0..1\" Address"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "Person *--\u003e \"*\" ClientSource"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "Person *--\u003e \"0..1\" Policy"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "Person *--\u003e \"0..1\" Note"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "Person *--\u003e Priority"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Name -[hidden]right-\u003e Phone"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Phone -[hidden]right-\u003e Address"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Address -[hidden]right-\u003e Email"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager --\u003e\"1\" Person : filtered list"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "ModelManager o--\u003e \"1\" PolicyList"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "PolicyList o--\u003e \"*\" Policy"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "Policy *--\u003e PolicyName"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "Policy *--\u003e PolicyDescription"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 34,
      "-": 43
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "Interface ClientListStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "Interface PolicyListStorage\u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "Class JsonClientListStorage"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "Class JsonPolicyListStorage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "StorageManager .up.|\u003e Storage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "StorageManager o--\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "StorageManager o--\u003e PolicyListStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "StorageManager o--\u003e ClientListStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "JsonUserPrefsStorage .up.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "JsonClientListStorage .up.|\u003e ClientListStorage"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "JsonClientListStorage ..\u003e JsonSerializableClientList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "JsonSerializableClientList ..\u003e JsonAdaptedPerson"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "JsonAdaptedPerson ..\u003e JsonAdaptedClientSource"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "JsonPolicyListStorage ..up|\u003e PolicyListStorage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "JsonPolicyListStorage ..\u003e JsonSerializablePolicyList"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "JsonSerializablePolicyList ..\u003e JsonAdapatedPolicy"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 17,
      "-": 14
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class PersonListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class PersonCard"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Class ArchiveModeBox"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e PersonListPanel"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "MainWindow *-down-\u003e ArchiveModeBox"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "PersonListPanel -down-\u003e PersonCard"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "PersonListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "PersonCard --|\u003e UiPart"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "ArchiveModeBox --|\u003e UiPart"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "PersonCard ..\u003e Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "PersonListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "StatusBarFooter -[hidden]left- ArchiveModeBox"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 60,
      "WeiJie96": 5
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "title: Insurance4Insurance (I4I)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103-T16-2/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "**Insurance4Insurance (I4I) is an app for insurance agents to manage clients.** "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* If you are interested in using I4I, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* If you are interested about developing I4I, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "[JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "WeiJie96": 8
    }
  },
  {
    "path": "docs/team/ijavierja.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "title: Javier\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "## Project: Insurance4Insurance (I4I)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "Insurance4Insurance (I4I) is a desktop app for insurance agents to manage clients.  "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "It is optimized for use via a CLI, while still having the benefits of a GUI. "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "* **New Feature**: Create a list of policies the company has and allocate them to clients."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "  * What it does : User can create a list of policies and link them to his clients, so that the user can track the policy the client has bought. "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "  * Justification: This feature is especially useful for insurance agents because it gives a convenient method to track his client\u0027s policy for any follow-ups or claims."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "  * Highlights: This enhancement stores policies as a policy list in a separate json file from the client list. This makes it easier to reference the policy data that has already been input. Thus, the feature provides an alternative, unique template for entering fields for client other than simple String-Class fields."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "  "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dijavierja\u0026tabRepo\u003dAY2021S1-CS2103-T16-2%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    * **Coming Soon**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    * Added documentation for the following features: **Coming Soon**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of the following features: **Coming Soon**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    * **Coming Soon**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    * Added implementation details of the `Policy` feature."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    * **Coming Soon**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): **Coming Soon**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "  * Contributed to forum discussions (examples: **Coming Soon**)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: **Coming Soon**)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "  * Reported bugs and suggestions in AB3 (examples: **Coming Soon**)"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 37
    }
  },
  {
    "path": "docs/team/joven.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "title: Joven Heng\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "## Project: Insurance4Insurance"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "Insurance4Insurance (I4I) is a desktop app for insurance agents to manage clients.  "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "It is optimized for use via a CLI, while still having the benefits of a GUI. "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "* **New Feature**: Priority Feature"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "  * What it does: The priority feature serves a dual purpose, which is to allow an agent to quickly identify the priorities of different clients visually and which section of the "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "  client list one is on. "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "  * Justification: Insurance agents would have to prioritise different clients based on real world factors such as potential to purchase products or"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "  to provide leads for the agent. This feature would be a quick way for the agent to quickly identify different clients without having to sieve through"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "  chunks of texts from each client. This is extremely useful when the agent would be doing cold calls and can easily sieve through a large number of"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "  potential clients, to only select those that are the most likely to give him leads. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "  * Highlights: \u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "  Although the idea of the priority feature seemed simple at first glance - change color for clients with different priorities, there were a few challenges that came"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "  with it. "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    * Firstly, there was the user experience side where changing the entire person card would make it less professional and overbearing for the user. There were concerns that simply changing the color of the person"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    card will be quite blinding since there would be multiple colors due to multiple priority cards, but at the same time, if a small indicator or text color were to be changed, it may not be obvious to the user "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    that the priority was changed. Hence, I decided on this rectangular implementation."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    * Secondly, the actual implementation involved tweaking the fxml files in personcard. It was not as simple as just adding a single rectangle into the personcard field or a list. "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    This is because the rectangle is immutable and would not change size based on the size of the GUI. There were many workarounds for this which involved implementing a new rectangle"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    class. But I realised that one can just extend the personcard with a region followed by a Hbox, and coloring the Hbox. This ensures that the priority indicator rectangle would change "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    size based on the size of the GUI. "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    * Lastly, I wanted to tie this in with another feature that my teammate did since our UI still looked like the basic AB3 UI. "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    Hence, I decided to change the color of the priority indicator when we are in a different archived list, making it easier for one to realise that they are in a different list intuitively. "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "  * Credit: Idea for using a region field to ensure that the size of the rectangles do not change even if the app size is scaled up. [Link](https://stackoverflow.com/questions/39626621/automatic-resizing-of-rectangles-in-a-pane-using-java-fx-8)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dt16\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dzoom\u0026zA\u003dJoven-Heng\u0026zR\u003dAY2021S1-CS2103-T16-2%2Ftp%5Bmaster%5D\u0026zACS\u003d272.1138211382114\u0026zS\u003d2020-08-14\u0026zFS\u003dt16\u0026zU\u003d2020-11-05\u0026zMG\u003dfalse\u0026zFTF\u003dcommit\u0026zFGS\u003dgroupByRepos\u0026zFR\u003dfalse)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "* **Enhancements to existing features**: Note Feature"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "  * What it does: The note feature allows an agent to add short notes regarding a user when the agent is adding a client to the clientlist. "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "  * Justification: As insurance agents would have to deal with many clients over the course of just one day, the notes feature allows the agent to quickly add small notes"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "      to clients that the agent has added."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "      "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "* **Team Task**: Morphed AB3 to I4I"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "  * What it does: Changed the names and app icon of the existing AB3 class and methods to I4I."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "  * Justification: To give a personalised brand for the app and make it different from the AB3. "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "  * Highlights: Changed all references of AddressBook/AB3 to ClientList/I4I in all instances of the code, class names and all documentation except for the tutorials."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "  * Credits: flaticon for the (icon)[https://www.flaticon.com/free-icon/family_3076656]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    * Added documentation for the following features: `Priority` and `add`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of the following features:`clear` and `exit`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    * Added implementation details and manual testing of the `priority` feature."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    * Added manual testing details for the `add`, `exit` and `clear` commands."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    * Tweaked the logic and UI design diagram to match our current project."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    * Did cosmetic tweaks on the sections of Documentation, logging, testing, configuration, dev-ops to ensure they fit our project."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [#96](https://github.com/AY2021S1-CS2103-T16-2/tp/pull/96), [#160](https://github.com/AY2021S1-CS2103-T16-2/tp/pull/160) [#194](https://github.com/AY2021S1-CS2103-T16-2/tp/pull/194)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "  * Contributed to forum discussions [Automated Text UI testing issues](https://github.com/nus-cs2103-AY2021S1/forum/issues/7), [Helped to fix error regarding Smoke testing](https://github.com/nus-cs2103-AY2021S1/forum/issues/265)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (Done in the Mock Practical Exam for F09-1): [#136](https://github.com/AY2021S1-CS2103-F09-1/tp/issues/136) [#135](https://github.com/AY2021S1-CS2103-F09-1/tp/issues/135)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "  [#141](https://github.com/AY2021S1-CS2103-F09-1/tp/issues/141)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 64
    }
  },
  {
    "path": "docs/team/weijie96.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "title: Wei Jie\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "## Project: Insurance4Insurance (I4I)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Insurance4Insurance (I4I) is a desktop app for insurance agents to manage clients.  "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "It is optimized for use via a CLI, while still having the benefits of a GUI. "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* **New Feature**: Added the ability to archive clients."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "  * What it does: **Coming Soon**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "  * Justification: **Coming Soon**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "  * Highlights: **Coming Soon**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "  "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dWeiJie96\u0026tabRepo\u003dAY2021S1-CS2103-T16-2%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    * **Coming Soon**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    * Added documentation for the following features: **Coming Soon**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of the following features: **Coming Soon**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    * **Coming Soon**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    * Added implementation details of the `archive` feature."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    * **Coming Soon**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): **Coming Soon**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "  * Contributed to forum discussions (examples: **Coming Soon**)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: **Coming Soon**)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "  * Reported bugs and suggestions in AB3 (examples: **Coming Soon**)"
      }
    ],
    "authorContributionMap": {
      "WeiJie96": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import seedu.address.model.ClientList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import seedu.address.model.ReadOnlyClientList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.PolicyList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.util.SampleClientDataUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.util.SamplePolicyDataUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.storage.ClientListStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.storage.JsonClientListStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.storage.JsonPolicyListStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.storage.PolicyListStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing ClientList ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        ClientListStorage clientListStorage \u003d new JsonClientListStorage(userPrefs.getClientListFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        PolicyListStorage policyListStorage \u003d new JsonPolicyListStorage(userPrefs.getPolicyListFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        storage \u003d new StorageManager(clientListStorage, userPrefsStorage, policyListStorage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s client list and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * The data from the sample client list will be used instead if {@code storage}\u0027s client list is not found,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * or an empty client list will be used instead if errors occur when reading {@code storage}\u0027s client list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        Optional\u003cReadOnlyClientList\u003e clientListOptional;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        ReadOnlyClientList initialClientData;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            clientListOptional \u003d storage.readClientList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            if (!clientListOptional.isPresent()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                logger.info(\"Client List data file not found. Will be starting with a sample ClientList\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            initialClientData \u003d clientListOptional.orElseGet(SampleClientDataUtil::getSampleClientList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                    \"Client List data file not in the correct format. Will be starting with an empty ClientList\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            initialClientData \u003d new ClientList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                    \"Problem while reading from the Client List data file. Will be starting with an empty ClientList\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            initialClientData \u003d new ClientList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Optional\u003cPolicyList\u003e policyListOptional;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        PolicyList initialPolicyData;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            policyListOptional \u003d storage.readPolicyList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            if (!policyListOptional.isPresent()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                logger.info(\"Policy List data file not found. Will be starting with a sample PolicyList\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            initialPolicyData \u003d policyListOptional.orElseGet(SamplePolicyDataUtil::getSamplePolicyList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                    \"Policy List data file not in the correct format. Will be starting with an empty PolicyList\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            initialPolicyData \u003d new PolicyList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                    \"Problem while reading from the Policy List data file. Will be starting with an empty PolicyList\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            initialPolicyData \u003d new PolicyList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        initialClientData.updateClientListWithPolicyList(initialPolicyData);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return new ModelManager(initialClientData, userPrefs, initialPolicyData);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ClientList\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        logger.info(\"Starting ClientList \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Client List ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 39,
      "Joven-Heng": 13,
      "-": 158
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private static final String LOG_FILE \u003d \"clientlist.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import javafx.beans.property.BooleanProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import seedu.address.model.ReadOnlyClientList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Returns the ClientList."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @see seedu.address.model.Model#getClientList()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    ReadOnlyClientList getClientList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Returns the user prefs\u0027 client list file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    Path getClientListFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     * Returns the boolean value of the archive mode."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     * @return Boolean value of archive mode."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    boolean getIsArchiveMode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     * Returns the archive mode."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     * @return Archive mode."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    BooleanProperty getIsArchiveModeProperty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 6,
      "-": 44,
      "WeiJie96": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import javafx.beans.property.BooleanProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import seedu.address.logic.parser.ClientListParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import seedu.address.model.ReadOnlyClientList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private final ClientListParser clientListParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        clientListParser \u003d new ClientListParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        Command command \u003d clientListParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            storage.saveClientList(model.getClientList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            storage.savePolicyList(model.getPolicyList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public ReadOnlyClientList getClientList() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return model.getClientList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public Path getClientListFilePath() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return model.getClientListFilePath();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public boolean getIsArchiveMode() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        return model.getIsArchiveMode();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public BooleanProperty getIsArchiveModeProperty() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        return model.getIsArchiveModeProperty();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 2,
      "Joven-Heng": 10,
      "-": 75,
      "WeiJie96": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLIENTSOURCE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_POLICY_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.PolicyName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " * Adds a person to the client list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the client list. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            + \"[\" + PREFIX_CLIENTSOURCE + \"CLIENTSOURCE]...\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            + \"[\" + PREFIX_NOTE + \"NOTE]\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            + \"[\" + PREFIX_PRIORITY + \"PRIORITY]\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            + \"[\" + PREFIX_POLICY_NAME + \"POLICY_NAME]\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            + PREFIX_CLIENTSOURCE + \"friends \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            + PREFIX_CLIENTSOURCE + \"classmate \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            + PREFIX_NOTE + \"fakefriend \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            + PREFIX_PRIORITY + \" H \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            + PREFIX_POLICY_NAME + \" Life Plan\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            \"This person already exists in the client list\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            + \"Check the archive if you do not see the client in the active list\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public static final String MESSAGE_DISABLE_IN_ARCHIVE_MODE \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            \"This command is disabled in archive mode\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            + \"To add a new client, switch to active mode with the list command, then call the add command\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            + \"To archive an existing client, switch to active mode with the list command, \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            + \"then call the archive command\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static final String MESSAGE_POLICY_NOT_FOUND \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            \"The policy name is not found in the policy list.\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            + \"Please add the policy into the policy list prior to adding the person.\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            + \"You can add a new policy by using the addp command.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private final PolicyName policyName;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public AddCommand(Person person, PolicyName policyName) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        this.policyName \u003d policyName;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Person toAdd \u003d this.toAdd;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        if (model.getIsArchiveMode()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            throw new CommandException(MESSAGE_DISABLE_IN_ARCHIVE_MODE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        if (policyName !\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            if (!model.hasPolicy(policyName)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                throw new CommandException(MESSAGE_POLICY_NOT_FOUND);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            toAdd \u003d addPolicyToPerson(model);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Method updates person Policy from Policy List."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * policyName has to be in model\u0027s policyList."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private Person addPolicyToPerson(Model model) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Policy policy \u003d model.getPolicyList().getPolicy(policyName);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return new Person("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                toAdd.getName(),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                toAdd.getPhone(),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                toAdd.getEmail(),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                toAdd.getAddress(),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                toAdd.getClientSources(),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                toAdd.getNote(),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                toAdd.getIsArchive(),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                toAdd.getPriority(),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                policy"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        );"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return \"AddCommand \" + toAdd.toString() + \" Policy Name: \" + policyName.toString();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 49,
      "Joven-Heng": 4,
      "-": 57,
      "WeiJie96": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddPolicyCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_POLICY_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_POLICY_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "public class AddPolicyCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addp\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_POLICY \u003d \"This policy already exists in the policy list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a Policy to the policy list. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            + PREFIX_POLICY_NAME + \"POLICY NAME \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            + PREFIX_POLICY_DESCRIPTION + \"POLICY DESCRIPTION\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New policy added: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private final Policy toAdd;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Creates an AddPolicyCommand to add a Policy."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public AddPolicyCommand(Policy toAdd) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        if (model.hasPolicy(toAdd.getPolicyName())) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_POLICY);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        model.addPolicy(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                || (other instanceof AddPolicyCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddPolicyCommand) other).toAdd));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ArchiveCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ACTIVE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.model.clientsource.ClientSource;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.model.person.Priority;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " * Archives a person identified using its displayed index from the client list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "public class ArchiveCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"archive\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            + \": Archives the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public static final String MESSAGE_ARCHIVE_PERSON_SUCCESS \u003d \"Archived Person: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public static final String MESSAGE_DISABLE_IN_ARCHIVE_MODE \u003d \"This command is disabled in archive mode\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public ArchiveCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        if (model.getIsArchiveMode()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            throw new CommandException(MESSAGE_DISABLE_IN_ARCHIVE_MODE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Person personToArchive \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Person archivedPerson \u003d createArchivedPerson(personToArchive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        model.setPerson(personToArchive, archivedPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_ACTIVE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ARCHIVE_PERSON_SUCCESS, personToArchive));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    private static Person createArchivedPerson(Person personToArchive) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assert personToArchive !\u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assert !personToArchive.getIsArchive() : \"Person to archive should not already be in archive\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Name archivedName \u003d personToArchive.getName();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Phone archivedPhone \u003d personToArchive.getPhone();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Email archivedEmail \u003d personToArchive.getEmail();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Address archivedAddress \u003d personToArchive.getAddress();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Set\u003cClientSource\u003e archivedClientSources \u003d personToArchive.getClientSources();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Note archivedNote \u003d personToArchive.getNote();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Priority archivedPriority \u003d personToArchive.getPriority();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Policy archivedPolicy \u003d personToArchive.getPolicy();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        boolean archivedIsArchive \u003d true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        return new Person("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                archivedName,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                archivedPhone,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                archivedEmail,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                archivedAddress,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                archivedClientSources,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                archivedNote,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                archivedIsArchive,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                archivedPriority,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                archivedPolicy);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                || (other instanceof ArchiveCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ArchiveCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 4,
      "WeiJie96": 96
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import seedu.address.model.ClientList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " * Clears the client list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Client list has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        model.setClientList(new ClientList());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 4,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearPolicyCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "public class ClearPolicyCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearp\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Policy list has been cleared!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        model.clearPolicyList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        if (obj instanceof ClearPolicyCommand) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " * Deletes a person identified using its displayed index from the client list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 52,
      "WeiJie96": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLIENTSOURCE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.clientsource.ClientSource;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import seedu.address.model.person.Priority;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " * Edits the details of an existing person in the client list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            + \"[\" + PREFIX_CLIENTSOURCE + \"CLIENTSOURCE]...\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            + \"[\" + PREFIX_NOTE + \"NOTE]\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            + \"[\" + PREFIX_PRIORITY + \"PRIORITY]\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the client list.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Set\u003cClientSource\u003e updatedClientSources \u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                editPersonDescriptor.getClientSources().orElse(personToEdit.getClientSources());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        Note updatedNote \u003d editPersonDescriptor.getNote().orElse(personToEdit.getNote());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        Priority updatedPriority \u003d editPersonDescriptor.getPriority().orElse(personToEdit.getPriority());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return new Person("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                updatedName,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                updatedPhone,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                updatedEmail,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                updatedAddress,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                updatedClientSources,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                updatedNote,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                updatedPriority,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                personToEdit.getPolicy()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        );"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        private Set\u003cClientSource\u003e clientSources;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        private Note note;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        private Priority priority;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "         * A defensive copy of {@code clientSources} is used internally."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            setClientSources(toCopy.clientSources);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            setNote(toCopy.note);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            setPriority(toCopy.priority);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, clientSources, note);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "         * Sets {@code clientSources} to this object\u0027s {@code clientSources}."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "         * A defensive copy of {@code clientSources} is used internally."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        public void setClientSources(Set\u003cClientSource\u003e clientSources) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            this.clientSources \u003d (clientSources !\u003d null) ? new HashSet\u003c\u003e(clientSources) : null;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "         * Returns an unmodifiable clientsource set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code clientSources} is null."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        public Optional\u003cSet\u003cClientSource\u003e\u003e getClientSources() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            return (clientSources !\u003d null) ? Optional.of(Collections.unmodifiableSet(clientSources)) : Optional.empty();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        public void setNote(Note note) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            this.note \u003d note;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        public Optional\u003cNote\u003e getNote() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            return Optional.ofNullable(note);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        public void setPriority(Priority priority) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            this.priority \u003d priority;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        public Optional\u003cPriority\u003e getPriority() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            return Optional.ofNullable(priority);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                    \u0026\u0026 getClientSources().equals(e.getClientSources())"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                    \u0026\u0026 getNote().equals(e.getNote())"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                    \u0026\u0026 getPriority().equals(e.getPriority());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 28,
      "Joven-Heng": 31,
      "-": 207
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Client List as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " * Finds and lists all persons in client list whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 1,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ACTIVE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ARCHIVE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " * Lists all persons in the client list to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public static final String MESSAGE_SUCCESS_ACTIVE \u003d \"Listed all active persons\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public static final String MESSAGE_SUCCESS_ARCHIVE \u003d \"Listed all persons in archive\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    private final boolean isArchiveMode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     * Constructs list command, with default set to viewing active list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        this.isArchiveMode \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     * @param isArchiveMode indicates if the user wants to view the archive."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public ListCommand(boolean isArchiveMode) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        this.isArchiveMode \u003d isArchiveMode;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        model.setIsArchiveMode(isArchiveMode);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        if (isArchiveMode) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_ARCHIVE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_ARCHIVE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_ACTIVE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_ACTIVE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                || (other instanceof ListCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                \u0026\u0026 (isArchiveMode \u003d\u003d (((ListCommand) other).isArchiveMode)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 1,
      "-": 20,
      "WeiJie96": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UnarchiveCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ARCHIVE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.model.clientsource.ClientSource;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.model.person.Priority;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " * Unarchives a person identified using its displayed index from the client list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "public class UnarchiveCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"unarchive\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            + \": Unarchives the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public static final String MESSAGE_UNARCHIVE_PERSON_SUCCESS \u003d \"Unarchived Person: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public static final String MESSAGE_DISABLE_IN_ACTIVE_MODE \u003d \"This command is disabled in active mode\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public UnarchiveCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        if (!model.getIsArchiveMode()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            throw new CommandException(MESSAGE_DISABLE_IN_ACTIVE_MODE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Person personToUnarchive \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Person unarchivedPerson \u003d createUnarchivedPerson(personToUnarchive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        model.setPerson(personToUnarchive, unarchivedPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_ARCHIVE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_UNARCHIVE_PERSON_SUCCESS, personToUnarchive));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    private static Person createUnarchivedPerson(Person personToUnarchive) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assert personToUnarchive !\u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assert personToUnarchive.getIsArchive() : \"Person to unarchive should not already be active\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Name unarchivedName \u003d personToUnarchive.getName();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Phone unarchivedPhone \u003d personToUnarchive.getPhone();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Email unarchivedEmail \u003d personToUnarchive.getEmail();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Address unarchivedAddress \u003d personToUnarchive.getAddress();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Set\u003cClientSource\u003e unarchivedClientSources \u003d personToUnarchive.getClientSources();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Note unarchivedNote \u003d personToUnarchive.getNote();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Priority unarchivedPriority \u003d personToUnarchive.getPriority();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Policy unarchivedPolicy \u003d personToUnarchive.getPolicy();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        boolean unarchivedIsArchive \u003d false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        return new Person("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                unarchivedName,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                unarchivedPhone,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                unarchivedEmail,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                unarchivedAddress,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                unarchivedClientSources,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                unarchivedNote,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                unarchivedIsArchive,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                unarchivedPriority,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                unarchivedPolicy);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                || (other instanceof UnarchiveCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((UnarchiveCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 4,
      "WeiJie96": 96
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "WeiJie96": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLIENTSOURCE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_POLICY_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.clientsource.ClientSource;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import seedu.address.model.person.Priority;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.PolicyName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                        args,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                        PREFIX_NAME,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                        PREFIX_PHONE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                        PREFIX_EMAIL,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                        PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                        PREFIX_CLIENTSOURCE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                        PREFIX_NOTE,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                        PREFIX_PRIORITY,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                        PREFIX_POLICY_NAME);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).orElse(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).orElse(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).orElse(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Set\u003cClientSource\u003e clientSourceList \u003d ParserUtil"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                .parseClientSources(argMultimap.getAllValues(PREFIX_CLIENTSOURCE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Note note \u003d ParserUtil.parseNote(argMultimap.getValue(PREFIX_NOTE).orElse(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        Priority priority \u003d ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).orElse(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, clientSourceList, note, priority, null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        PolicyName policyName \u003d ParserUtil.parsePolicyName(argMultimap.getValue(PREFIX_POLICY_NAME).orElse(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return new AddCommand(person, policyName);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 21,
      "Joven-Heng": 4,
      "-": 41,
      "WeiJie96": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddPolicyCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_POLICY_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_POLICY_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.logic.commands.AddPolicyCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.PolicyDescription;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.PolicyName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "public class AddPolicyCommandParser implements Parser\u003cAddPolicyCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddPolicyCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * and returns an AddPolicyCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public AddPolicyCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                args,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                PREFIX_POLICY_NAME,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                PREFIX_POLICY_DESCRIPTION);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_POLICY_NAME, PREFIX_POLICY_DESCRIPTION)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPolicyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        PolicyName name \u003d ParserUtil.parsePolicyName(argMultimap.getValue(PREFIX_POLICY_NAME).get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        PolicyDescription description \u003d ParserUtil.parsePolicyDescription("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                argMultimap.getValue(PREFIX_POLICY_DESCRIPTION).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Policy policy \u003d new Policy(name, description);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return new AddPolicyCommand(policy);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArchiveCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.logic.commands.ArchiveCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " * Parses input arguments and creates a new ArchiveCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "public class ArchiveCommandParser implements Parser\u003cArchiveCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ArchiveCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     * and returns a ArchiveCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public ArchiveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            return new ArchiveCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ArchiveCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiJie96": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static final Prefix PREFIX_CLIENTSOURCE \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static final Prefix PREFIX_NOTE \u003d new Prefix(\"o/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static final Prefix PREFIX_PRIORITY \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public static final Prefix PREFIX_ARCHIVE \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static final Prefix PREFIX_POLICY_NAME \u003d new Prefix(\"pn/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static final Prefix PREFIX_POLICY_DESCRIPTION \u003d new Prefix(\"pd/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 3,
      "Joven-Heng": 2,
      "-": 14,
      "WeiJie96": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ClientListParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.logic.commands.AddPolicyCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.logic.commands.ArchiveCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.logic.commands.ClearPolicyCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.logic.commands.UnarchiveCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "public class ClientListParser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        case AddPolicyCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            return new AddPolicyCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        case ClearPolicyCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            return new ClearPolicyCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        case ArchiveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            return new ArchiveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        case UnarchiveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            return new UnarchiveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 10,
      "Joven-Heng": 1,
      "-": 65,
      "WeiJie96": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLIENTSOURCE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.clientsource.ClientSource;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                args,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                PREFIX_NAME,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                PREFIX_PHONE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                PREFIX_EMAIL,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                PREFIX_CLIENTSOURCE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                PREFIX_NOTE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                PREFIX_PRIORITY);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        parseClientSourcesForEdit(argMultimap.getAllValues(PREFIX_CLIENTSOURCE))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                .ifPresent(editPersonDescriptor::setClientSources);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NOTE).isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            editPersonDescriptor.setNote(ParserUtil.parseNote(argMultimap.getValue(PREFIX_NOTE).get()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRIORITY).isPresent()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            editPersonDescriptor.setPriority(ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e clientSources} into a {@code Set\u003cClientSource\u003e}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * if {@code clientSources} is non-empty."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * If {@code clientSources} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * {@code Set\u003cClientSource\u003e} containing zero clientSources."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private Optional\u003cSet\u003cClientSource\u003e\u003e parseClientSourcesForEdit("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            Collection\u003cString\u003e clientSources) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assert clientSources !\u003d null;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        if (clientSources.isEmpty()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Collection\u003cString\u003e clientSourceSet \u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                clientSources.size() \u003d\u003d 1 \u0026\u0026 clientSources.contains(\"\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                        ? Collections.emptySet() : clientSources;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return Optional.of(ParserUtil.parseClientSources(clientSourceSet));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 23,
      "Joven-Heng": 10,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ARCHIVE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public ListCommand parse(String args) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_ARCHIVE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ARCHIVE).isPresent()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            boolean isArchiveMode \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            return new ListCommand(isArchiveMode);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiJie96": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.clientsource.ClientSource;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import seedu.address.model.person.Priority;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.PolicyDescription;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.PolicyName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Parses a {@code String clientsource} into a {@code ClientSource}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * @throws ParseException if the given {@code clientsource} is invalid."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static ClientSource parseClientSource(String clientSource) throws ParseException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        requireNonNull(clientSource);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        String trimmedClientSource \u003d clientSource.trim();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        if (!ClientSource.isValidClientSourceName(trimmedClientSource)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            throw new ParseException(ClientSource.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return new ClientSource(trimmedClientSource);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e clientSources} into a {@code Set\u003cClientSource\u003e}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static Set\u003cClientSource\u003e parseClientSources(Collection\u003cString\u003e clientSources) throws ParseException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        requireNonNull(clientSources);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        final Set\u003cClientSource\u003e clientSourceSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        for (String clientSourceName : clientSources) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            clientSourceSet.add(parseClientSource(clientSourceName));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return clientSourceSet;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Parses a {@code String note} into a {@code Note}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @throws ParseException if the given {@code note} is invalid."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static Note parseNote(String note) throws ParseException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        if (note \u003d\u003d null) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        String trimmedNote \u003d note.trim();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        if (!Note.isValidNoteName(trimmedNote)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            throw new ParseException(Note.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return new Note(trimmedNote);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Parses a {@code String priority} into a {@code Priority}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Leading and trailing white spaces will be trimmed."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @throws ParseException if the given {@code priority} is invalid."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static Priority parsePriority(String priority) throws ParseException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        if (priority \u003d\u003d null) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            return new Priority(null);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        String trimmedPriority \u003d priority.trim();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        if (!Priority.isValidPriority(trimmedPriority)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            throw new ParseException(Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return new Priority(trimmedPriority);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Parses a {@code String name} into a {@code PolicyName}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Leading and trailing white spaces will be trimmed."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static PolicyName parsePolicyName(String name) throws ParseException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        if (!PolicyName.isValidPolicyName(trimmedName)) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            throw new ParseException(PolicyName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return new PolicyName(trimmedName);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Parses a {@code String description} into a {@code PolicyDescription}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Leading and trailing white spaces will be trimmed."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static PolicyDescription parsePolicyDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        if (!PolicyDescription.isValidPolicyDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            throw new ParseException(PolicyDescription.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return new PolicyDescription(trimmedDescription);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 60,
      "Joven-Heng": 25,
      "-": 115,
      "WeiJie96": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UnarchiveCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.logic.commands.UnarchiveCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " * Parses input arguments and creates a new ArchiveCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "public class UnarchiveCommandParser implements Parser\u003cUnarchiveCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ArchiveCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     * and returns a ArchiveCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public UnarchiveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            return new UnarchiveCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnarchiveCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiJie96": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ClientList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.PolicyList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " * Wraps all data at the client-list level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "public class ClientList implements ReadOnlyClientList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public ClientList() {}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Creates an ClientList using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public ClientList(ReadOnlyClientList toBeCopied) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Resets the existing data of this {@code ClientList} with {@code newData}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void resetData(ReadOnlyClientList newData) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the client list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Adds a person to the client list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * The person must not already exist in the client list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * {@code target} must exist in the client list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the client list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Removes {@code key} from this {@code ClientList}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * {@code key} must exist in the client list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                || (other instanceof ClientList // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                \u0026\u0026 persons.equals(((ClientList) other).persons));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Updates Clientlist by checking if Persons in the UniquePersonList has Policys that are"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * already in the policy list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * If the Person\u0027s policy does not match the Policy in the PolicyList,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * The field is set to null."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void updateClientListWithPolicyList(PolicyList policyList) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        persons.updateUniquePersonListWithPolicyList(policyList);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Clear all policy fields in persons."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void clearPolicy() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        persons.clearPolicy();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 18,
      "Joven-Heng": 16,
      "-": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import javafx.beans.property.BooleanProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.model.person.IsArchivePredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.PolicyList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.PolicyName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    /** {@code Predicate} that filters active persons */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_ACTIVE \u003d new IsArchivePredicate().negate();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    /** {@code Predicate} that filters archived persons */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_ARCHIVE \u003d new IsArchivePredicate();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Returns the user prefs\u0027 client list file path."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    Path getClientListFilePath();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Sets the user prefs\u0027 client list file path."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    void setClientListFilePath(Path clientListFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Replaces client list data with the data in {@code clientList}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    void setClientList(ReadOnlyClientList clientList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /** Returns the ClientList */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    ReadOnlyClientList getClientList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the client list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * The person must exist in the client list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * {@code person} must not already exist in the client list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * {@code target} must exist in the client list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the client list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     * Returns the archive mode."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     * @return Archive mode."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    BooleanProperty getIsArchiveModeProperty();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     * Returns the boolean value of the archive mode."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     * @return Boolean value of archive mode."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    boolean getIsArchiveMode();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     * Sets the archive mode."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     * @param isArchiveMode Archive mode to be set."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    void setIsArchiveMode(boolean isArchiveMode);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Returns the user prefs\u0027 policy list file path."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    Path getPolicyListFilePath();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Sets the user prefs\u0027 policy list file path."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    void setPolicyListFilePath(Path policyListFilePath);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /** Returns the PolicyList */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    PolicyList getPolicyList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Adds the given policy."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * {@code policy} must not already exist in the client list."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    void addPolicy(Policy policy);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Returns true if a policy with the same identity as {@code policy} exists in the policy list."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    boolean hasPolicy(Policy policy);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Returns true if a policy with the same policy name as {@code policy} exists in the policy list."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    boolean hasPolicy(PolicyName policyName);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Clear policy list data."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Additionally, clears all policy field in client list."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    void clearPolicyList();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 38,
      "Joven-Heng": 13,
      "-": 74,
      "WeiJie96": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import javafx.beans.property.BooleanProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import javafx.beans.property.SimpleBooleanProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.PolicyList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.PolicyName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " * Represents the in-memory model of the client list data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private final ClientList clientList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    private final BooleanProperty isArchiveMode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private final PolicyList policyList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Initializes a ModelManager with the given clientList and userPrefs."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public ModelManager(ReadOnlyClientList clientList, ReadOnlyUserPrefs userPrefs, PolicyList policyList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        requireAllNonNull(clientList, userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        logger.fine(\"Initializing with client list: \" + clientList + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        this.clientList \u003d new ClientList(clientList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.clientList.getPersonList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        filteredPersons.setPredicate(PREDICATE_SHOW_ALL_ACTIVE); // initialised to show all active persons"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        isArchiveMode \u003d new SimpleBooleanProperty(false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        this.policyList \u003d policyList;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        this(new ClientList(), new UserPrefs(), new PolicyList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public Path getClientListFilePath() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return userPrefs.getClientListFilePath();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void setClientListFilePath(Path clientListFilePath) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        requireNonNull(clientListFilePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        userPrefs.setClientListFilePath(clientListFilePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public Path getPolicyListFilePath() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return userPrefs.getPolicyListFilePath();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void setPolicyListFilePath(Path policyListFilePath) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        requireAllNonNull(policyListFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        userPrefs.setPolicyListFilePath(policyListFilePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ClientList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void setClientList(ReadOnlyClientList clientList) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        this.clientList.resetData(clientList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public ReadOnlyClientList getClientList() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return clientList;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return clientList.hasPerson(person);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        clientList.removePerson(target);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        clientList.addPerson(person);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_ACTIVE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        clientList.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * {@code versionedClientList}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Archive Mode \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public boolean getIsArchiveMode() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        return isArchiveMode.get();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public BooleanProperty getIsArchiveModeProperty() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        return isArchiveMode;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public void setIsArchiveMode(boolean isArchiveMode) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        this.isArchiveMode.set(isArchiveMode);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PolicyList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public PolicyList getPolicyList() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return policyList;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void addPolicy(Policy policy) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        policyList.add(policy);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public boolean hasPolicy(Policy policy) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return policyList.contains(policy);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public boolean hasPolicy(PolicyName policyName) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return policyList.contains(policyName);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void clearPolicyList() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        clientList.clearPolicy();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        policyList.clear();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Equals \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return clientList.equals(other.clientList)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                \u0026\u0026 policyList.equals(other.policyList)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                \u0026\u0026 (isArchiveMode.get() \u003d\u003d other.isArchiveMode.get());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 44,
      "Joven-Heng": 23,
      "-": 126,
      "WeiJie96": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyClientList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.PolicyList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " * Unmodifiable view of an client list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "public interface ReadOnlyClientList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    void updateClientListWithPolicyList(PolicyList policyList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 3,
      "Joven-Heng": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    Path getClientListFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private Path clientListFilePath \u003d Paths.get(\"data\" , \"clientlist.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private Path policyListFilePath \u003d Paths.get(\"data\", \"policylist.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        setClientListFilePath(newUserPrefs.getClientListFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public Path getClientListFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return clientListFilePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void setClientListFilePath(Path clientListFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        requireNonNull(clientListFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        this.clientListFilePath \u003d clientListFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public Path getPolicyListFilePath() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return policyListFilePath;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void setPolicyListFilePath(Path policyListFilePath) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        requireNonNull((policyListFilePath));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        this.policyListFilePath \u003d policyListFilePath;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                \u0026\u0026 clientListFilePath.equals(o.clientListFilePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return Objects.hash(guiSettings, clientListFilePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + clientListFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 8,
      "Joven-Heng": 10,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/model/clientsource/ClientSource.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "package seedu.address.model.clientsource;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ijavierja"
        },
        "content": " * Represents a ClientSource in the client list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ijavierja"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidClientSourceName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ijavierja"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "public class ClientSource {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Client sources can take any values,\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            + \" should not be more than 50 characters,\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            + \" and should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].{0,49}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public final String clientSourceName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Constructs a {@code ClientSource}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * @param clientSourceName A valid clientsource name."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public ClientSource(String clientSourceName) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        requireNonNull(clientSourceName);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        checkArgument(isValidClientSourceName(clientSourceName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        this.clientSourceName \u003d clientSourceName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Returns true if a given string is a valid clientsource name."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static boolean isValidClientSourceName(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                || (other instanceof ClientSource // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                \u0026\u0026 clientSourceName.equals(((ClientSource) other).clientSourceName)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return clientSourceName.hashCode();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return \u0027[\u0027 + clientSourceName + \u0027]\u0027;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 52,
      "WeiJie96": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/Note.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " * Represents a Note in the client list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidNoteName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "public class Note {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Note can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public final String noteName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Constructs a {@code Note}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @param noteName A valid note name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public Note(String noteName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        requireNonNull(noteName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        checkArgument(isValidNoteName(noteName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        this.noteName \u003d noteName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Returns true if a given string is a valid note name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static boolean isValidNoteName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                || (other instanceof seedu.address.model.note.Note // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                \u0026\u0026 noteName.equals(((seedu.address.model.note.Note) other).noteName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return noteName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return noteName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Address.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " * Represents a Person\u0027s address in the client list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 1,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " * Represents a Person\u0027s email in the client list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 1,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/IsArchivePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code isArchive} is true."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "public class IsArchivePredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        return person.getIsArchive();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiJie96": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " * Represents a Person\u0027s name in the client list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 1,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.clientsource.ClientSource;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " * Represents a Person in the client list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " * Guarantees: name, client sources, priority, archive status are present and not null,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " * field values are validated, immutable."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private final Set\u003cClientSource\u003e clientSources \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private final Note note;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    private final boolean isArchive;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private final Priority priority;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private final Policy policy;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     * Only name, client sources, priority need to be non-null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     * By default, Person is not in archive"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cClientSource\u003e clientSources, Note note,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                  Priority priority, Policy policy) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        requireAllNonNull(name, clientSources, priority);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        this.clientSources.addAll(clientSources);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        this.isArchive \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        this.policy \u003d policy;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     * Only name, client sources, priority, archive status need to be non-null."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cClientSource\u003e clientSources,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                  Note note, boolean isArchive, Priority priority, Policy policy) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        requireAllNonNull(name, clientSources, isArchive, priority);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        this.clientSources.addAll(clientSources);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        this.isArchive \u003d isArchive;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        this.policy \u003d policy;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Returns an immutable clientsource set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public Set\u003cClientSource\u003e getClientSources() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return Collections.unmodifiableSet(clientSources);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public Note getNote() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return note;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public boolean getIsArchive() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        return isArchive;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public Priority getPriority() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public Policy getPolicy() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return policy;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     * If one of phone or email is null for both self and other person, check the other field instead."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     * If both of phone and email are null for both self and other person, return true."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     * Note that archive status is not checked here, i.e. a person cannot belong in archive and also in active list."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        // If both of phone and email are null for both self and other person, return true."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        if (otherPerson !\u003d null"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                \u0026\u0026 getPhone() \u003d\u003d null \u0026\u0026 otherPerson.getPhone() \u003d\u003d null"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                \u0026\u0026 getEmail() \u003d\u003d null \u0026\u0026 otherPerson.getEmail() \u003d\u003d null) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        // If one of phone or email is null for both self and other person, check the other field instead."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        // If at least one of phone or email are the same and non-null, return true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                \u0026\u0026 (isSameNullable(otherPerson.getPhone(), getPhone())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                || isSameNullable(otherPerson.getEmail(), getEmail()));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     * Returns true if both objects are non-null, and are equal to each other."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     * This is a utility method used by isSamePerson to handle for nulls."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     * If either objects are null, false is returned, as the other identity field"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     * would be used to check for \"sameness\" instead."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     * @param obj      First object to test for is same."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     * @param otherObj Second object to test for is same."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     * @return Boolean representing if 2 objects are the same."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    private boolean isSameNullable(Object obj, Object otherObj) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        return obj !\u003d null"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                \u0026\u0026 obj.equals(otherObj);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                \u0026\u0026 equalsNullable(otherPerson.getPhone(), getPhone())"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                \u0026\u0026 equalsNullable(otherPerson.getEmail(), getEmail())"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                \u0026\u0026 equalsNullable(otherPerson.getAddress(), getAddress())"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                \u0026\u0026 otherPerson.getClientSources().equals(getClientSources())"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                \u0026\u0026 equalsNullable(otherPerson.getNote(), getNote())"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                \u0026\u0026 (otherPerson.getIsArchive() \u003d\u003d getIsArchive())"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                \u0026\u0026 equalsNullable(otherPerson.getPolicy(), getPolicy());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    private boolean equalsNullable(Object obj, Object otherObj) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            return otherObj \u003d\u003d null;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            return obj.equals(otherObj);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return Objects.hash(name, phone, email, address, clientSources, note, isArchive, priority, policy);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        builder.append(getName());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        if (getPhone() !\u003d null) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            builder.append(\" Phone: \")"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                    .append(getPhone());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        if (getEmail() !\u003d null) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            builder.append(\" Email: \")"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                    .append(getEmail());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        if (getAddress() !\u003d null) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            builder.append(\" Address: \")"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                    .append(getAddress());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        if (getClientSources().size() \u003e 0) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            builder.append(\" ClientSources: \");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            getClientSources().forEach(builder::append);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        if (getNote() !\u003d null) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            builder.append(\" Note: \")"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                    .append(getNote());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        if (getPolicy() !\u003d null) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            builder.append(\" Policy: \")"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                    .append(getPolicy());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        // Not necessary to add archive status"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        builder.append(\" Priority: \")"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                .append(getPriority());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ijavierja": 26,
      "Joven-Heng": 21,
      "-": 98,
      "WeiJie96": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " * Represents a Person\u0027s phone number in the client list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 1,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Priority.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " * Represents a Person\u0027s priority number in the client list."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPriority(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "public class Priority {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            \"Priority values should only take L, M, H, U, l, m, h, u, low, medium, high, or undefined\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[ulmhULMH]|^undefined$|^high$|^medium$|^low$\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Constructs a {@code Priority}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @param priority A valid priority keyword."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     *                 If there is no priority keyword, it would be U."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public Priority(String priority) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        String tempValue;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        if (priority \u003d\u003d null) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            tempValue \u003d matchToPriorityName(\"u\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            checkArgument(isValidPriority(priority), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            tempValue \u003d matchToPriorityName(priority);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        value \u003d tempValue;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Returns true if a given string is a valid priority number."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static boolean isValidPriority(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Helper function to match the priorities to their respective names."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @return the corresponding Priority name."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static String matchToPriorityName(String priority) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        switch (priority.toLowerCase()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        case \"u\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        case \"undefined\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            return PriorityType.UNDEFINED.name().toLowerCase();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        case \"l\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        case \"low\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            return PriorityType.LOW.name().toLowerCase();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        case \"m\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        case \"medium\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            return PriorityType.MEDIUM.name().toLowerCase();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        case \"h\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        case \"high\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            return PriorityType.HIGH.name().toLowerCase();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            assert false : \"Validation Regex should have caught this error\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            return \"x\"; // priority type does not exist"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                || (other instanceof Priority // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                \u0026\u0026 value.equals(((Priority) other).value)); // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/PriorityType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "public enum PriorityType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    HIGH,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    MEDIUM,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    LOW,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    UNDEFINED"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.PolicyList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Updates internalList by checking if Persons in the UniquePersonList has"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Policys that are already in the policy list."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * If the Person\u0027s policy does not match the Policy in the PolicyList,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * The field is set to null."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void updateUniquePersonListWithPolicyList(PolicyList policyList) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        requireNonNull(policyList);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        for (Person p : internalList) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            if ((p.getPolicy() !\u003d null) \u0026\u0026 (!policyList.contains(p.getPolicy()))) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                Person person \u003d new Person("
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                        p.getName(),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                        p.getPhone(),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                        p.getEmail(),"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                        p.getAddress(),"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                        p.getClientSources(),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                        p.getNote(),"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                        p.getIsArchive(),"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                        p.getPriority(),"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                        null);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                internalList.set(index, person);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Set all policy field in persons to be null."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void clearPolicy() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        for (Person p : internalList) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            if (p.getPolicy() !\u003d null) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                Person person \u003d new Person("
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                        p.getName(),"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                        p.getPhone(),"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                        p.getEmail(),"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                        p.getAddress(),"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                        p.getClientSources(),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                        p.getNote(),"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                        p.getIsArchive(),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                        p.getPriority(),"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                        null);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                internalList.set(index, person);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 50,
      "-": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/policy/Policy.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "package seedu.address.model.policy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ijavierja"
        },
        "content": " * Represents a Person\u0027s policy in the client list."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ijavierja"
        },
        "content": " * Guarantees: policyName and description are present and not null,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ijavierja"
        },
        "content": " * field values are validated, immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ijavierja"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "public class Policy {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private final PolicyName policyName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private final PolicyDescription description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Constructs a Policy object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Requires policyName and description to be non-null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public Policy(PolicyName policyName, PolicyDescription description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        requireAllNonNull(policyName, description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        this.policyName \u003d policyName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        builder.append(\"Policy Name: \").append(getPolicyName()).append(\" Description: \").append(getDescription());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Returns true if the other object is an instance of Policy and if the other has the same name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * and if other has the same description."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                || (other instanceof Policy // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                \u0026\u0026 policyName.equals(((Policy) other).getPolicyName()) // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                \u0026\u0026 description.equals(((Policy) other).getDescription()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return policyName.hashCode();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Returns true if otherPolicy has the same name."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * This method differs from equals method as isSamePolicy takes into account"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * both the name and description."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public boolean isSamePolicy(Policy otherPolicy) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return otherPolicy \u003d\u003d this"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                || otherPolicy.getPolicyName().equals(this.policyName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public PolicyName getPolicyName() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return policyName;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public PolicyDescription getDescription() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/policy/PolicyDescription.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "package seedu.address.model.policy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ijavierja"
        },
        "content": " * Represents a Policy\u0027s name."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ijavierja"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPolicyDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ijavierja"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "public class PolicyDescription {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            \"Policy Description can take any values, should not be more than 100 characters and should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].{0,99}\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Constructs a {@code PolicyDescription}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * @param policyDescription A valid PolicyDescription."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public PolicyDescription(String policyDescription) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        requireNonNull(policyDescription);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        checkArgument(isValidPolicyDescription(policyDescription), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        value \u003d policyDescription;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static boolean isValidPolicyDescription(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                || (other instanceof PolicyDescription // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                \u0026\u0026 value.equals(((PolicyDescription) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/policy/PolicyList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "package seedu.address.model.policy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import java.util.Hashtable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.exception.DuplicatePolicyException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "public class PolicyList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private final Hashtable\u003cString, Policy\u003e policies;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Constructs a {@code PolicyList} from a HashTable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public PolicyList(Hashtable\u003cString, Policy\u003e policies) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        requireNonNull(policies);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        this.policies \u003d policies;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public PolicyList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        policies \u003d new Hashtable\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Returns true if the hashtable contains an equivalent policy as the given argument."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public boolean contains(Policy toCheck) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return policies.contains(toCheck);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Returns true if the hashtable contains the key as the given argument using PolicyName."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public boolean contains(PolicyName policyName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return policies.containsKey(policyName.value);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Returns true if the hashtable contains the key as the given argument using String."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public boolean contains(String policyName) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return policies.containsKey(policyName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Adds a {@link Policy} to policies."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * @param toAdd is required to be non null."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void add(Policy toAdd) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            throw new DuplicatePolicyException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        policies.put(toAdd.getPolicyName().value, toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * clear policies of all the data."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        policies.clear();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Returns an empty {@code PolicyList}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static PolicyList createNewPolicyList() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Hashtable\u003cString, Policy\u003e policies \u003d new Hashtable\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return new PolicyList(policies);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Returns a copy of the internal HashTable"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public Hashtable\u003cString, Policy\u003e getHashtableCopy() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Hashtable\u003cString, Policy\u003e copy \u003d new Hashtable\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        copy.putAll(policies);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Returns the Policy in the hashtable if present using a {@code PolicyName}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * else returns null."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public Policy getPolicy(PolicyName name) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return policies.get(name.value);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Returns the Policy in the hashtable if present using String name,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * else returns null."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public Policy getPolicy(String name) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return policies.get(name);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Returns true if both Policys have the same values in the hashtable."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                || (other instanceof PolicyList // instanceof handles nulls"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                \u0026\u0026 policies.equals(((PolicyList) other).getHashtableCopy()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return policies.hashCode();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/model/policy/PolicyName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "package seedu.address.model.policy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ijavierja"
        },
        "content": " * Represents a Policy\u0027s name."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ijavierja"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPolicyName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ijavierja"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "public class PolicyName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            \"Policy names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Constructs a {@code PolicyName}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * @param policyName A valid PolicyName."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public PolicyName(String policyName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        requireNonNull(policyName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        checkArgument(isValidPolicyName(policyName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        value \u003d policyName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static boolean isValidPolicyName(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                || (other instanceof PolicyName // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                \u0026\u0026 value.equals(((PolicyName) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/policy/exception/DuplicatePolicyException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "package seedu.address.model.policy.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ijavierja"
        },
        "content": " * Signals that the operation will result in duplicate Policy (Policys are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ijavierja"
        },
        "content": " * name)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ijavierja"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "public class DuplicatePolicyException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public DuplicatePolicyException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        super(\"Operation will result in a duplicate Policy\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleClientDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import seedu.address.model.ClientList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import seedu.address.model.ReadOnlyClientList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.clientsource.ClientSource;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import seedu.address.model.person.Priority;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.PolicyDescription;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.PolicyName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " * Contains utility methods for populating {@code ClientList} with sample data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "public class SampleClientDataUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                    getClientSourceSet(\"friends\"), new Note(\"friend\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                    new Priority(\"u\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                    new Policy("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                            new PolicyName(\"Life Time Policy\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                            new PolicyDescription(\"Covers death, serious illnesses and serious disability.\"))),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                    getClientSourceSet(\"colleagues\", \"friends\"), new Note(\"friend\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                    new Priority(\"l\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                    new Policy("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                            new PolicyName(\"Savings Plan\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                            new PolicyDescription(\"Earn up to 10% total amount put in.\"))),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                    getClientSourceSet(\"neighbours\"), new Note(\"friend\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                    new Priority(\"m\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                    new Policy("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                            new PolicyName(\"Life Time Policy\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                            new PolicyDescription(\"Covers death, serious illnesses and serious disability.\"))),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                    getClientSourceSet(\"family\"), new Note(\"friend\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                    new Priority(\"h\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                    new Policy("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                            new PolicyName(\"Life Time Policy\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                            new PolicyDescription(\"Covers death, serious illnesses and serious disability.\"))),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                    getClientSourceSet(\"classmates\"), new Note(\"friend\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                    new Priority(\"u\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                    new Policy("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                            new PolicyName(\"Life Time Policy\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                            new PolicyDescription(\"Covers death, serious illnesses and serious disability.\"))),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                    getClientSourceSet(\"colleagues\"), new Note(\"friend\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                    new Priority(\"l\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                    new Policy("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                            new PolicyName(\"Savings Plan\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                            new PolicyDescription(\"Earn up to 10% total amount put in.\")))"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static ReadOnlyClientList getSampleClientList() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        ClientList sampleAb \u003d new ClientList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Returns a clientsource set containing the list of strings given."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static Set\u003cClientSource\u003e getClientSourceSet(String... strings) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                .map(ClientSource::new)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Returns a note from the string given."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static String getNote(String string) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return string;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 33,
      "Joven-Heng": 20,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SamplePolicyDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.PolicyDescription;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.PolicyList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.PolicyName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "public class SamplePolicyDataUtil {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static Policy[] getSamplePolicys() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return new Policy[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            {new Policy("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                new PolicyName(\"Life Time Policy\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                new PolicyDescription(\"Covers death, serious illnesses and serious disability.\")),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            new Policy("
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                new PolicyName(\"Savings Plan\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                new PolicyDescription(\"Earn up to 10% total amount put in.\"))"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            };"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static PolicyList getSamplePolicyList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        PolicyList sampleList \u003d new PolicyList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        for (Policy p : getSamplePolicys()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            sampleList.add(p);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return sampleList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ClientListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import seedu.address.model.ReadOnlyClientList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " * Represents a storage for {@link seedu.address.model.ClientList}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "public interface ClientListStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    Path getClientListFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Returns ClientList data as a {@link ReadOnlyClientList}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    Optional\u003cReadOnlyClientList\u003e readClientList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @see #getClientListFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    Optional\u003cReadOnlyClientList\u003e readClientList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Saves the given {@link ReadOnlyClientList} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @param clientList cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    void saveClientList(ReadOnlyClientList clientList) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @see #saveClientList(ReadOnlyClientList)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    void saveClientList(ReadOnlyClientList clientList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedClientSource.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.clientsource.ClientSource;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ijavierja"
        },
        "content": " * Jackson-friendly version of {@link ClientSource}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "class JsonAdaptedClientSource {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private final String clientSourceName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Constructs a {@code JsonAdaptedClientSource} with the given {@code clientSourceName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public JsonAdaptedClientSource(String clientSourceName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        this.clientSourceName \u003d clientSourceName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Converts a given {@code ClientSource} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public JsonAdaptedClientSource(ClientSource source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        clientSourceName \u003d source.clientSourceName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public String getClientSourceName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return clientSourceName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Converts this Jackson-friendly adapted clientsource object into the model\u0027s {@code ClientSource} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted clientsource."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public ClientSource toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        if (!ClientSource.isValidClientSourceName(clientSourceName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            throw new IllegalValueException(ClientSource.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return new ClientSource(clientSourceName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 18,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.clientsource.ClientSource;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import seedu.address.model.person.Priority;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private final List\u003cJsonAdaptedClientSource\u003e clientSource \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private final String note;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    private final boolean isArchive;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private final String priority;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private final JsonAdaptedPolicy policy;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public JsonAdaptedPerson("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            @JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            @JsonProperty(\"clientSource\") List\u003cJsonAdaptedClientSource\u003e clientSource,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            @JsonProperty(\"note\") String note, @JsonProperty(\"isArchive\") boolean isArchive,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            @JsonProperty(\"priority\") String priority, @JsonProperty(\"policy\") JsonAdaptedPolicy policy) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        if (clientSource !\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            this.clientSource.addAll(clientSource);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        this.isArchive \u003d isArchive;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        this.policy \u003d policy;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assert name !\u003d null : \"Value stored in name should not be null\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        if (source.getPhone() !\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            assert phone !\u003d null : \"Value stored in phone should not be null\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            phone \u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        if (source.getEmail() !\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            assert email !\u003d null : \"Value stored in email should not be null\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            email \u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        if (source.getAddress() !\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            assert address !\u003d null : \"Value stored in address should not be null\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            address \u003d null;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        clientSource.addAll(source.getClientSources()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                .map(JsonAdaptedClientSource::new)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        if (source.getNote() !\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            note \u003d source.getNote().noteName;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            assert note !\u003d null : \"Value stored in note should not be null\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            note \u003d null;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        isArchive \u003d source.getIsArchive();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        priority \u003d source.getPriority().value;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assert priority !\u003d null : \"Value stored in priority should not be null\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        if (source.getPolicy() !\u003d null) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            policy \u003d new JsonAdaptedPolicy(source.getPolicy());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            assert policy !\u003d null : \"Value stored in address should not be null\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            policy \u003d null;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        final List\u003cClientSource\u003e personClientSources \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        for (JsonAdaptedClientSource clientSource : clientSource) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            personClientSources.add(clientSource.toModelType());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        final Phone modelPhone;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            modelPhone \u003d null;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        final Email modelEmail;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            modelEmail \u003d null;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        final Address modelAddress;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            modelAddress \u003d null;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        final Set\u003cClientSource\u003e modelClientSources \u003d new HashSet\u003c\u003e(personClientSources);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        final Note modelNote;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        if (note \u003d\u003d null) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            modelNote \u003d null;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            if (!Note.isValidNoteName(note)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                throw new IllegalValueException(Note.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            modelNote \u003d new Note(note);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        final boolean modelIsArchive \u003d isArchive;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        final Priority modelPriority;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        if (priority \u003d\u003d null) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            modelPriority \u003d new Priority(null);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            if (!Priority.isValidPriority(priority)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                throw new IllegalValueException(Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            modelPriority \u003d new Priority(priority);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        final Policy modelPolicy;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        if (policy !\u003d null) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            modelPolicy \u003d policy.toModelType();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            modelPolicy \u003d null;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelClientSources, modelNote,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                modelIsArchive, modelPriority, modelPolicy);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 32,
      "Joven-Heng": 21,
      "-": 92,
      "WeiJie96": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPolicy.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.PolicyDescription;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.PolicyName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ijavierja"
        },
        "content": " * Jackson-friendly version of {@link Policy}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ijavierja"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "public class JsonAdaptedPolicy {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private final String policyName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Constructs a {@code JsonAdaptedPolicy} with the given person details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public JsonAdaptedPolicy(@JsonProperty(\"policyName\") String policyName,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                             @JsonProperty(\"description\") String description) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        this.policyName \u003d policyName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Converts a given {@code Policy} into this class for Jackson use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public JsonAdaptedPolicy(Policy source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        policyName \u003d source.getPolicyName().value;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Converts this Jackson-friendly adapted Policy object into the model\u0027s {@code Policy} object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public Policy toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        if (policyName \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                    PolicyName.class.getSimpleName()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        if (!PolicyName.isValidPolicyName(policyName)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            throw new IllegalValueException(PolicyName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        final PolicyName modelPolicyName \u003d new PolicyName(policyName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                    PolicyDescription.class.getSimpleName()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        if (!PolicyDescription.isValidPolicyDescription(description)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            throw new IllegalValueException(PolicyName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        final PolicyDescription modelPolicyDescription \u003d new PolicyDescription(description);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return new Policy(modelPolicyName, modelPolicyDescription);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonClientListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import seedu.address.model.ReadOnlyClientList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " * A class to access ClientList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "public class JsonClientListStorage implements ClientListStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonClientListStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public JsonClientListStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public Path getClientListFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public Optional\u003cReadOnlyClientList\u003e readClientList() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return readClientList(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Similar to {@link #readClientList()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public Optional\u003cReadOnlyClientList\u003e readClientList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        Optional\u003cJsonSerializableClientList\u003e jsonClientList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                filePath, JsonSerializableClientList.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        if (!jsonClientList.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            return Optional.of(jsonClientList.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void saveClientList(ReadOnlyClientList clientList) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        saveClientList(clientList, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Similar to {@link #saveClientList(ReadOnlyClientList)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void saveClientList(ReadOnlyClientList clientList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        requireNonNull(clientList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableClientList(clientList), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 20,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonPolicyListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.PolicyList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ijavierja"
        },
        "content": " * A class to access PolicyList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ijavierja"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "public class JsonPolicyListStorage implements PolicyListStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonClientListStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public JsonPolicyListStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public Path getPolicyListFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public Optional\u003cPolicyList\u003e readPolicyList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return readPolicyList(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public Optional\u003cPolicyList\u003e readPolicyList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Optional\u003cJsonSerializablePolicyList\u003e jsonPolicyList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                filePath, JsonSerializablePolicyList.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        if (!jsonPolicyList.isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            return Optional.of(jsonPolicyList.get().toModelType());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void savePolicyList(PolicyList policyList) throws IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        savePolicyList(policyList, filePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void savePolicyList(PolicyList policyList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        requireNonNull(policyList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializablePolicyList(policyList), filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableClientList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import seedu.address.model.ClientList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import seedu.address.model.ReadOnlyClientList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " * An Immutable ClientList that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "@JsonRootName(value \u003d \"clientlist\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "class JsonSerializableClientList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Constructs a {@code JsonSerializableClientList} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public JsonSerializableClientList(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Converts a given {@code ReadOnlyClientList} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableClientList}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public JsonSerializableClientList(ReadOnlyClientList source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Converts this client list into the model\u0027s {@code ClientList} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public ClientList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        ClientList clientList \u003d new ClientList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            if (clientList.hasPerson(person)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            clientList.addPerson(person);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return clientList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 16,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializablePolicyList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import java.util.Hashtable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.PolicyList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ijavierja"
        },
        "content": " * An immutable PolicyList that is serializable to JSON format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ijavierja"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "@JsonRootName(value \u003d \"policylist\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "public class JsonSerializablePolicyList {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_POLICY \u003d \"Policy list contains duplicate Policy(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private final List\u003cJsonAdaptedPolicy\u003e policyList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Constructs a {@code JsonAdaptedPolicyList} with the given policy list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public JsonSerializablePolicyList(@JsonProperty(\"policyList\") List\u003cJsonAdaptedPolicy\u003e policyList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        this.policyList.addAll(policyList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Converts a given {@code PolicyList} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonAdaptedPolicyList}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public JsonSerializablePolicyList(PolicyList source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Hashtable\u003cString, Policy\u003e policies \u003d source.getHashtableCopy();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        for (Policy p : policies.values()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            policyList.add(new JsonAdaptedPolicy(p));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Converts this policy list into the model\u0027s {@code PolicyList} object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public PolicyList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        PolicyList policies \u003d new PolicyList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        for (JsonAdaptedPolicy p : policyList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            Policy policy \u003d p.toModelType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            if (policies.contains(policy)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_POLICY);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            policies.add(policy);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return policies;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/PolicyListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.PolicyList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ijavierja"
        },
        "content": " * Represents a storage for {@link PolicyList}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ijavierja"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "public interface PolicyListStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    Path getPolicyListFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Returns PolicyList data as a {@link PolicyList}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    Optional\u003cPolicyList\u003e readPolicyList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * @see #getPolicyListFilePath()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    Optional\u003cPolicyList\u003e readPolicyList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Saves the given {@link PolicyList} to the storage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * @param policyList cannot be null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    void savePolicyList(PolicyList policyList) throws IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * @see #savePolicyList(seedu.address.model.policy.PolicyList)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    void savePolicyList(PolicyList policyList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import seedu.address.model.ReadOnlyClientList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.PolicyList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "public interface Storage extends ClientListStorage, UserPrefsStorage, PolicyListStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    Path getClientListFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    Optional\u003cReadOnlyClientList\u003e readClientList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    void saveClientList(ReadOnlyClientList clientList) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    Path getPolicyListFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    Optional\u003cPolicyList\u003e readPolicyList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    void savePolicyList(PolicyList policyList) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 10,
      "Joven-Heng": 4,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import seedu.address.model.ReadOnlyClientList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.PolicyList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " * Manages storage of ClientList data in local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private ClientListStorage clientListStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private PolicyListStorage policyListStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code ClientListStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public StorageManager(ClientListStorage clientListStorage,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                          UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                          PolicyListStorage policyListStorage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        this.clientListStorage \u003d clientListStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        this.policyListStorage \u003d policyListStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ClientList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public Path getClientListFilePath() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return clientListStorage.getClientListFilePath();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public Optional\u003cReadOnlyClientList\u003e readClientList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return readClientList(clientListStorage.getClientListFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public Optional\u003cReadOnlyClientList\u003e readClientList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return clientListStorage.readClientList(filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void saveClientList(ReadOnlyClientList clientList) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        saveClientList(clientList, clientListStorage.getClientListFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void saveClientList(ReadOnlyClientList clientList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        clientListStorage.saveClientList(clientList, filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PolicyList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public Path getPolicyListFilePath() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return policyListStorage.getPolicyListFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public Optional\u003cPolicyList\u003e readPolicyList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return policyListStorage.readPolicyList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public Optional\u003cPolicyList\u003e readPolicyList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return policyListStorage.readPolicyList(filePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void savePolicyList(PolicyList policyList) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        policyListStorage.savePolicyList(policyList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void savePolicyList(PolicyList policyList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        policyListStorage.savePolicyList(policyList, filePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 31,
      "Joven-Heng": 16,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ArchiveModeBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import javafx.beans.property.BooleanProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "public class ArchiveModeBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    private static final String FXML \u003d \"ArchiveModeBox.fxml\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public final BooleanProperty isArchiveModeProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    private Label archiveMode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     * Creates a {@code ArchiveStatusBox} with the given {@code isArchiveModeProperty}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public ArchiveModeBox(BooleanProperty isArchiveModeProperty) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        this.isArchiveModeProperty \u003d isArchiveModeProperty;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        archiveMode.setText(archiveTextDisplay(isArchiveModeProperty.get())); // set initial value"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        // set value on change"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        isArchiveModeProperty.addListener((observable, oldValue, newValue)-\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                archiveMode.setText(archiveTextDisplay(newValue)));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    private String archiveTextDisplay(boolean isArchiveModeBoolean) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        if (isArchiveModeBoolean) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            return \"Archived Client List\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            return \"Active Client List\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiJie96": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ColorPicker.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " * Class for custom colors used for I4I, especially for the priorityShape"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "public class ColorPicker {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static final Color TURQUOISE \u003d Color.rgb(0, 223, 187);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static final Color ORANGE \u003d Color.rgb(252, 191, 98);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static final Color RED \u003d Color.rgb(243, 118, 176);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static final Color TURQUOISE_BORDER \u003d Color.rgb(32, 182, 157);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static final Color ORANGE_BORDER \u003d Color.rgb(191, 141, 85);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static final Color RED_BORDER \u003d Color.rgb(195, 111, 150);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static final Color WHITE_BORDER \u003d Color.rgb(213, 215, 215);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static final Color TURQUOISE_DARK \u003d Color.rgb(0, 147, 123);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static final Color ORANGE_DARK \u003d Color.rgb(166, 126, 65);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static final Color RED_DARK \u003d Color.rgb(160, 78, 116);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static final Color WHITE_DARK \u003d Color.rgb(167, 168, 168);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static final Color TURQUOISE_BORDER_DARK \u003d Color.rgb(21, 120, 103);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static final Color ORANGE_BORDER_DARK \u003d Color.rgb(116, 92, 55);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static final Color RED_BORDER_DARK \u003d Color.rgb(128, 73, 99);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static final Color WHITE_BORDER_DARK \u003d Color.rgb(140, 142, 142);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103-t16-2.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 101,
      "WeiJie96": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    private ArchiveModeBox archiveModeBox;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    private StackPane archiveModePlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        archiveModeBox \u003d new ArchiveModeBox(logic.getIsArchiveModeProperty());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        archiveModePlaceholder.getChildren().add(archiveModeBox.getRoot());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getClientListFilePath());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 1,
      "-": 195,
      "WeiJie96": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import javafx.scene.layout.Border;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import javafx.scene.layout.BorderStroke;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import javafx.scene.layout.BorderStrokeStyle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import javafx.scene.layout.BorderWidths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private static final double BORDER_SIZE \u003d 5;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on ClientList level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    private FlowPane phone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    private FlowPane address;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    private FlowPane email;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    private FlowPane note;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private FlowPane priority;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private FlowPane clientSources;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private FlowPane policyName;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private FlowPane policyDescription;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private Region fillerShape;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private HBox priorityShape;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Person} and index to display."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        if (person.getPhone() !\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            phone.getChildren().add(new Label(person.getPhone().value));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        if (person.getAddress() !\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            address.getChildren().add(new Label(person.getAddress().value));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        if (person.getEmail() !\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            email.getChildren().add(new Label(person.getEmail().value));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        if (person.getNote() !\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            note.getChildren().add(new Label(person.getNote().noteName));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        if (person.getPolicy() !\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            policyName.getChildren().add(new Label(\"Policy name: \" + person.getPolicy().getPolicyName().value));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            policyDescription.getChildren().add(new Label(\"Description: \" + person.getPolicy().getDescription().value));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        priority.getChildren().add(new Label(person.getPriority().value));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        person.getClientSources().stream()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                .sorted(Comparator.comparing(clientSource -\u003e clientSource.clientSourceName))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                .forEach(clientSource -\u003e clientSources.getChildren().add("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                        new Label(clientSource.clientSourceName)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                ));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        setPriorityShape(person);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private void setPriorityShape(Person person) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        switch (person.getPriority().value) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        case \"low\":"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            if (!person.getIsArchive()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                priorityShape.setBorder(new Border(new BorderStroke(ColorPicker.TURQUOISE_BORDER,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                        BorderStrokeStyle.SOLID, CornerRadii.EMPTY, new BorderWidths(BORDER_SIZE))));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                priorityShape.setBackground(new Background(new BackgroundFill(ColorPicker.TURQUOISE, CornerRadii.EMPTY,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                        Insets.EMPTY)));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                priorityShape.setBorder(new Border(new BorderStroke(ColorPicker.TURQUOISE_BORDER_DARK,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                        BorderStrokeStyle.SOLID, CornerRadii.EMPTY, new BorderWidths(BORDER_SIZE))));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                priorityShape.setBackground(new Background(new BackgroundFill(ColorPicker.TURQUOISE_DARK,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                        CornerRadii.EMPTY, Insets.EMPTY)));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        case \"medium\":"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            if (!person.getIsArchive()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                priorityShape.setBorder(new Border(new BorderStroke(ColorPicker.ORANGE_BORDER,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                        BorderStrokeStyle.SOLID, CornerRadii.EMPTY, new BorderWidths(BORDER_SIZE))));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                priorityShape.setBackground(new Background(new BackgroundFill(ColorPicker.ORANGE, CornerRadii.EMPTY,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                        Insets.EMPTY)));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                priorityShape.setBorder(new Border(new BorderStroke(ColorPicker.ORANGE_BORDER_DARK,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                        BorderStrokeStyle.SOLID, CornerRadii.EMPTY, new BorderWidths(BORDER_SIZE))));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                priorityShape.setBackground(new Background(new BackgroundFill(ColorPicker.ORANGE_DARK,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                        CornerRadii.EMPTY, Insets.EMPTY)));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        case \"high\":"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            if (!person.getIsArchive()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                priorityShape.setBorder(new Border(new BorderStroke(ColorPicker.RED_BORDER,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                        BorderStrokeStyle.SOLID, CornerRadii.EMPTY, new BorderWidths(BORDER_SIZE))));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                priorityShape.setBackground(new Background(new BackgroundFill(ColorPicker.RED, CornerRadii.EMPTY,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                        Insets.EMPTY)));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                priorityShape.setBorder(new Border(new BorderStroke(ColorPicker.RED_BORDER_DARK,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                        BorderStrokeStyle.SOLID, CornerRadii.EMPTY, new BorderWidths(BORDER_SIZE))));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                priorityShape.setBackground(new Background(new BackgroundFill(ColorPicker.RED_DARK,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                        CornerRadii.EMPTY, Insets.EMPTY)));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        case \"undefined\":"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            if (!person.getIsArchive()) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                priorityShape.setBorder(new Border(new BorderStroke(ColorPicker.WHITE_BORDER,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                        BorderStrokeStyle.SOLID, CornerRadii.EMPTY, new BorderWidths(BORDER_SIZE))));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                priorityShape.setBackground(new Background(new BackgroundFill(Color.WHITE, CornerRadii.EMPTY,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                        Insets.EMPTY)));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                priorityShape.setBorder(new Border(new BorderStroke(ColorPicker.WHITE_BORDER_DARK,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                        BorderStrokeStyle.SOLID, CornerRadii.EMPTY, new BorderWidths(BORDER_SIZE))));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                priorityShape.setBackground(new Background(new BackgroundFill(ColorPicker.WHITE_DARK,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                        CornerRadii.EMPTY, Insets.EMPTY)));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            assert false : \"priority shape UI cannot find priority keyword\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 13,
      "Joven-Heng": 81,
      "-": 70,
      "WeiJie96": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/I4I.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 1,
      "-": 88
    }
  },
  {
    "path": "src/main/resources/view/ArchiveModeBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "\u003cStackPane id\u003d\"archiveModeBox\" fx:id\u003d\"archiveModeBox\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    \u003cLabel id\u003d\"archiveMode\" fx:id\u003d\"archiveMode\" text\u003d\"\\$archiveMode\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "WeiJie96": 9
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "#clientSources {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "#clientSources .label {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "#phone .label {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    -fx-font-size: 12;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "#address .label {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    -fx-font-size: 12;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "#email .label {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    -fx-font-size: 12;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "}"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "#note .label {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    -fx-font-size: 12;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "}"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "#policyName .label {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    -fx-font-size: 12;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "}"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "#policyDescription .label {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    -fx-font-size: 12;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "}"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "#priority .label {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    -fx-font-size: 12;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "}"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "#archiveModePlaceholder {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    -fx-background-color: #383838;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "}"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "#archiveModeBox {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "}"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "#archiveMode {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    -fx-font-size: 18;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 10,
      "Joven-Heng": 3,
      "-": 350,
      "WeiJie96": 34
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background: #383838;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ".clientSource-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 1,
      "-": 19
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "         title\u003d\"Insurance4Insurance\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    \u003cImage url\u003d\"@/images/I4I.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" id\u003d\"archiveModePlaceholder\" fx:id\u003d\"archiveModePlaceholder\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                   minHeight\u003d\"30\" prefHeight\u003d\"30\" maxHeight\u003d\"30\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 2,
      "-": 58,
      "WeiJie96": 7
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"clientSources\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"phone\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"address\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"email\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"policyName\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"policyDescription\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"note\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"priority\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "   \u003cHBox fx:id\u003d\"fillerShape\" prefWidth\u003d\"58.0\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "   \u003cHBox fx:id\u003d\"priorityShape\" prefWidth\u003d\"58.0\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 3,
      "Joven-Heng": 10,
      "-": 29,
      "WeiJie96": 4
    }
  },
  {
    "path": "src/test/data/JsonClientListStorageTest/invalidAndValidPersonClientList.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Valid Person\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    \"clientSource\": [ \"friends\" ],"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    \"note\": \"pwpw\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    \"isArchive\": false,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    \"priority\": \"low\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    \"policy\" : {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "      \"policyName\" : \"Life Time\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "      \"description\" : \"Covers death, serious illnesses, and disabilities.\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person With Invalid Phone Field\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"948asdf2424\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    \"clientSource\": [ \"friends\" ],"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    \"note\": \"pwpw\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    \"isArchive\": false,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    \"priority\": \"X\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    \"policy\" : {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "      \"policyName\" : \"Life Time\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "      \"description\" : \"Covers death, serious illnesses, and disabilities.\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 10,
      "Joven-Heng": 2,
      "-": 11,
      "WeiJie96": 6
    }
  },
  {
    "path": "src/test/data/JsonClientListStorageTest/invalidPersonClientList.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    \"clientSource\": [ \"friends\" ],"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    \"note\": \"Fake fwen\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    \"isArchive\": false,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    \"priority\": \"low\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    \"policy\" : {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "      \"policyName\" : \"Life Time\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "      \"description\" : \"Covers death, serious illnesses, and disabilities.\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 5,
      "-": 7,
      "WeiJie96": 4
    }
  },
  {
    "path": "src/test/data/JsonSerializableClientListTest/duplicatePersonClientList.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"alice@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    \"clientSource\": [ \"friends\" ],"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    \"note\": \"Fake fwen\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    \"isArchive\": false,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    \"priority\": \"high\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    \"policy\" : {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "      \"policyName\" : \"Life Time\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "      \"description\" : \"Covers death, serious illnesses, and disabilities.\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"pauline@example.com\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    \"clientSource\": [ \"friends\" ],"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    \"note\": \"real fwen\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    \"isArchive\": false,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    \"priority\": \"low\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    \"policy\" : {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "      \"policyName\" : \"Life Time\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "      \"description\" : \"Covers death, serious illnesses, and disabilities.\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 11,
      "Joven-Heng": 1,
      "-": 12,
      "WeiJie96": 5
    }
  },
  {
    "path": "src/test/data/JsonSerializableClientListTest/invalidPersonClientList.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Hans Muster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"invalid@email!3e\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    \"clientSource\": [ \"friends\" ],"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    \"note\": \"Fake fwen\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    \"isArchive\": false,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    \"priority\": \"low\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    \"policy\" : {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "      \"policyName\" : \"Life Time\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "      \"description\" : \"Covers death, serious illnesses, and disabilities.\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 5,
      "-": 7,
      "WeiJie96": 4
    }
  },
  {
    "path": "src/test/data/JsonSerializableClientListTest/typicalPersonsClientList.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "  \"_comment\": \"ClientList save file which contains the same Person values as in TypicalPersons#getTypicalClientList()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"alice@example.com\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    \"clientSource\" : [ \"friends\" ],"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    \"note\" : \"Real Pal\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    \"isArchive\": false,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    \"priority\": \"undefined\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    \"policy\" : {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "      \"policyName\" : \"Life Time\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "      \"description\" : \"Covers death, serious illnesses, and disabilities.\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"98765432\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"johnd@example.com\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"311, Clementi Ave 2, #02-25\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    \"clientSource\" : [ \"owesMoney\", \"friends\" ],"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    \"note\" : \"Snake\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    \"isArchive\": false,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    \"priority\": \"low\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    \"policy\" : {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "      \"policyName\" : \"Life Time\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "      \"description\" : \"Covers death, serious illnesses, and disabilities.\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"95352563\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"heinz@example.com\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"wall street\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    \"clientSource\" : [ ],"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    \"note\" : \"Snake\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    \"isArchive\": false,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    \"priority\": \"medium\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    \"policy\" : {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "      \"policyName\" : \"Life Time\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "      \"description\" : \"Covers death, serious illnesses, and disabilities.\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"87652533\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"cornelia@example.com\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"10th street\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    \"clientSource\" : [ \"friends\" ],"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    \"note\" : \"Snake\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    \"isArchive\": false,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    \"priority\": \"high\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    \"policy\" : {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "      \"policyName\" : \"Life Time\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "      \"description\" : \"Covers death, serious illnesses, and disabilities.\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482224\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"werner@example.com\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"michegan ave\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    \"clientSource\" : [ ],"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    \"note\" : \"snake\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    \"isArchive\": false,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    \"priority\": \"undefined\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    \"policy\" : {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "      \"policyName\" : \"Savings Scheme\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "      \"description\" : \"Profits of up to 10% of input.\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482427\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"lydia@example.com\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"little tokyo\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    \"clientSource\" : [ ],"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    \"note\" : \"snake\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    \"isArchive\": false,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    \"priority\": \"low\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    \"policy\" : {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "      \"policyName\" : \"Savings Scheme\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "      \"description\" : \"Profits of up to 10% of input.\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"George Best\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482442\","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"anna@example.com\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"4th street\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    \"clientSource\" : [ ],"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    \"note\" : \"Snake\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    \"isArchive\": false,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    \"priority\": \"medium\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    \"policy\" :{"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "      \"policyName\" : \"Savings Scheme\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "      \"description\" : \"Profits of up to 10% of input.\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 42,
      "Joven-Heng": 1,
      "-": 38,
      "WeiJie96": 14
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "  \"clientListFilePath\" : \"clientlist.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "  \"clientListFilePath\" : \"clientlist.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/I4I.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NOTE_DESC_CAT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import seedu.address.model.ReadOnlyClientList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import seedu.address.storage.JsonClientListStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.storage.JsonPolicyListStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        JsonClientListStorage clientListStorage \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                new JsonClientListStorage(temporaryFolder.resolve(\"clientList.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        JsonPolicyListStorage policyListStorage \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                new JsonPolicyListStorage(temporaryFolder.resolve(\"clientList.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        StorageManager storage \u003d new StorageManager(clientListStorage, userPrefsStorage, policyListStorage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS_ACTIVE, model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        // Setup LogicManager with JsonClientListIoExceptionThrowingStub"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        JsonClientListStorage clientListStorage \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                new JsonClientListIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionClientList.json\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        JsonPolicyListStorage policyListStorage \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                new JsonPolicyListStorage(temporaryFolder.resolve(\"ioExceptionPolicyList.json\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        StorageManager storage \u003d new StorageManager(clientListStorage, userPrefsStorage, policyListStorage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                + ADDRESS_DESC_AMY + NOTE_DESC_CAT + PRIORITY_DESC_AMY;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withClientSources().build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getClientList(), new UserPrefs(), model.getPolicyList());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private static class JsonClientListIoExceptionThrowingStub extends JsonClientListStorage {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        private JsonClientListIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        public void saveClientList(ReadOnlyClientList clientList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 11,
      "Joven-Heng": 11,
      "-": 146,
      "WeiJie96": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalClientList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.testutil.TypicalPolicies.getTypicalPolicyList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        model \u003d new ModelManager(getTypicalClientList(), new UserPrefs(), getTypicalPolicyList());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getClientList(), new UserPrefs(), getTypicalPolicyList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson, null), model,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        Person personInList \u003d model.getClientList().getPersonList().get(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList, null), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 5,
      "Joven-Heng": 2,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.testutil.TypicalPolicies.LIFE_TIME_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import javafx.beans.property.BooleanProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import javafx.beans.property.SimpleBooleanProperty;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.ClientList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.ReadOnlyClientList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.PolicyList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.PolicyName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null, null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson, null).execute(modelStub);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public void execute_inArchiveMode_throwsCommandException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        ModelStubInArchiveMode modelStub \u003d new ModelStubInArchiveMode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson, null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                AddCommand.MESSAGE_DISABLE_IN_ARCHIVE_MODE, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson, null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public void execute_duplicatePersonInArchive_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson, null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Person validPersonInArchive \u003d new PersonBuilder().addToArchive().build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPersonInArchive);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void execute_policyNotInPolicyList_throwsCommandException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().withoutPolicy().build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        PolicyName validPolicyName \u003d new PolicyName(LIFE_TIME_NAME);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson, validPolicyName);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_POLICY_NOT_FOUND, () -\u003e addCommand.execute(model));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice, null);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob, null);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice, null);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        public Path getClientListFilePath() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        public void setClientListFilePath(Path clientListFilePath) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        public void setClientList(ReadOnlyClientList newData) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        public ReadOnlyClientList getClientList() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        public boolean getIsArchiveMode() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        public BooleanProperty getIsArchiveModeProperty() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        public void setIsArchiveMode(boolean isArchiveMode) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        public Path getPolicyListFilePath() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        public void setPolicyListFilePath(Path path) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        public PolicyList getPolicyList() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        public void addPolicy(Policy policy) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        public boolean hasPolicy(Policy policy) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        public boolean hasPolicy(PolicyName policyName) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        public void clearPolicyList() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        private final BooleanProperty isArchiveMode \u003d new SimpleBooleanProperty(false);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        public boolean getIsArchiveMode() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            return isArchiveMode.get();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        private final BooleanProperty isArchiveMode \u003d new SimpleBooleanProperty(false);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        public ReadOnlyClientList getClientList() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            return new ClientList();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        public boolean getIsArchiveMode() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            return isArchiveMode.get();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     * A Model stub that is always in archive mode."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    private class ModelStubInArchiveMode extends ModelStub {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        private final BooleanProperty isArchiveMode \u003d new SimpleBooleanProperty(true);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        public boolean getIsArchiveMode() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            return isArchiveMode.get();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * A Model stub that has no policies in policylist"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private class ModelStubWithoutPolicies extends ModelStub {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        public boolean hasPolicy(Policy policy) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 69,
      "Joven-Heng": 6,
      "-": 182,
      "WeiJie96": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddPolicyCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.testutil.TypicalPolicies.LIFE_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.testutil.TypicalPolicies.getTypicalPolicyList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.ClientList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "public class AddPolicyCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddPolicyCommand(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void execute_policyAcceptedByModel_addSuccessful() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Policy policy \u003d LIFE_TIME;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        expectedModel.addPolicy(LIFE_TIME);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        String expectedMessage \u003d String.format(AddPolicyCommand.MESSAGE_SUCCESS, policy);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertCommandSuccess(new AddPolicyCommand(policy), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void execute_policyIsDuplicatePolicy() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Model model \u003d new ModelManager(new ClientList(), new UserPrefs(), getTypicalPolicyList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertCommandFailure(new AddPolicyCommand(LIFE_TIME), model, AddPolicyCommand.MESSAGE_DUPLICATE_POLICY);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ArchiveCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ACTIVE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalClientListWithArchive;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.testutil.TypicalPolicies.getTypicalPolicyList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.model.clientsource.ClientSource;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.model.person.Priority;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for {@code ArchiveCommand}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " * Note that integration test with FindCommand, UndoCommand, RedoCommand are not done here."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "public class ArchiveCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalClientListWithArchive(), new UserPrefs(), getTypicalPolicyList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public void execute_validIndex_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Person personToArchive \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        ArchiveCommand archiveCommand \u003d new ArchiveCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        String expectedMessage \u003d String.format(ArchiveCommand.MESSAGE_ARCHIVE_PERSON_SUCCESS, personToArchive);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getClientList(), new UserPrefs(), model.getPolicyList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Person archivedPerson \u003d createArchivedPerson(personToArchive);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        expectedModel.setPerson(personToArchive, archivedPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_ACTIVE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertCommandSuccess(archiveCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public void execute_invalidIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        ArchiveCommand archiveCommand \u003d new ArchiveCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertCommandFailure(archiveCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public void execute_inArchiveMode_throwsCommandException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        model.setIsArchiveMode(true);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        ArchiveCommand archiveCommand \u003d new ArchiveCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertCommandFailure(archiveCommand, model, ArchiveCommand.MESSAGE_DISABLE_IN_ARCHIVE_MODE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        ArchiveCommand archiveFirstCommand \u003d new ArchiveCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        ArchiveCommand archiveSecondCommand \u003d new ArchiveCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertTrue(archiveFirstCommand.equals(archiveFirstCommand));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        ArchiveCommand archiveFirstCommandCopy \u003d new ArchiveCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertTrue(archiveFirstCommand.equals(archiveFirstCommandCopy));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertFalse(archiveFirstCommand.equals(1));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertFalse(archiveFirstCommand.equals(null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertFalse(archiveFirstCommand.equals(archiveSecondCommand));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    private static Person createArchivedPerson(Person personToArchive) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assert personToArchive !\u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assert !personToArchive.getIsArchive() : \"Person to archive should not already be in archive\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Name archivedName \u003d personToArchive.getName();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Phone archivedPhone \u003d personToArchive.getPhone();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Email archivedEmail \u003d personToArchive.getEmail();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Address archivedAddress \u003d personToArchive.getAddress();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Set\u003cClientSource\u003e archivedClientSources \u003d personToArchive.getClientSources();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Note archivedNote \u003d personToArchive.getNote();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Priority archivedPriority \u003d personToArchive.getPriority();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Policy archivedPolicy \u003d personToArchive.getPolicy();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        boolean archivedIsArchive \u003d true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        return new Person("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                archivedName,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                archivedPhone,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                archivedEmail,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                archivedAddress,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                archivedClientSources,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                archivedNote,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                archivedIsArchive,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                archivedPriority,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                archivedPolicy);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 7,
      "WeiJie96": 113
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalClientList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.testutil.TypicalPolicies.getTypicalPolicyList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import seedu.address.model.ClientList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void execute_emptyClientList_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void execute_nonEmptyClientList_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalClientList(), new UserPrefs(), getTypicalPolicyList());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalClientList(), new UserPrefs(), getTypicalPolicyList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        expectedModel.setClientList(new ClientList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 3,
      "Joven-Heng": 5,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLIENTSOURCE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_POLICY_DESCRIPTION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_POLICY_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.testutil.TypicalPolicies.LIFE_TIME_DESCRIPTION;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.testutil.TypicalPolicies.LIFE_TIME_NAME;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.testutil.TypicalPolicies.SAVINGS_DESCRIPTION;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.testutil.TypicalPolicies.SAVINGS_NAME;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import seedu.address.model.ClientList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static final String VALID_CLIENTSOURCE_HUSBAND \u003d \"husband of Amy\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static final String VALID_CLIENTSOURCE_FRIEND \u003d \"friend from NUS\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static final String VALID_NOTE_DOG \u003d \"lovesdogs\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static final String VALID_NOTE_CAT \u003d \"lovescats\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static final String VALID_PRIORITY_HIGH \u003d \"h\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static final String VALID_PRIORITY_LOW \u003d \"l\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static final String VALID_PRIORITY_UNDEFINED \u003d \"u\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static final String VALID_POLICY_NAME_AMY \u003d LIFE_TIME_NAME;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static final String VALID_POLICY_NAME_BOB \u003d SAVINGS_NAME;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static final String VALID_POLICY_DESCRIPTION_AMY \u003d LIFE_TIME_DESCRIPTION;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static final String VALID_POLICY_DESCRIPTION_BOB \u003d SAVINGS_DESCRIPTION;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static final String CLIENTSOURCE_DESC_FRIEND \u003d \" \" + PREFIX_CLIENTSOURCE + VALID_CLIENTSOURCE_FRIEND;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static final String CLIENTSOURCE_DESC_HUSBAND \u003d \" \" + PREFIX_CLIENTSOURCE + VALID_CLIENTSOURCE_HUSBAND;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static final String NOTE_DESC_DOG \u003d \" \" + PREFIX_NOTE + VALID_NOTE_DOG;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static final String NOTE_DESC_CAT \u003d \" \" + PREFIX_NOTE + VALID_NOTE_CAT;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static final String PRIORITY_DESC_AMY \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_HIGH;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static final String PRIORITY_DESC_BOB \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_LOW;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static final String POLICY_NAME_DESC_AMY \u003d \" \" + PREFIX_POLICY_NAME + VALID_POLICY_NAME_AMY;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static final String POLICY_NAME_DESC_BOB \u003d \" \" + PREFIX_POLICY_NAME + VALID_POLICY_NAME_BOB;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static final String POLICY_DESCRIPTION_DESC_AMY \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            \" \" + PREFIX_POLICY_DESCRIPTION + VALID_POLICY_DESCRIPTION_AMY;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static final String POLICY_DESCRIPTION_DESC_BOB \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            \" \" + PREFIX_POLICY_DESCRIPTION + VALID_POLICY_DESCRIPTION_BOB;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static final String INVALID_CLIENTSOURCE_DESC \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            \" \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                    + PREFIX_CLIENTSOURCE"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                    + \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"; // clientsource limited to 50 characters."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static final String INVALID_NOTE_DESC \u003d \" \" + PREFIX_NOTE; // empty string not allowed for notes."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static final String INVALID_PRIORITY_DESC \u003d \" \" + PREFIX_PRIORITY + \"xdz\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static final String INVALID_POLICY_NAME_DESC \u003d \" \" + PREFIX_POLICY_NAME + \"@!\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static final String INVALID_POLICY_DESCRIPTION_DESC \u003d \" \" + PREFIX_POLICY_DESCRIPTION + \" \";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                .withClientSources(VALID_CLIENTSOURCE_FRIEND).withNote(VALID_NOTE_CAT)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                .withPriority(VALID_PRIORITY_HIGH).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                .withClientSources(VALID_CLIENTSOURCE_HUSBAND, VALID_CLIENTSOURCE_FRIEND)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                .withNote(VALID_NOTE_DOG)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                .withPriority(VALID_PRIORITY_LOW).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * - the client list, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        ClientList expectedClientList \u003d new ClientList(actualModel.getClientList());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertEquals(expectedClientList, actualModel.getClientList());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * {@code model}\u0027s client list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 29,
      "Joven-Heng": 22,
      "-": 115
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalClientList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.testutil.TypicalPolicies.getTypicalPolicyList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalClientList(), new UserPrefs(), getTypicalPolicyList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getClientList(), new UserPrefs(), getTypicalPolicyList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getClientList(), new UserPrefs(), getTypicalPolicyList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of client list list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getClientList().getPersonList().size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 4,
      "Joven-Heng": 3,
      "-": 103
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CLIENTSOURCE_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NOTE_DOG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_LOW;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalClientList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.testutil.TypicalPolicies.getTypicalPolicyList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import seedu.address.model.ClientList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.PolicyList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalClientList(), new UserPrefs(), getTypicalPolicyList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                new ClientList(model.getClientList()),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                new UserPrefs(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                new PolicyList(model.getPolicyList().getHashtableCopy()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                .withClientSources(VALID_CLIENTSOURCE_HUSBAND).withNote(VALID_NOTE_DOG)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                .withPriority(VALID_PRIORITY_LOW).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                .withClientSources(VALID_CLIENTSOURCE_HUSBAND).withNote(VALID_NOTE_DOG)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                .withPriority(VALID_PRIORITY_LOW).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                new ClientList(model.getClientList()),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                new UserPrefs(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                new PolicyList(model.getPolicyList().getHashtableCopy()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                new ClientList(model.getClientList()),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                new UserPrefs(),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                new PolicyList(model.getPolicyList().getHashtableCopy()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                new ClientList(model.getClientList()),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                new UserPrefs(),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                new PolicyList(model.getPolicyList().getHashtableCopy()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        // edit person in filtered list into a duplicate in client list"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        Person personInList \u003d model.getClientList().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * but smaller than size of client list"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of client list list"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getClientList().getPersonList().size());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 22,
      "Joven-Heng": 13,
      "-": 158
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CLIENTSOURCE_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NOTE_DOG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_LOW;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        // different clientSources -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withClientSources(VALID_CLIENTSOURCE_HUSBAND).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        // different notes -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withNote(VALID_NOTE_DOG).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        // different priority -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPriority(VALID_PRIORITY_LOW).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 3,
      "Joven-Heng": 9,
      "-": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalClientList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.testutil.TypicalPolicies.getTypicalPolicyList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalClientList(), new UserPrefs(), getTypicalPolicyList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalClientList(), new UserPrefs(), getTypicalPolicyList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 3,
      "Joven-Heng": 1,
      "-": 80
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ARCHIVE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.GEORGE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.JASON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KING;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.LINDA;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.MONK;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalClientList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalClientListOnlyArchive;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalClientListWithArchive;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.testutil.TypicalPolicies.getTypicalPolicyList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " * Note that integration tests with FindCommand are not done here."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        ListCommand listFirstCommand \u003d new ListCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        ListCommand listSecondCommand \u003d new ListCommand(false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertTrue(listFirstCommand.equals(listSecondCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public void execute_listIsNotFilteredAndStaysInActiveMode_showsSameList() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalClientList(), new UserPrefs(), getTypicalPolicyList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalClientList(), new UserPrefs(), getTypicalPolicyList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS_ACTIVE, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public void execute_listIsNotFilteredSwitchFromArchiveToActive_showsActiveOnly() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalClientListWithArchive(), new UserPrefs(), getTypicalPolicyList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        model.setIsArchiveMode(true);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_ARCHIVE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                getTypicalClientListWithArchive(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                new UserPrefs(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                getTypicalPolicyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS_ACTIVE, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                FIONA, GEORGE), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public void execute_listIsNotFilteredAndIsInArchiveMode_showsSameList() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalClientListOnlyArchive(), new UserPrefs(), getTypicalPolicyList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        model.setIsArchiveMode(true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_ARCHIVE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                getTypicalClientListOnlyArchive(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                new UserPrefs(),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                getTypicalPolicyList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        expectedModel.setIsArchiveMode(true);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_ARCHIVE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertCommandSuccess(new ListCommand(true), model,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                ListCommand.MESSAGE_SUCCESS_ARCHIVE, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public void execute_listIsNotFilteredSwitchFromActiveToArchive_showsArchiveOnly() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Model model \u003d new ModelManager("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                getTypicalClientListWithArchive(),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                new UserPrefs(),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                getTypicalPolicyList());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                getTypicalClientListWithArchive(),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                new UserPrefs(),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                getTypicalPolicyList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        expectedModel.setIsArchiveMode(true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_ARCHIVE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertCommandSuccess(new ListCommand(true), model,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                ListCommand.MESSAGE_SUCCESS_ARCHIVE, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertEquals(Arrays.asList(JASON, KING, LINDA, MONK), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ijavierja": 22,
      "Joven-Heng": 1,
      "-": 25,
      "WeiJie96": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UnarchiveCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ARCHIVE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalClientListWithArchive;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.testutil.TypicalPolicies.getTypicalPolicyList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.model.clientsource.ClientSource;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.model.person.Priority;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for {@code UnarchiveCommand}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " * Note that integration test with FindCommand, UndoCommand, RedoCommand are not done here."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "public class UnarchiveCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalClientListWithArchive(), new UserPrefs(), getTypicalPolicyList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public void setModelToArchiveMode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        model.setIsArchiveMode(true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_ARCHIVE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public void execute_validIndex_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Person personToUnarchive \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        UnarchiveCommand unarchiveCommand \u003d new UnarchiveCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        String expectedMessage \u003d String.format(UnarchiveCommand.MESSAGE_UNARCHIVE_PERSON_SUCCESS, personToUnarchive);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getClientList(), new UserPrefs(), model.getPolicyList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        expectedModel.setIsArchiveMode(true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Person unarchivedPerson \u003d createUnarchivedPerson(personToUnarchive);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        expectedModel.setPerson(personToUnarchive, unarchivedPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_ARCHIVE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertCommandSuccess(unarchiveCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public void execute_invalidIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        UnarchiveCommand unarchiveCommand \u003d new UnarchiveCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertCommandFailure(unarchiveCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public void execute_inActiveMode_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        model.setIsArchiveMode(false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        UnarchiveCommand unarchiveCommand \u003d new UnarchiveCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertCommandFailure(unarchiveCommand, model, UnarchiveCommand.MESSAGE_DISABLE_IN_ACTIVE_MODE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        UnarchiveCommand unarchiveFirstCommand \u003d new UnarchiveCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        UnarchiveCommand unarchiveSecondCommand \u003d new UnarchiveCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertTrue(unarchiveFirstCommand.equals(unarchiveFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        UnarchiveCommand unarchiveFirstCommandCopy \u003d new UnarchiveCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertTrue(unarchiveFirstCommand.equals(unarchiveFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertFalse(unarchiveFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertFalse(unarchiveFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertFalse(unarchiveFirstCommand.equals(unarchiveSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    private static Person createUnarchivedPerson(Person personToUnarchive) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assert personToUnarchive !\u003d null;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assert personToUnarchive.getIsArchive() : \"Person to unarchive should not already be active\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Name unarchivedName \u003d personToUnarchive.getName();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Phone unarchivedPhone \u003d personToUnarchive.getPhone();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Email unarchivedEmail \u003d personToUnarchive.getEmail();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Address unarchivedAddress \u003d personToUnarchive.getAddress();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Set\u003cClientSource\u003e unarchivedClientSources \u003d personToUnarchive.getClientSources();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Note unarchivedNote \u003d personToUnarchive.getNote();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Priority unarchivedPriority \u003d personToUnarchive.getPriority();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Policy unarchivedPolicy \u003d personToUnarchive.getPolicy();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        boolean unarchivedIsArchive \u003d false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        return new Person("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                unarchivedName,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                unarchivedPhone,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                unarchivedEmail,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                unarchivedAddress,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                unarchivedClientSources,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                unarchivedNote,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                unarchivedIsArchive,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                unarchivedPriority,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                unarchivedPolicy);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 7,
      "WeiJie96": 121
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CLIENTSOURCE_DESC_FRIEND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CLIENTSOURCE_DESC_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CLIENTSOURCE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NOTE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NOTE_DESC_CAT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NOTE_DESC_DOG;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CLIENTSOURCE_FRIEND;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CLIENTSOURCE_HUSBAND;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NOTE_DOG;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.clientsource.ClientSource;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import seedu.address.model.person.Priority;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withClientSources(VALID_CLIENTSOURCE_FRIEND).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                + ADDRESS_DESC_BOB + CLIENTSOURCE_DESC_FRIEND + NOTE_DESC_DOG"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                + PRIORITY_DESC_BOB, new AddCommand(expectedPerson, null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                + ADDRESS_DESC_BOB + CLIENTSOURCE_DESC_FRIEND + NOTE_DESC_DOG"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                + PRIORITY_DESC_BOB, new AddCommand(expectedPerson, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                + ADDRESS_DESC_BOB + CLIENTSOURCE_DESC_FRIEND + NOTE_DESC_DOG"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                + PRIORITY_DESC_BOB, new AddCommand(expectedPerson, null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                + ADDRESS_DESC_BOB + CLIENTSOURCE_DESC_FRIEND + NOTE_DESC_DOG"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                + PRIORITY_DESC_BOB, new AddCommand(expectedPerson, null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                + ADDRESS_DESC_BOB + CLIENTSOURCE_DESC_FRIEND + NOTE_DESC_DOG"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                + PRIORITY_DESC_BOB, new AddCommand(expectedPerson, null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        // multiple clientsources - all accepted"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withClientSources(VALID_CLIENTSOURCE_FRIEND,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_CLIENTSOURCE_HUSBAND)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                .withNote(VALID_NOTE_DOG).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                        + CLIENTSOURCE_DESC_FRIEND + CLIENTSOURCE_DESC_HUSBAND + NOTE_DESC_DOG + PRIORITY_DESC_BOB,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                new AddCommand(expectedPersonMultipleTags, null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Person expectedPersonWithoutPhone \u003d new PersonBuilder(AMY).withoutPhone().build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                        + CLIENTSOURCE_DESC_FRIEND + NOTE_DESC_CAT + PRIORITY_DESC_AMY,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                new AddCommand(expectedPersonWithoutPhone, null));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Person expectedPersonWithoutEmail \u003d new PersonBuilder(AMY).withoutEmail().build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                        + CLIENTSOURCE_DESC_FRIEND + NOTE_DESC_CAT + PRIORITY_DESC_AMY,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                new AddCommand(expectedPersonWithoutEmail, null));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Person expectedPersonWithoutAddress \u003d new PersonBuilder(AMY).withoutAddress().build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                        + CLIENTSOURCE_DESC_FRIEND + NOTE_DESC_CAT + PRIORITY_DESC_AMY,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                new AddCommand(expectedPersonWithoutAddress, null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        // zero clientSources"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withClientSources().build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                        + ADDRESS_DESC_AMY + NOTE_DESC_CAT + PRIORITY_DESC_AMY,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                new AddCommand(expectedPerson, null));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        // missing note prefix"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Person expectedPersonWithoutNote \u003d new PersonBuilder(AMY).withoutNote().build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                        + ADDRESS_DESC_AMY + CLIENTSOURCE_DESC_FRIEND + PRIORITY_DESC_AMY,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                new AddCommand(expectedPersonWithoutNote, null));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        // missing priority prefix - should default to undefined"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        Person expectedPersonWithoutPriority \u003d new PersonBuilder(AMY).withoutPriority().build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                        + ADDRESS_DESC_AMY + CLIENTSOURCE_DESC_FRIEND + NOTE_DESC_CAT,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                new AddCommand(expectedPersonWithoutPriority, null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        // missing priority prefix"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                + ADDRESS_DESC_AMY + CLIENTSOURCE_DESC_FRIEND + NOTE_DESC_CAT,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                new AddCommand(expectedPersonWithoutPriority, null));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                        + ADDRESS_DESC_BOB + NOTE_DESC_DOG + CLIENTSOURCE_DESC_HUSBAND"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                        + PRIORITY_DESC_BOB,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                        + VALID_ADDRESS_BOB + VALID_NOTE_DOG + CLIENTSOURCE_DESC_HUSBAND"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                        + PRIORITY_DESC_BOB,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                        + CLIENTSOURCE_DESC_HUSBAND + CLIENTSOURCE_DESC_FRIEND + NOTE_DESC_DOG + PRIORITY_DESC_BOB,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                        + CLIENTSOURCE_DESC_HUSBAND + CLIENTSOURCE_DESC_FRIEND + NOTE_DESC_DOG + PRIORITY_DESC_BOB ,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                        + CLIENTSOURCE_DESC_HUSBAND + CLIENTSOURCE_DESC_FRIEND + NOTE_DESC_DOG + PRIORITY_DESC_BOB,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                        + CLIENTSOURCE_DESC_HUSBAND + CLIENTSOURCE_DESC_FRIEND + NOTE_DESC_DOG + PRIORITY_DESC_BOB,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        // invalid clientsource"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                        + INVALID_CLIENTSOURCE_DESC + CLIENTSOURCE_DESC_FRIEND + NOTE_DESC_DOG + PRIORITY_DESC_BOB,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                ClientSource.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        //invalid note"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                + VALID_CLIENTSOURCE_FRIEND + INVALID_NOTE_DESC + PRIORITY_DESC_BOB, Note.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        //invalid priority"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                + VALID_CLIENTSOURCE_FRIEND + NOTE_DESC_DOG + INVALID_PRIORITY_DESC, Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                        + ADDRESS_DESC_BOB + CLIENTSOURCE_DESC_HUSBAND + CLIENTSOURCE_DESC_FRIEND + NOTE_DESC_DOG"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                        + PRIORITY_DESC_BOB,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 31,
      "Joven-Heng": 47,
      "-": 102,
      "WeiJie96": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddPolicyCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.POLICY_DESCRIPTION_DESC_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.POLICY_NAME_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.testutil.TypicalPolicies.LIFE_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.logic.commands.AddPolicyCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "public class AddPolicyCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private AddPolicyCommandParser parser \u003d new AddPolicyCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void parse_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Policy expectedPolicy \u003d LIFE_TIME;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                PREAMBLE_WHITESPACE + POLICY_NAME_DESC_AMY + POLICY_DESCRIPTION_DESC_AMY,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                new AddPolicyCommand(expectedPolicy));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void parse_missingPolicyFields_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(PREAMBLE_WHITESPACE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(PREAMBLE_WHITESPACE + POLICY_NAME_DESC_AMY));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(PREAMBLE_WHITESPACE + POLICY_DESCRIPTION_DESC_AMY));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ArchiveCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.logic.commands.ArchiveCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " * outside of the ArchiveCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " * same path through the ArchiveCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "public class ArchiveCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    private ArchiveCommandParser parser \u003d new ArchiveCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public void parse_validArgs_returnsArchiveCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertParseSuccess(parser, \"1\", new ArchiveCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ArchiveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiJie96": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        String argsString \u003d \"  some random string /t clientsource with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: testing for prefixes not specified as a prefix */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ClientListParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_POLICY_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_POLICY_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.testutil.TypicalPolicies.LIFE_TIME_DESCRIPTION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.testutil.TypicalPolicies.LIFE_TIME_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.logic.commands.AddPolicyCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.logic.commands.ArchiveCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.logic.commands.ClearPolicyCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.logic.commands.UnarchiveCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.PolicyDescription;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.PolicyName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "public class ClientListParserTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private final ClientListParser parser \u003d new ClientListParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Person person \u003d new PersonBuilder().withoutPolicy().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        //Note: the policy field is not added until model verifies that the policy is in the policy list"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertEquals(new AddCommand(person, new PolicyName(LIFE_TIME_NAME)), command);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                + CliSyntax.PREFIX_ARCHIVE) instanceof ListCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                + CliSyntax.PREFIX_ARCHIVE + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public void parseCommand_archive() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        ArchiveCommand command \u003d (ArchiveCommand) parser.parseCommand("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                ArchiveCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertEquals(new ArchiveCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public void parseCommand_unarchive() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        UnarchiveCommand command \u003d (UnarchiveCommand) parser.parseCommand("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                UnarchiveCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertEquals(new UnarchiveCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void parseCommand_addPolicy() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        AddPolicyCommand command \u003d (AddPolicyCommand) parser.parseCommand("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                AddPolicyCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                        + PREFIX_POLICY_NAME + \" \" + LIFE_TIME_NAME + \" \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                        + PREFIX_POLICY_DESCRIPTION + \" \" + LIFE_TIME_DESCRIPTION"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        );"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertEquals(new AddPolicyCommand("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                new Policy("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                        new PolicyName(LIFE_TIME_NAME),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                        new PolicyDescription(LIFE_TIME_DESCRIPTION))),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                command);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void parseCommand_clearPolicy() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertTrue(parser.parseCommand(ClearPolicyCommand.COMMAND_WORD) instanceof ClearPolicyCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertEquals(parser.parseCommand(ClearPolicyCommand.COMMAND_WORD), new ClearPolicyCommand());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 31,
      "Joven-Heng": 2,
      "-": 68,
      "WeiJie96": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CLIENTSOURCE_DESC_FRIEND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CLIENTSOURCE_DESC_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CLIENTSOURCE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CLIENTSOURCE_FRIEND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CLIENTSOURCE_HUSBAND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLIENTSOURCE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.clientsource.ClientSource;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private static final String CLIENTSOURCE_EMPTY \u003d \" \" + PREFIX_CLIENTSOURCE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_CLIENTSOURCE_DESC,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                ClientSource.MESSAGE_CONSTRAINTS); // invalid clientsource"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        // while parsing {@code PREFIX_CLIENTSOURCE}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        // alone will reset the clientSources of the {@code Person} being edited,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        // parsing it together with a valid clientsource results in error"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                + CLIENTSOURCE_DESC_FRIEND"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                + CLIENTSOURCE_DESC_HUSBAND"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                + CLIENTSOURCE_EMPTY,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                ClientSource.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                + CLIENTSOURCE_DESC_FRIEND"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                + CLIENTSOURCE_EMPTY + CLIENTSOURCE_DESC_HUSBAND,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                ClientSource.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                + CLIENTSOURCE_EMPTY"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                + CLIENTSOURCE_DESC_FRIEND"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                + CLIENTSOURCE_DESC_HUSBAND,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                ClientSource.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + CLIENTSOURCE_DESC_HUSBAND"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + CLIENTSOURCE_DESC_FRIEND;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                .withClientSources(VALID_CLIENTSOURCE_HUSBAND, VALID_CLIENTSOURCE_FRIEND).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        // clientSources"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CLIENTSOURCE_DESC_FRIEND;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withClientSources(VALID_CLIENTSOURCE_FRIEND).build();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                + CLIENTSOURCE_DESC_FRIEND + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + CLIENTSOURCE_DESC_FRIEND"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + CLIENTSOURCE_DESC_HUSBAND;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                .withClientSources(VALID_CLIENTSOURCE_FRIEND, VALID_CLIENTSOURCE_HUSBAND)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void parse_resetClientSources_success() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + CLIENTSOURCE_EMPTY;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withClientSources().build();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 42,
      "-": 185
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ListCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ARCHIVE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "public class ListCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    private ListCommandParser parser \u003d new ListCommandParser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public void parse_noPrefixArchive_returnsListCommandInActiveMode() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        ListCommand expectedListCommand \u003d new ListCommand();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        // empty string"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertParseSuccess(parser, \"\", expectedListCommand);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        // can contain leading and trailing whitespaces"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertParseSuccess(parser, \"   \", expectedListCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        // random input without archive prefix"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertParseSuccess(parser, \"  Alice   Bob  \", expectedListCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public void parse_prefixArchive_returnsListCommandInArchiveMode() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        ListCommand expectedListCommand \u003d new ListCommand(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        // can contain leading and trailing whitespaces"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertParseSuccess(parser, \"   \" + PREFIX_ARCHIVE + \"    \", expectedListCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        // random input with archive prefix"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertParseSuccess(parser, \"  Alice \" + PREFIX_ARCHIVE + \" Bob  \", expectedListCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        // random input with multiple archive prefix"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertParseSuccess(parser, \"  Alice \" + PREFIX_ARCHIVE"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                + \" Bob  \" + PREFIX_ARCHIVE + \"Charlie\", expectedListCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiJie96": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.clientsource.ClientSource;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import seedu.address.model.person.Priority;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.PolicyDescription;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.PolicyName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private static final String INVALID_CLIENTSOURCE \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private static final String INVALID_NOTE \u003d \" \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private static final String INVALID_PRIORITY \u003d \"x\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private static final String INVALID_POLICYNAME \u003d \"L!f3 T!me\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private static final String INVALID_POLICYDESCRIPTION \u003d \" \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private static final String VALID_CLIENTSOURCE_1 \u003d \"friend from work\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private static final String VALID_CLIENTSOURCE_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    private static final String VALID_NOTE \u003d \"friend\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private static final String VALID_SHORT_PRIORITY \u003d \"l\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private static final String VALID_LONG_PRIORITY \u003d \"low\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private static final String VALID_POLICYNAME \u003d \"Life Time\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private static final String VALID_POLICYDESCRIPTION \u003d \"Covers death, serious illnesses, and disabilities.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public void parsePhone_null_returnsNull() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertNull(ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public void parseAddress_null_returnsNull() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertNull(ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public void parseEmail_null_returnsNull() throws Exception {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertNull(ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void parseClientSource_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseClientSource(null));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void parseClientSource_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseClientSource(INVALID_CLIENTSOURCE));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void parseClientSource_validValueWithoutWhitespace_returnsClientSource() throws Exception {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        ClientSource expectedClientSource \u003d new ClientSource(VALID_CLIENTSOURCE_1);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertEquals(expectedClientSource, ParserUtil.parseClientSource(VALID_CLIENTSOURCE_1));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void parseClientSource_validValueWithWhitespace_returnsTrimmedClientSource() throws Exception {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        String clientSourceWithWhitespace \u003d WHITESPACE + VALID_CLIENTSOURCE_1 + WHITESPACE;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        ClientSource expectedClientSource \u003d new ClientSource(VALID_CLIENTSOURCE_1);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertEquals(expectedClientSource, ParserUtil.parseClientSource(clientSourceWithWhitespace));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void parseClientSources_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseClientSources(null));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void parseClientSources_collectionWithInvalidClientSources_throwsParseException() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                ParserUtil.parseClientSources(Arrays.asList(VALID_CLIENTSOURCE_1, INVALID_CLIENTSOURCE)));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void parseClientSources_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertTrue(ParserUtil.parseClientSources(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void parseClientSources_collectionWithValidClientSources_returnsClientSourceSet() throws Exception {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Set\u003cClientSource\u003e actualClientSourceSet \u003d ParserUtil"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                .parseClientSources(Arrays.asList(VALID_CLIENTSOURCE_1, VALID_CLIENTSOURCE_2));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Set\u003cClientSource\u003e expectedClientSourceSet \u003d new HashSet\u003cClientSource\u003e(Arrays.asList("
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                new ClientSource(VALID_CLIENTSOURCE_1), new ClientSource(VALID_CLIENTSOURCE_2)));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertEquals(expectedClientSourceSet, actualClientSourceSet);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public void parseNote_null_returnsNull() throws Exception {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertNull(ParserUtil.parseNote((String) null));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public void parseNote_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseNote(INVALID_NOTE));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public void parseNote_validValueWithoutWhitespace_returnsNote() throws Exception {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Note expectedNote \u003d new Note(VALID_NOTE);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertEquals(expectedNote, ParserUtil.parseNote(VALID_NOTE));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public void parseNote_validValueWithWhitespace_returnsTrimmedNote() throws Exception {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        String noteWithWhitespace \u003d WHITESPACE + VALID_NOTE + WHITESPACE;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Note expectedNote \u003d new Note(VALID_NOTE);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertEquals(expectedNote, ParserUtil.parseNote(noteWithWhitespace));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    // This does not give a null, but a priority made from null so it is undefined"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void parsePriority_null_returnsNullPriority() throws Exception {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertEquals(ParserUtil.parsePriority((String) null), new Priority(null));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void parsePriority_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePriority(INVALID_PRIORITY));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void parsePriority_validValueWithoutWhitespace_returnsPriority() throws Exception {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        Priority expectedPriority \u003d new Priority(VALID_SHORT_PRIORITY);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertEquals(expectedPriority, ParserUtil.parsePriority(VALID_SHORT_PRIORITY));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void parsePriority_validValueWithWhitespace_returnsTrimmedPriority() throws Exception {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        String priorityWithWhitespace \u003d WHITESPACE + VALID_LONG_PRIORITY + WHITESPACE;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        Priority expectedPriority \u003d new Priority(VALID_LONG_PRIORITY);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertEquals(expectedPriority, ParserUtil.parsePriority(priorityWithWhitespace));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void parsePriority_validShortenedPriority_returnsFullPriority() throws Exception {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        String priorityShort \u003d VALID_SHORT_PRIORITY;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        Priority expectedPriority \u003d new Priority(VALID_LONG_PRIORITY);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertEquals(expectedPriority, ParserUtil.parsePriority(priorityShort));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void parsePolicyName_null_returnsNull() throws Exception {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertEquals(null, ParserUtil.parsePolicyName(null));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void parsePolicyName_validValueWithWhitespace_returnsTrimmedPolicyName() throws Exception {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        String policyNameWithWhiteSpace \u003d WHITESPACE + VALID_POLICYNAME + WHITESPACE;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        PolicyName expectedPolicyName \u003d new PolicyName(VALID_POLICYNAME);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertEquals(expectedPolicyName, ParserUtil.parsePolicyName(policyNameWithWhiteSpace));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void parsePolicyName_validValueWithoutWhiteSpace_returnsPolicyName() throws Exception {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        String policyNameWithoutWhiteSpace \u003d VALID_POLICYNAME;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        PolicyName expectedPolicyName \u003d new PolicyName(VALID_POLICYNAME);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertEquals(expectedPolicyName, ParserUtil.parsePolicyName(policyNameWithoutWhiteSpace));"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void parsePolicyName_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePolicyName(INVALID_POLICYNAME));"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    //"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void parsePolicyDescription_null_returnsNull() throws Exception {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertEquals(null, ParserUtil.parsePolicyDescription(null));"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void parsePolicyDescription_validValueWithWhitespace_returnsTrimmedPolicyDescription() throws Exception {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        String policyDescriptionWithWhiteSpace \u003d WHITESPACE + VALID_POLICYDESCRIPTION + WHITESPACE;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        PolicyDescription expectedPolicyDescription \u003d new PolicyDescription(VALID_POLICYDESCRIPTION);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertEquals(expectedPolicyDescription, ParserUtil.parsePolicyDescription(policyDescriptionWithWhiteSpace));"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void parsePolicyDescription_validValueWithoutWhiteSpace_returnsPolicyDescription() throws Exception {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        String policyDescriptionWithoutWhiteSpace \u003d VALID_POLICYDESCRIPTION;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        PolicyDescription expectedPolicyDescription \u003d new PolicyDescription(VALID_POLICYDESCRIPTION);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertEquals(expectedPolicyDescription, ParserUtil.parsePolicyDescription(policyDescriptionWithoutWhiteSpace));"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void parsePolicyDescription_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePolicyDescription(INVALID_POLICYDESCRIPTION));"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 83,
      "Joven-Heng": 37,
      "-": 171,
      "WeiJie96": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/UnarchiveCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.logic.commands.UnarchiveCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " * outside of the UnarchiveCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " * same path through the UnarchiveCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "public class UnarchiveCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    private UnarchiveCommandParser parser \u003d new UnarchiveCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public void parse_validArgs_returnsUnarchiveCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertParseSuccess(parser, \"1\", new UnarchiveCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnarchiveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiJie96": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ClientListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CLIENTSOURCE_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalClientList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.PolicyList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "public class ClientListTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private final ClientList clientList \u003d new ClientList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertEquals(Collections.emptyList(), clientList.getPersonList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e clientList.resetData(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void resetData_withValidReadOnlyClientList_replacesData() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        ClientList newData \u003d getTypicalClientList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        clientList.resetData(newData);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertEquals(newData, clientList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                .withClientSources(VALID_CLIENTSOURCE_HUSBAND)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        ClientListStub newData \u003d new ClientListStub(newPersons);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e clientList.resetData(newData));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e clientList.hasPerson(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void hasPerson_personNotInClientList_returnsFalse() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertFalse(clientList.hasPerson(ALICE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void hasPerson_personInClientList_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        clientList.addPerson(ALICE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertTrue(clientList.hasPerson(ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInClientList_returnsTrue() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        clientList.addPerson(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                .withClientSources(VALID_CLIENTSOURCE_HUSBAND)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertTrue(clientList.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e clientList.getPersonList().remove(0));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * A stub ReadOnlyClientList whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private static class ClientListStub implements ReadOnlyClientList {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        ClientListStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        public void updateClientListWithPolicyList(PolicyList policyList) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 13,
      "Joven-Heng": 24,
      "-": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.testutil.TypicalPolicies.LIFE_TIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.PolicyList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.util.SamplePolicyDataUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import seedu.address.testutil.ClientListBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertEquals(new ClientList(), new ClientList(modelManager.getClientList()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        userPrefs.setClientListFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        userPrefs.setClientListFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void setClientListFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setClientListFilePath(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void setClientListFilePath_validPath_setsClientListFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        modelManager.setClientListFilePath(path);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertEquals(path, modelManager.getClientListFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void setPolicyListFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setPolicyListFilePath(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void setPolicyListFilePath_validPath_setsPolicyListFilePath() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        modelManager.setPolicyListFilePath(path);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertEquals(path, modelManager.getPolicyListFilePath());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void hasPerson_personNotInClientList_returnsFalse() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void hasPerson_personInClientList_returnsTrue() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public void getIsArchiveMode_init_returnsFalse() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertFalse(modelManager.getIsArchiveMode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public void setIsArchiveMode_setTrue_returnsTrue() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        modelManager.setIsArchiveMode(true);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertTrue(modelManager.getIsArchiveMode());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public void setIsArchiveMode_setFalse_returnsFalse() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        modelManager.setIsArchiveMode(false);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertFalse(modelManager.getIsArchiveMode());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public void getIsArchiveModeProperty_init_returnsFalse() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertFalse(modelManager.getIsArchiveModeProperty().get());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public void setIsArchiveMode_setTrue_updatesIsArchiveModeProperty() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        modelManager.setIsArchiveMode(true);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertTrue(modelManager.getIsArchiveModeProperty().get());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public void setIsArchiveMode_setFalse_updatesIsArchiveModeProperty() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        modelManager.setIsArchiveMode(false);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertFalse(modelManager.getIsArchiveModeProperty().get());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void addPolicy_success() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Policy policy \u003d LIFE_TIME;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        PolicyList policyList \u003d new PolicyList();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        policyList.add(policy);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        modelManager.addPolicy(policy);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertEquals(policyList, modelManager.getPolicyList());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void clearPolicyList_success() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Policy policy \u003d LIFE_TIME;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        modelManager.addPolicy(policy);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        modelManager.clearPolicyList();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertEquals(new PolicyList(), modelManager.getPolicyList());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        ClientList clientList \u003d new ClientListBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        ClientList differentClientList \u003d new ClientList();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        PolicyList policyList \u003d SamplePolicyDataUtil.getSamplePolicyList();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        modelManager \u003d new ModelManager(clientList, userPrefs, policyList);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(clientList, userPrefs, policyList);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        // different clientList -\u003e returns false"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentClientList, userPrefs, policyList)));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(clientList, userPrefs, policyList)));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        differentUserPrefs.setClientListFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(clientList, differentUserPrefs, policyList)));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        // different isArchiveMode -\u003e returns false"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        ModelManager modelManagerCopyInArchiveMode \u003d new ModelManager(clientList, userPrefs, policyList);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        modelManagerCopyInArchiveMode.setIsArchiveMode(true);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertFalse(modelManager.equals(modelManagerCopyInArchiveMode));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 37,
      "Joven-Heng": 15,
      "-": 114,
      "WeiJie96": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void setClientListFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setClientListFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/clientsource/ClientSourceTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "package seedu.address.model.clientsource;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "public class ClientSourceTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ClientSource(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void constructor_invalidClientSourceName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        String invalidClientSourceName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ClientSource(invalidClientSourceName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void isValidClientSourceName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        // null clientsource name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ClientSource.isValidClientSourceName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/model/note/NoteTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "public class NoteTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Note(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void constructor_invalidNoteName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        String invalidNoteName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Note(invalidNoteName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void isValidNoteName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        // null note name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Note.isValidNoteName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/IsArchivePredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "public class IsArchivePredicateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public void test_isInArchive_returnsTrue() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        IsArchivePredicate predicate \u003d new IsArchivePredicate();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").addToArchive().build()));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public void test_isNotInArchive_returnsFalse() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        IsArchivePredicate predicate \u003d new IsArchivePredicate();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiJie96": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CLIENTSOURCE_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NOTE_DOG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_POLICY_DESCRIPTION_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_POLICY_NAME_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getClientSources().remove(0));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                .withClientSources(VALID_CLIENTSOURCE_HUSBAND).withNote(VALID_NOTE_DOG).addToArchive().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                .withClientSources(VALID_CLIENTSOURCE_HUSBAND).withNote(VALID_NOTE_DOG).addToArchive().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                .withClientSources(VALID_CLIENTSOURCE_HUSBAND)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                .withNote(VALID_NOTE_DOG).addToArchive().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        // null phone and email test cases start here"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Person aliceWithoutPhone \u003d new PersonBuilder(ALICE).withoutPhone().build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Person aliceWithoutEmail \u003d new PersonBuilder(ALICE).withoutEmail().build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Person aliceWithoutPhoneAndEmail \u003d new PersonBuilder(ALICE).withoutPhone().withoutEmail().build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        // same name, null phone, null email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withoutPhone().withoutEmail().withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                .withClientSources(VALID_CLIENTSOURCE_HUSBAND).withNote(VALID_NOTE_DOG).addToArchive().build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertTrue(aliceWithoutPhoneAndEmail.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        // same name, null phone, null and non-null email -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withoutPhone().withoutEmail().build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertFalse(aliceWithoutPhone.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        // same name, null phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withoutPhone().withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                .withClientSources(VALID_CLIENTSOURCE_HUSBAND).withNote(VALID_NOTE_DOG).addToArchive().build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertTrue(aliceWithoutPhone.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        // same name, null phone, different email -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withoutPhone().withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertFalse(aliceWithoutPhone.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        // same name, null and non-null phone, null email -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withoutPhone().withoutEmail().build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertFalse(aliceWithoutEmail.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        // same name, null and non-null phone, null and non-null email -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withoutPhone().withoutEmail().build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        // same name, null and non-null phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withoutPhone().withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                .withClientSources(VALID_CLIENTSOURCE_HUSBAND).withNote(VALID_NOTE_DOG).addToArchive().build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        // same name, null and non-null phone, different email -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withoutPhone().withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        // same name, same phone, null email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withoutEmail().withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                .withClientSources(VALID_CLIENTSOURCE_HUSBAND).withNote(VALID_NOTE_DOG).addToArchive().build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertTrue(aliceWithoutEmail.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        // same name, same phone, null and non-null email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withoutEmail().withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                .withClientSources(VALID_CLIENTSOURCE_HUSBAND).withNote(VALID_NOTE_DOG).addToArchive().build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        // same name, different phone, null email -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withoutEmail().build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertFalse(aliceWithoutEmail.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        // same name, different phone, null and non-null email -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withoutEmail().build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        // different clientSources -\u003e returns false"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withClientSources(VALID_CLIENTSOURCE_HUSBAND).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        // different note -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withNote(VALID_NOTE_DOG).build();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        // different policy -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPolicy(VALID_POLICY_NAME_BOB, VALID_POLICY_DESCRIPTION_BOB).build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 15,
      "-": 90,
      "WeiJie96": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PriorityTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "public class PriorityTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void constructor_invalidPriority_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        String invalidPriority \u003d \"x\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Priority(invalidPriority));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void isValidPriority() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        // invalid priority"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"\")); // empty string"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertFalse(Priority.isValidPriority(\" \")); // spaces only"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"X\")); // Not supposed to be X"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"Low\")); // capital letters should NOT work"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        // valid priority numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"L\")); // L"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"l\")); // Small letters should also work"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"low\")); // small letters should work"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void emptyPriority_equals_undefined() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertEquals(new Priority(null).value, new Priority(\"u\").value);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CLIENTSOURCE_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                .withClientSources(VALID_CLIENTSOURCE_HUSBAND)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                .withClientSources(VALID_CLIENTSOURCE_HUSBAND)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 7,
      "-": 167
    }
  },
  {
    "path": "src/test/java/seedu/address/model/policy/PolicyDescriptionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "package seedu.address.model.policy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.testutil.TypicalPolicies;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "public class PolicyDescriptionTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new PolicyDescription(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void constructor_invalidPolicyName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        String illegalPolicyName \u003d \" \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new PolicyDescription(illegalPolicyName));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        PolicyDescription lifeTime \u003d new PolicyDescription(TypicalPolicies.LIFE_TIME_DESCRIPTION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        //Same object returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertEquals(lifeTime, lifeTime);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        //Same String returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        PolicyDescription lifeTimeCopy1 \u003d new PolicyDescription(TypicalPolicies.LIFE_TIME_DESCRIPTION);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertEquals(lifeTime, lifeTimeCopy1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        //Same value returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        PolicyDescription lifeTimeCopy2 \u003d new PolicyDescription(lifeTime.value);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertEquals(lifeTime, lifeTimeCopy2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        //Different class returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertFalse(lifeTime.equals(TypicalPolicies.LIFE_TIME_DESCRIPTION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        //Different value returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertFalse(lifeTime.equals(new PolicyDescription(TypicalPolicies.SAVINGS_DESCRIPTION)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void isValidPolicyDescription() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertTrue(PolicyDescription.isValidPolicyDescription(\"!azx $%^*XD\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertTrue(PolicyDescription.isValidPolicyDescription("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertFalse(PolicyDescription.isValidPolicyDescription(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertFalse(PolicyDescription.isValidPolicyDescription(\"\\n\\n\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/model/policy/PolicyListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "package seedu.address.model.policy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.testutil.TypicalPolicies.LIFE_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.testutil.TypicalPolicies.LIFE_TIME_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.testutil.TypicalPolicies.MISSING_FROM_LIST_POLICY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.testutil.TypicalPolicies.MISSING_FROM_LIST_POLICY_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.testutil.TypicalPolicies.getTypicalPolicyList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import java.util.Hashtable;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "public class PolicyListTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        PolicyList policyList \u003d new PolicyList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new PolicyList(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertEquals(policyList.getHashtableCopy(), new Hashtable\u003c\u003e());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertEquals(policyList, new PolicyList(new Hashtable\u003c\u003e()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        PolicyList typicalPolicyList \u003d getTypicalPolicyList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertEquals(typicalPolicyList, new PolicyList(typicalPolicyList.getHashtableCopy()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void contains() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        PolicyList typicalPolicyList \u003d getTypicalPolicyList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        //check by Policy"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertTrue(typicalPolicyList.contains(LIFE_TIME));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertFalse(typicalPolicyList.contains(MISSING_FROM_LIST_POLICY));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        //check by PolicyName"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertTrue(typicalPolicyList.contains(new PolicyName(LIFE_TIME_NAME)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertFalse(typicalPolicyList.contains(new PolicyName(MISSING_FROM_LIST_POLICY_NAME)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        //check by String"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertTrue(typicalPolicyList.contains(LIFE_TIME_NAME));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertFalse(typicalPolicyList.contains(MISSING_FROM_LIST_POLICY_NAME));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        PolicyList policyList \u003d new PolicyList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        policyList.add(LIFE_TIME);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertTrue(policyList.contains(LIFE_TIME));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertTrue(policyList.contains(LIFE_TIME_NAME));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        PolicyList emptyList \u003d getTypicalPolicyList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        emptyList.clear();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertEquals(emptyList, new PolicyList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertFalse(emptyList.contains(LIFE_TIME));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void getHashTableCopy() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        //check if its a copy"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        PolicyList policyList \u003d getTypicalPolicyList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        policyList.getHashtableCopy().clear();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertFalse(policyList.equals(new PolicyList()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        policyList.getHashtableCopy().put(MISSING_FROM_LIST_POLICY_NAME, MISSING_FROM_LIST_POLICY);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertFalse(policyList.contains(MISSING_FROM_LIST_POLICY));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/model/policy/PolicyNameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "package seedu.address.model.policy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.testutil.TypicalPolicies;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "public class PolicyNameTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new PolicyName(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void constructor_invalidPolicyName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        String illegalPolicyName \u003d \"@!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new PolicyName(illegalPolicyName));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        PolicyName lifeTime \u003d new PolicyName(TypicalPolicies.LIFE_TIME_NAME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        //Same object returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertEquals(lifeTime, lifeTime);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        //Same String returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        PolicyName lifeTimeCopy1 \u003d new PolicyName(TypicalPolicies.LIFE_TIME_NAME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertEquals(lifeTime, lifeTimeCopy1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        //Same value returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        PolicyName lifeTimeCopy2 \u003d new PolicyName(lifeTime.value);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertEquals(lifeTime, lifeTimeCopy2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        //Different class returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertFalse(lifeTime.equals(TypicalPolicies.LIFE_TIME_NAME));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        //Different value returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertFalse(lifeTime.equals(new PolicyName(TypicalPolicies.SAVINGS_NAME)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void isValidPolicyName() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertTrue(PolicyName.isValidPolicyName(\"abcde 12345 XYZ\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertTrue(PolicyName.isValidPolicyName(\"a\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertFalse(PolicyName.isValidPolicyName(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertFalse(PolicyName.isValidPolicyName(\"@!\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/model/policy/PolicyTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "package seedu.address.model.policy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.testutil.TypicalPolicies.LIFE_TIME_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.testutil.TypicalPolicies.LIFE_TIME_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.testutil.TypicalPolicies.SAVINGS_DESCRIPTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.testutil.TypicalPolicies.SAVINGS_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "public class PolicyTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private PolicyName lifeTimeName \u003d new PolicyName(LIFE_TIME_NAME);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private PolicyDescription lifeTimeDescription \u003d new PolicyDescription(LIFE_TIME_DESCRIPTION);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private Policy lifeTimePolicy \u003d new Policy(lifeTimeName, lifeTimeDescription);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Policy(null, null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Policy(lifeTimeName, null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Policy(null, lifeTimeDescription));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        //returns true if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertTrue(lifeTimePolicy.equals(lifeTimePolicy));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        //returns true if constructed from same PolicyName and PolicyDescription"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertTrue(lifeTimePolicy.equals(new Policy(lifeTimeName, lifeTimeDescription)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        //returns false if null"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertFalse(lifeTimePolicy.equals(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        //returns false if different PolicyName"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        PolicyName otherName \u003d new PolicyName(SAVINGS_NAME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertFalse(lifeTimePolicy.equals(new Policy(otherName, lifeTimeDescription)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        //returns false if different description"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        PolicyDescription otherDescription \u003d new PolicyDescription(SAVINGS_DESCRIPTION);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertFalse(lifeTimePolicy.equals(new Policy(lifeTimeName, otherDescription)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        //returns false if both description and name is different"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertFalse(lifeTimePolicy.equals(new Policy(otherName, otherDescription)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private static final String INVALID_CLIENTSOURCE \u003d \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private static final String INVALID_NOTE \u003d \" \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private static final String INVALID_PRIORITY \u003d \"X\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private static final String INVALID_POLICY_NAME \u003d \"L!fe Pl@n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private static final String INVALID_POLICY_DESCRIPTION \u003d \" \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private static final List\u003cJsonAdaptedClientSource\u003e VALID_CLIENTSOURCES \u003d BENSON.getClientSources().stream()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            .map(JsonAdaptedClientSource::new)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private static final String VALID_NOTE \u003d BENSON.getNote().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    private static final boolean VALID_IS_ARCHIVE \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private static final String VALID_PRIORITY \u003d BENSON.getPriority().toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private static final String VALID_POLICY_NAME \u003d BENSON.getPolicy().getPolicyName().value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private static final String VALID_POLICY_DESCRIPTION \u003d BENSON.getPolicy().getDescription().value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public void toModelType_nullPhone_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_NAME,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_EMAIL,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_ADDRESS,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_CLIENTSOURCES,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_NOTE,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_IS_ARCHIVE,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_PRIORITY,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                new JsonAdaptedPolicy(VALID_POLICY_NAME, VALID_POLICY_DESCRIPTION));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Person bensonWithoutPhone \u003d new PersonBuilder(BENSON).withoutPhone().build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertEquals(bensonWithoutPhone, person.toModelType());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public void toModelType_nullEmail_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_NAME,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_PHONE,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_ADDRESS,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_CLIENTSOURCES,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_NOTE,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_IS_ARCHIVE,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_PRIORITY,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                new JsonAdaptedPolicy(VALID_POLICY_NAME, VALID_POLICY_DESCRIPTION));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Person bensonWithoutEmail \u003d new PersonBuilder(BENSON).withoutEmail().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertEquals(bensonWithoutEmail, person.toModelType());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public void toModelType_nullAddress_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_NAME,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_PHONE,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_EMAIL,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_CLIENTSOURCES,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_NOTE,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_IS_ARCHIVE,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_PRIORITY,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                new JsonAdaptedPolicy(VALID_POLICY_NAME, VALID_POLICY_DESCRIPTION));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Person bensonWithoutAddress \u003d new PersonBuilder(BENSON).withoutAddress().build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertEquals(bensonWithoutAddress, person.toModelType());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public void toModelType_nullNote_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_NAME,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_PHONE,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_EMAIL,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_ADDRESS,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_CLIENTSOURCES,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_IS_ARCHIVE,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_PRIORITY,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                new JsonAdaptedPolicy(VALID_POLICY_NAME, VALID_POLICY_DESCRIPTION));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        Person bensonWithoutNote \u003d new PersonBuilder(BENSON).withoutNote().build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        assertEquals(bensonWithoutNote, person.toModelType());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void toModelType_nullPriority_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_NAME,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_PHONE,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_EMAIL,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_ADDRESS,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_CLIENTSOURCES,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_NOTE,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_IS_ARCHIVE,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                new JsonAdaptedPolicy(VALID_POLICY_NAME, VALID_POLICY_DESCRIPTION));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        Person bensonWithoutPriority \u003d new PersonBuilder(BENSON).withoutPriority().build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertEquals(bensonWithoutPriority, person.toModelType());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void toModelType_nullPolicy_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_NAME,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_PHONE,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_EMAIL,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_ADDRESS,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_CLIENTSOURCES,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_NOTE,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_IS_ARCHIVE,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_PRIORITY,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                null);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Person bensonWithoutPriority \u003d new PersonBuilder(BENSON).withoutPolicy().build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        assertEquals(bensonWithoutPriority, person.toModelType());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson("
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                INVALID_NAME,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_PHONE,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_EMAIL,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_ADDRESS,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_CLIENTSOURCES,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_NOTE,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_IS_ARCHIVE,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_PRIORITY,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                new JsonAdaptedPolicy(VALID_POLICY_NAME, VALID_POLICY_DESCRIPTION));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson("
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_PHONE,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_EMAIL,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_ADDRESS,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_CLIENTSOURCES,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                VALID_NOTE,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                VALID_IS_ARCHIVE,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_PRIORITY,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                new JsonAdaptedPolicy(VALID_POLICY_NAME, VALID_POLICY_DESCRIPTION));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson("
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_NAME,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                INVALID_PHONE,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_EMAIL,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_ADDRESS,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_CLIENTSOURCES,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_NOTE,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_IS_ARCHIVE,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_PRIORITY,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                new JsonAdaptedPolicy(VALID_POLICY_NAME, VALID_POLICY_DESCRIPTION));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson("
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_NAME,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_PHONE,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                INVALID_EMAIL,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_ADDRESS,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_CLIENTSOURCES,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_NOTE,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_IS_ARCHIVE,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_PRIORITY,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                new JsonAdaptedPolicy(VALID_POLICY_NAME, VALID_POLICY_DESCRIPTION));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson("
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_NAME,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_PHONE,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_EMAIL,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                INVALID_ADDRESS,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_CLIENTSOURCES,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_NOTE,"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_IS_ARCHIVE,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_PRIORITY,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                new JsonAdaptedPolicy(VALID_POLICY_NAME, VALID_POLICY_DESCRIPTION));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public void toModelType_invalidClientSources_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        List\u003cJsonAdaptedClientSource\u003e invalidClientSources \u003d new ArrayList\u003c\u003e(VALID_CLIENTSOURCES);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        invalidClientSources.add(new JsonAdaptedClientSource(INVALID_CLIENTSOURCE));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson("
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_NAME,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_PHONE,"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_EMAIL,"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_ADDRESS,"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                invalidClientSources,"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_NOTE,"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_IS_ARCHIVE,"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_PRIORITY,"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                new JsonAdaptedPolicy(VALID_POLICY_NAME, VALID_POLICY_DESCRIPTION));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void toModelType_invalidNote_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson("
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_NAME,"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_PHONE,"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_EMAIL,"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_ADDRESS,"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_CLIENTSOURCES,"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                INVALID_NOTE,"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_IS_ARCHIVE,"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_PRIORITY,"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                new JsonAdaptedPolicy(VALID_POLICY_NAME, VALID_POLICY_DESCRIPTION));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void toModelType_invalidPriority_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson("
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_NAME,"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_PHONE,"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_EMAIL,"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_ADDRESS,"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_CLIENTSOURCES,"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_NOTE,"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                VALID_IS_ARCHIVE,"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                INVALID_PRIORITY,"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "                new JsonAdaptedPolicy(VALID_POLICY_NAME, VALID_POLICY_DESCRIPTION));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 154,
      "Joven-Heng": 15,
      "-": 76,
      "WeiJie96": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonClientListStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalClientList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import seedu.address.model.ClientList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import seedu.address.model.ReadOnlyClientList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "public class JsonClientListStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonClientListStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void readClientList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readClientList(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private java.util.Optional\u003cReadOnlyClientList\u003e readClientList(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return new JsonClientListStorage(Paths.get(filePath)).readClientList(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertFalse(readClientList(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readClientList(\"notJsonFormatClientList.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void readClientList_invalidPersonClientList_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readClientList(\"invalidPersonClientList.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void readClientList_invalidAndValidPersonClientList_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readClientList(\"invalidAndValidPersonClientList.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void readAndSaveClientList_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempClientList.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        ClientList original \u003d getTypicalClientList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        JsonClientListStorage jsonClientListStorage \u003d new JsonClientListStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        jsonClientListStorage.saveClientList(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        ReadOnlyClientList readBack \u003d jsonClientListStorage.readClientList(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertEquals(original, new ClientList(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        jsonClientListStorage.saveClientList(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        readBack \u003d jsonClientListStorage.readClientList(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertEquals(original, new ClientList(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        jsonClientListStorage.saveClientList(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        readBack \u003d jsonClientListStorage.readClientList().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertEquals(original, new ClientList(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void saveClientList_nullClientList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveClientList(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Saves {@code clientList} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private void saveClientList(ReadOnlyClientList clientList, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            new JsonClientListStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                    .saveClientList(clientList, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void saveClientList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveClientList(new ClientList(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableClientListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import seedu.address.model.ClientList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "public class JsonSerializableClientListTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableClientListTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsClientList.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonClientList.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonClientList.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        JsonSerializableClientList dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                JsonSerializableClientList.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        ClientList clientListFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        ClientList typicalPersonsClientList \u003d TypicalPersons.getTypicalClientList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertEquals(clientListFromFile, typicalPersonsClientList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        JsonSerializableClientList dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                JsonSerializableClientList.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        JsonSerializableClientList dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                JsonSerializableClientList.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableClientList.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 16,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        userPrefs.setClientListFilePath(Paths.get(\"clientlist.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 1,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalClientList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import seedu.address.model.ClientList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import seedu.address.model.ReadOnlyClientList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        JsonClientListStorage clientListStorage \u003d new JsonClientListStorage(getTempFilePath(\"cl\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        JsonPolicyListStorage policyListStorage \u003d new JsonPolicyListStorage(getTempFilePath(\"pl\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        storageManager \u003d new StorageManager(clientListStorage, userPrefsStorage, policyListStorage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void clientListReadSave() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "         * {@link JsonClientListStorage} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonClientListStorageTest} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        ClientList original \u003d getTypicalClientList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        storageManager.saveClientList(original);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        ReadOnlyClientList retrieved \u003d storageManager.readClientList().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertEquals(original, new ClientList(retrieved));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void getClientListFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertNotNull(storageManager.getClientListFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 2,
      "Joven-Heng": 13,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ClientListBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import seedu.address.model.ClientList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " * A utility class to help with building Clientlist objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " *     {@code ClientList ab \u003d new ClientListBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "public class ClientListBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private ClientList clientList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public ClientListBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        clientList \u003d new ClientList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public ClientListBuilder(ClientList clientList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        this.clientList \u003d clientList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Adds a new {@code Person} to the {@code ClientList} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public ClientListBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        clientList.addPerson(person);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public ClientList build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return clientList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.clientsource.ClientSource;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import seedu.address.model.person.Priority;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        descriptor.setClientSources(person.getClientSources());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        descriptor.setNote(person.getNote());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        descriptor.setPriority(person.getPriority());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Parses the {@code clientSources} into a {@code Set\u003cClientSource\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public EditPersonDescriptorBuilder withClientSources(String... clientSources) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        Set\u003cClientSource\u003e clientSourceSet \u003d Stream.of(clientSources).map(ClientSource::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        descriptor.setClientSources(clientSourceSet);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Sets the {@code Note} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public EditPersonDescriptorBuilder withNote(String note) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        descriptor.setNote(new Note(note));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Sets the {@code Priority} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public EditPersonDescriptorBuilder withPriority(String priority) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        descriptor.setPriority(new Priority(priority));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 6,
      "Joven-Heng": 17,
      "-": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.testutil.TypicalPolicies.LIFE_TIME_DESCRIPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.testutil.TypicalPolicies.LIFE_TIME_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.clientsource.ClientSource;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import seedu.address.model.person.Priority;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.PolicyDescription;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.PolicyName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.util.SampleClientDataUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static final String DEFAULT_NOTE \u003d \"sd\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public static final boolean DEFAULT_IS_ARCHIVE \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static final String DEFAULT_PRIORITY \u003d \"u\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    //PolicyName \u0026 PolicyDescription from typicalpolicies"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static final String DEFAULT_POLICY_NAME \u003d LIFE_TIME_NAME;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static final String DEFAULT_POLICY_DESCRIPTION \u003d LIFE_TIME_DESCRIPTION;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private Set\u003cClientSource\u003e clientSources;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private Note note;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    private boolean isArchive;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private Priority priority;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private Policy policy;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonBuilder} with the default details."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        clientSources \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        note \u003d new Note(DEFAULT_NOTE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        isArchive \u003d DEFAULT_IS_ARCHIVE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        priority \u003d new Priority(DEFAULT_PRIORITY);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        policy \u003d new Policy(new PolicyName(DEFAULT_POLICY_NAME), new PolicyDescription(DEFAULT_POLICY_DESCRIPTION));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        clientSources \u003d new HashSet\u003c\u003e(personToCopy.getClientSources());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        note \u003d personToCopy.getNote();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        isArchive \u003d personToCopy.getIsArchive();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        priority \u003d personToCopy.getPriority();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        policy \u003d personToCopy.getPolicy();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Parses the {@code clientSources} into a {@code Set\u003cClientSource\u003e}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public PersonBuilder withClientSources(String ... clientSources) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        this.clientSources \u003d SampleClientDataUtil.getClientSourceSet(clientSources);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building to null."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public PersonBuilder withoutAddress() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        this.address \u003d null;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building to null."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public PersonBuilder withoutPhone() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        this.phone \u003d null;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building to null."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public PersonBuilder withoutEmail() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        this.email \u003d null;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Sets the {@code Note} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public PersonBuilder withNote(String note) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        this.note \u003d new Note(note);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     * Sets the {@code Note} of the {@code Person} that we are building to null."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public PersonBuilder withoutNote() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        this.note \u003d null;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     * Sets the {@code isArchive} of the {@code Person} that we are building to true."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public PersonBuilder addToArchive() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        this.isArchive \u003d true;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Sets the {@code Priority} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public PersonBuilder withPriority(String priority) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        this.priority \u003d new Priority(priority);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Sets the {@code Priority} of the {@code Person} that we are building to null."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public PersonBuilder withoutPriority() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        this.priority \u003d new Priority(null);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Sets the {@code Policy} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public PersonBuilder withPolicy(String name, String description) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        policy \u003d new Policy(new PolicyName(name), new PolicyDescription(description));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     * Sets the {@code Policy} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public PersonBuilder withoutPolicy() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        policy \u003d null;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return new Person(name, phone, email, address, clientSources, note, isArchive, priority, policy);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 38,
      "Joven-Heng": 34,
      "-": 87,
      "WeiJie96": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLIENTSOURCE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.clientsource.ClientSource;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person) + CommandTestUtil.POLICY_NAME_DESC_AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        person.getClientSources().stream().forEach("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            s -\u003e sb.append(PREFIX_CLIENTSOURCE + s.clientSourceName + \" \")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        sb.append(PREFIX_NOTE + person.getNote().noteName + \" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        sb.append(PREFIX_PRIORITY + person.getPriority().value);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        if (descriptor.getClientSources().isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            Set\u003cClientSource\u003e clientSources \u003d descriptor.getClientSources().get();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            clientSources.forEach(s -\u003e sb.append(PREFIX_CLIENTSOURCE).append(s.clientSourceName).append(\" \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        descriptor.getNote().ifPresent(note -\u003e sb.append(PREFIX_NOTE).append(note.noteName).append(\" \"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        descriptor.getPriority().ifPresent(priority -\u003e sb.append(PREFIX_PRIORITY).append(priority.value));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 11,
      "Joven-Heng": 4,
      "-": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CLIENTSOURCE_FRIEND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CLIENTSOURCE_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NOTE_CAT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NOTE_DOG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_HIGH;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_LOW;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.testutil.TypicalPolicies.LIFE_TIME_DESCRIPTION;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.testutil.TypicalPolicies.LIFE_TIME_NAME;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.testutil.TypicalPolicies.SAVINGS_DESCRIPTION;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import static seedu.address.testutil.TypicalPolicies.SAVINGS_NAME;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.ClientList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            .withClientSources(\"friends\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            .withNote(\"Real Pal\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            .withPriority(\"u\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            .withPolicy(LIFE_TIME_NAME, LIFE_TIME_DESCRIPTION)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            .withClientSources(\"owesMoney\", \"friends\").withNote(\"Snake\").withPriority(\"l\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            .withPolicy(LIFE_TIME_NAME, LIFE_TIME_DESCRIPTION)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withNote(\"Snake\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            .withPriority(\"m\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            .withPolicy(LIFE_TIME_NAME, LIFE_TIME_DESCRIPTION)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            .withClientSources(\"friends\").withNote(\"Snake\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            .withPolicy(LIFE_TIME_NAME, LIFE_TIME_DESCRIPTION)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            .withPriority(\"h\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withNote(\"snake\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            .withPriority(\"u\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            .withPolicy(SAVINGS_NAME, SAVINGS_DESCRIPTION)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withNote(\"snake\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            .withPriority(\"l\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            .withPolicy(SAVINGS_NAME, SAVINGS_DESCRIPTION)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withNote(\"Snake\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            .withPriority(\"m\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            .withPolicy(SAVINGS_NAME, SAVINGS_DESCRIPTION).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withNote(\"sd\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            .withPriority(\"h\").build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            .withPriority(\"u\").build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    // People in archive"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public static final Person JASON \u003d new PersonBuilder().withName(\"Jason Dallar\").withPhone(\"848242411\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            .withEmail(\"jason@example.com\").withAddress(\"toa payoh\").withNote(\"hi\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            .withPriority(\"h\").addToArchive().build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public static final Person KING \u003d new PersonBuilder().withName(\"King Arthur\").withPhone(\"848212231\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            .withEmail(\"king@example.com\").withAddress(\"west mall\").withClientSources(\"friends\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            .withPriority(\"u\").addToArchive().build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public static final Person LINDA \u003d new PersonBuilder().withName(\"Linda Blinda\").withPhone(\"842382424\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            .withEmail(\"linda@example.com\").withAddress(\"chinatown\").withNote(\"hello\").withClientSources(\"snake\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            .withPriority(\"h\").addToArchive().build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public static final Person MONK \u003d new PersonBuilder().withName(\"Monkey\").withPhone(\"841482131\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            .withEmail(\"monk@example.com\").withAddress(\"clementi avenue\")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            .withPriority(\"u\").addToArchive().build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            .withClientSources(VALID_CLIENTSOURCE_FRIEND).withNote(VALID_NOTE_CAT).withPriority(VALID_PRIORITY_HIGH)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            .withoutPolicy()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            .withClientSources(VALID_CLIENTSOURCE_HUSBAND, VALID_CLIENTSOURCE_FRIEND)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            .withNote(VALID_NOTE_DOG).withPriority(VALID_PRIORITY_LOW)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            .withoutPolicy()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Returns an {@code ClientList} with all the typical persons."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static ClientList getTypicalClientList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        ClientList ab \u003d new ClientList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     * Returns an {@code ClientList} with all the typical persons, including cases with archive."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public static ClientList getTypicalClientListWithArchive() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        ClientList ab \u003d new ClientList();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        for (Person person : getTypicalPersonsWithArchive()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersonsWithArchive() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "                FIONA, GEORGE, JASON, KING, LINDA, MONK));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     * Returns an {@code ClientList} with all the typical persons, with only the ones in archive."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public static ClientList getTypicalClientListOnlyArchive() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        ClientList ab \u003d new ClientList();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        for (Person person : getTypicalPersonsOnlyArchive()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersonsOnlyArchive() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(JASON, KING, LINDA, MONK));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WeiJie96"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 35,
      "Joven-Heng": 18,
      "-": 60,
      "WeiJie96": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPolicies.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.PolicyDescription;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.PolicyList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "import seedu.address.model.policy.PolicyName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "public class TypicalPolicies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static final String LIFE_TIME_NAME \u003d \"Life Time\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static final String LIFE_TIME_DESCRIPTION \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            \"Covers death, serious illnesses, and disabilities.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static final String SAVINGS_NAME \u003d \"Savings Scheme\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static final String SAVINGS_DESCRIPTION \u003d \"Profits of up to 10% of input.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static final Policy LIFE_TIME \u003d new Policy("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            new PolicyName(LIFE_TIME_NAME),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            new PolicyDescription(LIFE_TIME_DESCRIPTION));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static final Policy SAVINGS \u003d new Policy("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            new PolicyName(SAVINGS_NAME),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            new PolicyDescription(SAVINGS_DESCRIPTION));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static final String MISSING_FROM_LIST_POLICY_NAME \u003d \"Medishield\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static final String MISSING_FROM_LIST_POLICY_DESCRIPTION \u003d \"Covers COVID.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static final Policy MISSING_FROM_LIST_POLICY \u003d new Policy("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            new PolicyName(MISSING_FROM_LIST_POLICY_NAME),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            new PolicyDescription(MISSING_FROM_LIST_POLICY_DESCRIPTION));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    private TypicalPolicies() {} // prevents instantiation"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static PolicyList getTypicalPolicyList() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        PolicyList list \u003d new PolicyList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        for (Policy p : getTypicalPolicyListasList()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "            list.add(p);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ijavierja"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    public static List\u003cPolicy\u003e getTypicalPolicyListasList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(LIFE_TIME, SAVINGS));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ijavierja"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ijavierja": 48
    }
  }
]
