[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-F13-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-F13-3/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "# CS2103T-F13-3"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "If you would like to know more [about us](https://ay2021s1-cs2103t-f13-3.github.io/tp/AboutUs.html)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "## MediBook"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "![ug](docs/images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "MediBook is a desktop app for managing patient details, optimised for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, MediBook can get your contact management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "MediBook aims to increase efficiency in a clinical setting by providing a convenient interface for clinical staff to record and keep track of patient details."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* If you are interested in using MediBook, head over to our [User Guide](https://ay2021s1-cs2103t-f13-3.github.io/tp/UserGuide.html)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* If you are interested in further developing MediBook, head over to our [Developer Guide](https://ay2021s1-cs2103t-f13-3.github.io/tp/DeveloperGuide.html)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "### Acknowledgement"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 4,
      "wang-jun-hao": 14,
      "-": 2
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "mainClassName \u003d \u0027seedu.medibook.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "run {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    archiveName \u003d \u0027medibook.jar\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 5,
      "divakarmal": 2,
      "-": 69
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "You can reach us at wangjunhao@u.nus.edu, foojingyi@u.nus.edu, E0415577@u.nus.edu, divakar@u.nus.edu, e0425943@u.nus.edu."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "## Project Team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "### Wang Jun Hao"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "\u003cimg src\u003d\"images/wang-jun-hao.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "[[github](https://github.com/wang-jun-hao)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* Role: **Leader**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* Responsibilities:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    * Team Lead"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    * Deliverables and Deadlines"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "### Divakar"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "\u003cimg src\u003d\"images/divakarmal.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "[[github](http://github.com/divakarmal)]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* Role: **Developer**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* Responsibilities:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    * Documentation"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "### Wong Zheng Zhi"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "\u003cimg src\u003d\"images/wong-zz.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "[[github](https://github.com/Wong-ZZ)]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* Role: **Developer**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* Responsibilities:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    * Integration"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    * Testing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "### Foo Jing Yi"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "\u003cimg src\u003d\"images/foojingyi.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "[[github](https://github.com/foojingyi)]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* Role: **Developer**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* Responsibilities:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    * Code Quality"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "### Preston Toh"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "\u003cimg src\u003d\"images/prestontyr.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "[[github](http://github.com/PrestonTYR)]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* Role: **Developer**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* Responsibilities:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    * Scheduling and Tracking"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 35,
      "-": 32
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](diagrams) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "**`Main`** has two classes called [`Main`](../src/main/java/seedu/medibook/Main.java) and [`MainApp`](../src/main/java/seedu/medibook/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "[`Ui.java`](../src/main/java/seedu/medibook/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PatientListPanel`, `PatientProfile`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](../src/main/java/seedu/medibook/ui/MainWindow.java) is specified in [`MainWindow.fxml`](../src/main/resources/view/MainWindow.fxml)."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "The `PatientListPanel` and `PatientProfile` utilises the same space in the MainWindow. The `Logic` component indicates to MainWindow if there is a need to toggle between the two UI parts based on user commands."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "The `PatientProfile` is made up of additional parts inheriting from the abstract `UiPart` class, not shown in this diagram. You may refer to [this section](#patient-profile-gui-feature) to learn more about the `PatientProfile`."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "A JavaFx `TableView` is used for the `PatientListPanel`. Styling for the `TableView` is done using the `TableView.css` file which is also in the `src/main/resources/view` folder."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "[`Logic.java`](../src/main/java/seedu/medibook/logic/Logic.java)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "1. `Logic` uses the `MediBookParser` class to parse the user command."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a patient)."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagramUpdated.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "**API** : [`Model.java`](../src/main/java/seedu/medibook/model/Model.java)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "* stores the medi book data."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPatient\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "**Patient**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "The `Patient`,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "* stores `IC`, `Name`, `DateOfBirth` and `Phone` objects that represent the patient\u0027s IC number, name, date of birth and phone number respectively."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "* stores `Optionals` of `Address`, `Email`, `Height`, `Weight`, `Bmi` and `BloodType` objects."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* `Bmi` is automatically computed and stored within Optional if both `Height` and `Weight` are present."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "**API** : [`Storage.java`](../src/main/java/seedu/medibook/storage/Storage.java)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "* can save the medi book data in json format and read it back."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "### Adding medical notes to patients"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* Each medical note is stored as a `MedicalNote` object."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* Every `patient` has a `MedicalNoteList` object that represents the list of medical notes belonging to that `patient`."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* `NoteCommandParser` parses user\u0027s string input into a `NoteCommand`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* Target `patient` is retrieved from `ModelManager#getPatientToAccess()`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "The following sequence diagram shows how note adding operation works:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "![NoteSequenceDiagramMain](images/NoteSequenceDiagramFocusLogic.png)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "![NoteSequenceDiagramSD](images/NoteSequenceDiagramSDUpdatePatientInModel.png)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Step 1. The user launches the application and `find` the patient to access. "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Note: Every `patient` in the `model` has a `MedicalNoteList` that is initialised as an empty list at "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "program start-up to optimise start-up time."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Step 2. The user then `access`es the patient using the index of the patient in the filtered list. "
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Note: `LogicManager` will load the list of medical notes of the `patient` from storage into program\u0027s memory via"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "`LogicManager#handleMedicalNoteListIo`. `LogicManager` then calls `Patient#setMedicalNoteList()` on the `patient` object to load"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "the list of medical notes onto the `patient` object in memory."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Step 3. While on the patient\u0027s profile page, the user inputs `note n/Dr John c/Patient...`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "The user input is handled by `LogicManager`, which then passes it to `MediBookParser` to be parsed."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Step 4. `MediBookParser` creates an instance of `NoteCommandParser` to parse the user input as a `NoteCommand`. It returns "
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "a `NoteCommand` object to `LogicManager`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Step 5. `LogicManager` then executes the `NoteCommand` via `NoteCommand#execute()`."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Step 6. `NoteCommand#execute()` identifies the target `patient` object via `ModelManager#getPatientToAccess()`."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "It then updates the model with the new medical note added to the patient using `Patient#addMedicalNote()`."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "#### Design consideration"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "`note` command can only be called when viewing a `patient`\u0027s profile (after an `access` command)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "We have decided to implement `note` command this way for 2 reasons:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "1. When user starts MediBook, not all `patient`s\u0027 list of medical notes would have been loaded into the program\u0027s memory. "
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Only allowing `note` after `access` ensures that the patient\u0027s list of medical notes would have been loaded at the point of adding new medical notes."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "2. It allows for a shorter `note` command as the user does not need to specify a target `patient`."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Elaboration on point 1:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* A medical records software contains many `patients`, each with potentially many `medical note`s."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* `MedicalNoteList` of every patient is properly loaded only when necessary (`access` on patient)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* `access`-ing a `patient` loads the stored medical note list and sets the `MedicalNoteList` of the `patient` to the retrieved list"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* Hence, `note` command can only be called when viewing a `patient`\u0027s profile as it ensures that the `MedicalNoteList` has already been properly loaded by executing `access` command beforehand"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "### Account creation and login"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "The account creation feature is facilitated by a new `CreateAccountWindow` class in the UI."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "![CreateAccountSequenceDiagram](images/CreateAccountSequenceDiagram.png)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Step 1. The user launches the application and chooses the `Create Account` option. Then, the user inputs all of the required details."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Step 2. The UI calls `Logic#createAccount()` with the details input by the user."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Step 3. `Storage#createAccount()` converts the new account\u0027s username and password into json format and saves it in a `accounts.json` file."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "The following activity diagram summarises what happens when a user attempts to create an account."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "![CreateAccountActivityDiagram](images/CreateAccountActivityDiagram.png)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "The login feature is facilitated by a new `LoginWindow` class in the UI."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "![LoginSequenceDiagram](images/LoginSequenceDiagram.png)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Step 1. The user inputs his/her login information."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Step 2. The UI calls `Logic#processLoginInfo()` with the login information as input."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Step 3. `Logic#processLoginInfo()` then calls `Storage#login()` on the login information, to check if the information matches any of the account details saved."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Step 4. If there is no match, an error is thrown. If there is a match, the UI then changes from `LoginWindow` to `MainWindow`, which signifies that the user has succesfully logged in."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "### Enhanced find command"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "`FindCommand` supports searching by substring for multiple fields with multiple keywords."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "`FindCommand` is facilitated by `FindCommandParser` which creates one or more `FieldContainsKeywordsPredicate`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "(which implements the `Predicate\u003cPatient\u003e` interface) based on the user input."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Through the `FieldContainsKeywordsPredicate` objects that were created, `FindCommand` then calls "
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "`Model#updateFilteredPatientList(predicate)` to filter the list of patient in `Model` based on the user\u0027s input search query."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "The sequence diagram below illustrates how the `FindCommand` works."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "![FindSequenceDiagram](images/FindSequenceDiagram.png)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `FindCommandParser` "
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "and `FindCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "the end of diagram."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Step 1. The user launches the application and inputs `find n/Steve Johnny i/S95 T00 d/2000 1995`."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "This causes the `LogicManager#execute(String input)` method to be called."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Step 2. `MediBookParser#parseCommand(String input)` is then called, creating a new `FindCommandParser`."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "`FindCommandParser#Parse(String arguments)` is then called and in the process, it creates one or more"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "`FieldContainsKeywordsPredicate` instances(not shown in the sequence diagram). In this example, `FindCommandParser`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "creates three `FieldContainsKeywordsPredicate` instance, corresponding to the three fields to be searched for."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Step 3. `FindCommand` is initialized with `List\u003cPredicate\u003cPatient\u003e\u003e` containing the `FieldContainsKeywordsPredicate`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "instances that were created in the previous step. This `FindCommand` instance in then finally returned as the result for"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "the `MediBookParser#parseCommand(String input)` method call."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Step 4. `FindCommand#execute(Model model)` is called and in turn, `FindCommand` calls the"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "`Model#updateFilteredPatientList(Predicate\u003cPatient\u003e predicate)` method which filters the list of"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "patient in `Model` based on user\u0027s input search query."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "The diagram below illustrates the class diagram of the relevant classes for the find feature."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "![FindClassDiagram](images/FindClassDiagram.png)"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "`FieldContainsKeywordsPredicate` implements the `Predicate\u003cPatient\u003e` interface."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "`FieldContainsKeywordsPredicate` is initialized with a `List\u003cString\u003e` containing the keywords to search for and `Prefix`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "which determines which field of the patient to search for. When `FieldContainsKeywordsPredicate#test(Patient patient)`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "is called, it will check if each keyword is a substring of the specified field of the patient. So long as at least one"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "of the keyword passes the check, `FieldContainsKeywordsPredicate#test(Patient patient)` will return true."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "### Patient profile (GUI feature)"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "This feature allows the application to display a patient\u0027s details in a clean and readable fashion."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "The class diagram below details the full number of classes in the `PatientProfile` package, which is simplified in the [full UI diagram](#ui-component). "
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "This diagram shows only the classes used to display the patient profile, and the associations between these classes."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "![PatientProfileClassDiagram](images/PatientProfileClassDiagram.png)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "Notes: "
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "* All classes used to display a patient profile (shown in the above diagram) inherit from the abstract `UiPart` class. "
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "Hence, they each represent a visible part of the UI."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "* Some of these classes are dependent on the `Model` package which is shown in the [full UI diagram](#ui-component). "
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "Namely, `PatientProfile`, `PersonalDetailsCard`, `MedicalDetailsCard`, `MedicalNotesPanel` and `MedicalNoteCard`."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "This is to retrieve the required information of a `patient`."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "Classes used in this implementation can be described as follows:"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "* `PatientProfile` represents the whole component of the UI displaying the patient\u0027s profile. "
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "Each `PatientProfile` object contains a `PersonalDetailsCard`, a `MedicalDetailsCard` and a `MedicalNotesPanel`."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "* `PersonalDetailsCard` represents a UI element displaying the personal details of a `patient`. "
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "It contains a JavaFX `ListView` displaying `PersonalDetailsRow` instances. "
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "The corresponding UI element is displayed on the top left of the `PatientProfile` UI element."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "* `MedicalDetailsCard` represents a UI element displaying the medical details of a `patient`. "
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "It contains a JavaFX `ListView` displaying `MedicalDetailsRow` instances. "
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "The corresponding UI element is displayed on the bottom left of the `PatientProfile` UI element."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "* `MedicalNotesPanel` represents a UI element displaying the `MedicalNote`s of a `patient`."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "It contains a JavaFX `ListView` displaying `MedicalNoteCard` instances."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "The corresponding UI element is displayed on the right of the `PatientProfile` UI element."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "* `PersonalDetailsRow` represents a single `patient` personal detail. It provides the graphics for a row in the `ListView` of `PersonalDetailsCard`."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "* `MedicalDetailsRow` represents a single `patient` personal detail. It provides the graphics for a row in the `ListView` of `MedicalDetailsCard`."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "* `MedicalNoteCard` represents a single `MedicalNote`. It provides the graphics for an element in the `ListView` of `MedicalNotesPanel`."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "`PatientProfile` is displayed on the `MainWindow` when the `AccessCommand` is invoked. The following sequence diagram shows how accessing a `PatientProfile` works:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "[//]: # (todo)"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "Thereafter, this next sequence diagram shows how displaying the `PatientProfile` works:"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "![PatientProfileSequenceDiagram](images/PatientProfileSequenceDiagram.png)"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* has a need to keep track of a significant number of patients"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "**Value proposition**:"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* Helps users manage a central database for keeping track of patients\u0027 records efficiently."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* Manage patients\u0027 records quickly through a simple and intuitive UI."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* Eliminates the need for physical copies of patients\u0027 records."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* Efficient sharing of data of patients between hospital staff i.e. administrators, nurses, doctors, specialists, etc."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "| `* * *`  | new user                                   | see usage instructions         | refer to instructions when I forget how to use the App                 |"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "| `* * *`  | registration admin                                       | add a patient along with their details (fields)               |                                                                        |"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "| `* * *`  | registration admin                                       | delete a patient\u0027s records                | remove unwanted records from the system                                  |"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "| `* * *`  | registration admin                                       | search for a patient\u0027s information          | retrieve his/her details |"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "| `* *` | registration admin | edit a patient\u0027s details"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "(For all use cases below, the **System** is the `MediBook` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "**UC00 Add a patient**"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "1. User requests to add a patient along with the patient\u0027s details."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "2. MediBook adds the patient to it\u0027s database."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* 1a. MediBook detects an error in one/some of the fields for the patient\u0027s details."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    * 1a1. MediBook shows an error message."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    * 1a2. User requests to add the patient again but with edited details."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    Steps 1a1-1a2 are repeated until the fields provided are correct."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    Use case resumes from step 2."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "* 1b. MediBook detects a missing compulsory field."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    * 1b1. MediBook shows an error message."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    * 1b2. User requests to add the patient again but with compulsory field added."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    Steps 1b1-1b2 are repeated until the compulsory fields are all provided."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    Use case resumes from step 2."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "**UC01 Find a patient**"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "1. User requests to find a specific patient."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "2. MediBook returns the patient."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "* 1a. MediBook detects an error in the syntax of the command."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    * 1a1. MediBook shows an error message."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    * 1a2. User requests to find the patient again but with an updated syntax."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    Steps 1a1-1a2 are repeated until the syntax of the command is correct."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    Use case resumes from step 2."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "**UC02 Delete a patient**"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "1.  User requests to delete a specific patient."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "2.  MediBook deletes the patient."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* 1a. MediBook detects if the given IC is invalid."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    * 1a1. MediBook shows an error message."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    * 1a2. User requests to delete a specific patient by changing the input IC."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     Steps 1a1-1a2 are repeated until the IC provided is valid."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     Use case resumes from step 2."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "2.  Should be able to hold up to 1000 patients without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "4.  Should be simple enough for those who are not proficient in using computers to use."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* **IC**: IC in our system refers to the patient\u0027s identification numbers as provided in the NRIC or FIN."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    * The National Registration Identity Card (abbreviation: NRIC) is the compulsory identity document issued to citizens and permanent residents of Singapore."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    * A Foreign Identification Number, or FIN, is issued to an individual who is a permanent resident of Singapore and long-term pass holders by the Singapore government."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "   1. Double-click the jar file Expected: Shows the Login GUI. The window size may not be optimum."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "   "
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "   1. User can login using a username or password if they already have one or pick the `create account` option instead."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "   "
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "   1. After users login/create account, the GUI will show a set of sample contacts."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "### Deleting a patient"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "1. Deleting a patient while all patients are being shown"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "      Expected: Patient with index 1 in the list is deleted from the program. Details of the deleted patient shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "   2. Test case: `delete`\u003cbr\u003e"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "      Expected: No patient is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "   3. Other incorrect delete commands to try: `delete \u003cindex outside of list range\u003e`, `delete x` \u003cbr\u003e"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "   1. To simulate missing data file:"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "      1. Delete medibook.json file located in \u003cproject_root\u003e/data."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "      2. Run MediBook."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "      Expected: MediBook starts up with a sample list of 6 patients."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "   2. To simulate corrupted file:"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "      1. Locate medibook.json file located in \u003cproject_root\u003e/data."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "      2. Change the field input of a patient to a wrong format. e.g. Change the IC of a patient in the json file to start with \u0027A\u0027 instead of the legal letters \u0027S,T,F,G\u0027."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "      3. Run MediBook."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "      "
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "      Expected: MediBook starts up with no patients in the list. A warning is displayed in console \"Data file not in the correct format. Will be starting with an empty MediBook\"."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "2. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 47,
      "wang-jun-hao": 92,
      "divakarmal": 16,
      "foojingyi": 50,
      "PrestonTYR": 31,
      "-": 267
    }
  },
  {
    "path": "docs/Testing.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Testing guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Running tests"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 1: Using IntelliJ JUnit test runner**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run a subset of tests, you can right-click on a test package,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 2: Using Gradle**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Types of tests"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This project has three types of tests:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "   e.g. `seedu.medibook.commons.StringUtilTest`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "   e.g. `seedu.medibook.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "   e.g. `seedu.medibook.logic.LogicManagerTest`"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 3,
      "-": 33
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "\u003ch1\u003eMediBook User Guide: Everything you need to know about MediBook\u003c/h1\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "MediBook is a **desktop medical records software targeting doctors and administrative staffs in clinics or hospitals to "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "help manage patient details.** It is **optimized for use via a Command Line Interface** (CLI) while "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "still having the benefits of a Graphical User Interface (GUI). If you can type fast, MediBook can get your patient "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "details management tasks done faster than traditional methods."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "This user guide helps you get familiar with its features and get started with using MediBook."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "## 2. Quick start"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "1. Ensure you have Java 11 or above installed in your Computer."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "2. Download the latest medibook.jar from [https://github.com/AY2021S1-CS2103T-F13-3/tp/releases](https://github.com/AY2021S1-CS2103T-F13-3/tp/releases)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "3. Copy the file to the folder you want to use as the home folder for your MediBook."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "4. Double-click the file to start the app."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "5. Login to the program or create an account if you do not already have one."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "6. Type the command in the command box and press Enter to execute it. e.g. typing `help` and pressing Enter will open the help window."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "7. Refer to the Features below for details on each command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "---------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "## 3. Features"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "  e.g. in `add i/IC`, `IC` is a parameter which can be used as `add i/S91234567A`."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "  e.g `n/NAME [w/WEIGHT]` can be used as `n/John Doe w/60.5` or as `n/John Doe`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "### 3.1 Login and Create Account"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Type in your `username` and `password` to login as to the system. If you do not have a `username` and `password`, pick the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "`create account` option, which would let you create a new **doctor** account."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "When creating your new account, fill in your desired `username`, `password`, your `name` and your `MCR`, then click create."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* `username` and `password` need to be at least 5 characters long."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* `MCR` is your medical registration number as given by the Singapore Medical Council, e.g. \u0027M35477G\u0027."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* `MCR` has to be of the format \u0027M@####$\u0027, where @ is a letter/digit, # is a digit and $ is a letter."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "As a **doctor**, you can use all features of MediBook."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Alternatively, you can also login as an **administrative staff** using the username: `admin` and password: `admin`. "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "As an **administrative staff**, you can only add, edit, delete and find patients. "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "You are unable to add, edit or delete medical notes."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "### 3.2 Viewing help : `help`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Shows a message explaining how to access the help page."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "`help`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "### 3.3 Listing all patients: `list`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Shows a list of all patient\u0027s records in the system."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "Anything typed after list will be ignored and the list of all patient records will be displayed."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "\u003ca id\u003d\"addcommand\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "### 3.4 Adding a patient: `add` "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Adds a patient to the system."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "IC, Name, Date of Birth and Phone Number are compulsory fields while the rest are optional."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "`add i/IC n/NAME d/DATE_OF_BIRTH p/PHONE_NUMBER [e/EMAIL] [a/ADDRESS] [h/HEIGHT] [w/WEIGHT] [b/BLOOD_TYPE] "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "[al/ALLERGY]... [con/CONDITION]... [t/TREATMENT]...`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* `PHONE_NUMBER` has to be within 7 to 15 digits long (support for international numbers)."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "* `IC` should be of the format @xxxxxxx#, where @ is a letter S, T, F or G, xxxxxxx is a 7 digit number and # is any letter."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "* `HEIGHT` must be a whole number between 1 - 299 inclusive and is measured in cms."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "* `WEIGHT` must be a positive number correct to 1 decimal place and is measured in kgs."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "* For `ALLERGY`, `CONDITION` and `TREATMENT`, any number of entries can be specified, following the given format for each entry."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "All entries will be added."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "* If multiple values for the same personal detail field are given, the later one is accepted. For eg. if you type `add i/S9123456A n/Divakar d/29-02-2000 p/91234567 b/A+ b/O+`, O+ will be accepted as the actual blood type."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "**Examples:**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "`add i/S9123456A n/Divakar d/29-02-2000 p/91234567`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "`add i/T0123456Q n/Divakar d/29-02-2000 p/91234567 e/divakarmal@medibook.com a/NUS, Kent Ridge Drive h/178 w/75.0 b/O+"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "al/Peanut con/Mitral valve prolapse con/asthma t/EpiPen t/metered-dose inhaler`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "\u003ca id\u003d\"editcommand\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "### 3.5 Editing a patient: `edit` "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Edits the specified patient\u0027s information from MediBook. "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "The `edit` command is also used to fill in unspecified fields."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "`edit INDEX [i/IC] [n/NAME] [d/DATE OF BIRTH] [p/PHONE] [e/EMAIL] [a/ADDRESS] [h/HEIGHT] [w/WEIGHT] [b/BLOOD TYPE] "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "[al/ALLERGY]... [con/CONDITION]... [t/TREATMENT]...`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* `edit` on a field that already exists will update it from the previous value to the new value"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* `edit` on an optional field that was not specified at the point of adding patient will fill the field with the given value"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "**Examples:**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "`edit 1 n/Divakar` edits the name of patient with index `1` in the displayed list to `Divakar`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "`edit 3 n/Divakar p/91111111 h/201` edits the name, phone number and height of patient with index `3` in the displayed list to `Divakar`, `91111111` and `201`cm  respectively."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "### 3.6 Deleting a patient : `delete`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Deletes the specified patient from MediBook."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "`delete INDEX`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* `delete 1` deletes the patient with index `1` in the displayed list"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "### 3.7 Finding a patient: `find`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Finds patient records by multiple fields and multiple keywords."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "`find [i/IC] [n/NAME] [d/DATE_OF_BIRTH] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [h/HEIGHT] [w/WEIGHT] [b/BLOOD_TYPE]`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "* At least one field must be specified for the command to be valid"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* The search is case-insensitive. e.g `S9123456A` will match `s9123456a`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "* The search will match substrings e.g `S912345` will match `S9123456A`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "* Search will return all records that matches any of the keywords for each field e.g `n/Alice Bob` will return the records of all patients with name containing `Alice` or `Bob`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "**Examples:**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "* `find i/S9123456A` returns the patient record with IC `S9123456A`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "* `find n/Billy Alice a/Clementi i/S99` returns the patient records with Name containing `Billy` or `Alice`, Address containing `Clementi` and IC containing `S99`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "\u003ca id\u003d\"accesscommand\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "### 3.8 Accessing a patient\u0027s profile : `access` "
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "Accesses a specified patient\u0027s profile in MediBook."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "`access INDEX`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* Use the `list` command to return to the main list page"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "* Each patient\u0027s profile consists of 3 sections: Personal Details, Medical Details and Medical Notes."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    * Personal Details section (top left): Shows the personal details of the patient, including their Name, IC, Date of Birth, and Phone Number, as well as their Email, Address, Height, Weight, BMI and Blood Type if available."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    * Medical Details section (bottom left): Shows medical details as tags separated into 3 categories, namely: Allergies, (preexisting) Conditions and (ongoing) Treatments."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    * Medical Notes section (right): A scrollable panel showing the list of medical notes recorded for the specified patient."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "### 3.9 Adding a medical note: `addnote`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Adds a medical note to a patient."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "If you are a doctor, you can add a medical note to your patient when viewing his/her profile to keep track of consultations"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "with your patients. MediBook will automatically add the medical note to the patient displayed on your screen."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "`addnote [d/DATE] c/CONTENT_OF_MEDICAL_NOTE`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* You have to be on a patient\u0027s profile page to add a medical note. You can do this by first `find`-ing the patient by IC"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "when on the main list and then `access`-ing the patient\u0027s index on the filtered list."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* You have to be logged in as a Doctor."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* MediBook will automatically set you as the author of the medical note."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* For your convenience, the date field can be omitted. MediBook will automatically select today\u0027s date."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* If you specify the date of the medical note, it cannot be in the future."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Context: You are logged in as Dr John Doe (M06371K) and viewing the profile page of patient with IC \u0027S9123456A\u0027"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* `addnote c/Patient complains of stomach ache and headache. No signs of fever. Prescribed painkillers and probiotics.`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Adds a medical note that is dated today, by Dr John Doe (M06371K) with content \"Patient complains of stomach ache and headache. "
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "No signs of fever. Prescribed painkillers and probiotics.\" to patient with IC \u0027S9123456A\u0027."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "### 3.10 Editing a medical note: `editnote`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Edits the date and/or content of an existing medical note belonging to a patient, authored by you."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "If you are a doctor, you can edit the medical note belonging to your patient when viewing his/her profile. You may want to use this"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "feature to correct any typos or update incorrect dates."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "`editnote INDEX [d/DATE] [c/CONTENT_OF_MEDICAL_NOTE]`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* You have to be on a patient\u0027s profile page to edit a medical note. You can do this by first `find`-ing the patient by IC"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "when on the main list and then `access`-ing the patient\u0027s index on the filtered list."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* You can only edit notes that are authored by you."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* `INDEX` refers to the index of the medical note displayed in the list of medical notes."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* If you change the date of the medical note, the new date cannot be in the future."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Context: You are logged in as Dr John Doe (M06371K), viewing the profile page of patient with IC \u0027S9123456A\u0027 with "
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "the medical note at index 1 authored by you."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* `editnote 1 d/20-02-2018 c/Patient is having migraine.`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Updates the date of the medical note with index 1 in the displayed list of medical notes "
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "to \u002720-02-2018\u0027 and content to \u0027Patient is having migraine.\u0027."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "### 3.11 Deleting a medical note: `deletenote`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Deletes a medical note belonging to a patient, authored by you."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "If you are a doctor, you can delete an existing medical note belonging to your patient when viewing his/her profile."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "`deletenote INDEX`"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* You have to be on a patient\u0027s profile page to delete a medical note. You can do this by first `find`-ing the patient by IC"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "when on the main list and then `access`-ing the patient\u0027s index on the filtered list."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* You can only delete notes that are authored by you."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* `INDEX` refers to the index of the medical note displayed in the list of medical notes."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Context: You are logged in as Dr John Doe (M06371K), viewing the profile page of patient with IC \u0027S9123456A\u0027 with "
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "the medical note at index 1 authored by you."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "* `deletenote 1`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Deletes the medical note with index 1 in the displayed list of medical notes belonging to patient with IC \u0027S9123456A\u0027."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "### 3.12 Exiting the program : `exit`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "**Format:** "
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "`exit`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "### 3.13 Charts"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "MediBook keeps a record of a patient\u0027s height and weight. This record can be viewed in chart form when [accessing a patient\u0027s profile](#accesscommand)."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "[Adding a patient](#addcommand) or [Editing a patient\u0027s profile](#editcommand) will automatically update the patient\u0027s height and weight records (assuming the height/weight field is not empty)."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "MediBook only stores the latest height/weight record of the day. This means that editing a patient\u0027s height or weight multiple times"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "within a single day, only the last edit of the patient\u0027s height/weight would be recorded."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "MediBook also derives a patient\u0027s BMI records based on the patient\u0027s height and weight records. As of v1.3, a patient\u0027s BMI"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "record for a particular date can only be derived if the patient also has both the height and weight records on that day."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "### 3.14 Saving the data"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Patients\u0027 data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "## 4. FAQ"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous MediBook home folder."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "## 5. Command summary"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "**Help** | `help`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "**List** | `list`"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "**Add** | `add i/IC n/NAME d/DATE_OF_BIRTH p/PHONE_NUMBER [e/EMAIL] [a/ADDRESS] [h/HEIGHT] [w/WEIGHT] [b/BLOOD_TYPE]` \u003cbr\u003e e.g.,\u003cbr\u003e`add i/S9123456A n/Divakar d/29-02-2000 p/91234567` \u003cbr\u003e `add i/T0123456Q n/Divakar d/29-02-2000 p/91234567 e/divakarmal@medibook.com a/NUS, Kent Ridge Drive h/178 w/75.0 b/O+`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "**Edit** | `edit INDEX [i/IC] [n/NAME] [d/DATE OF BIRTH] [p/PHONE] [e/EMAIL] [a/ADDRESS] [h/HEIGHT] [w/WEIGHT] [b/BLOOD TYPE][t/TAG]` \u003cbr\u003e e.g., \u003cbr\u003e `edit 1 n/Divakar` \u003cbr\u003e `edit 3 n/Divakar p/91111111 h/201`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "**Delete** | `delete INDEX`\u003cbr\u003e e.g., `delete 1`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "**Find** | `find [i/IC] [n/NAME] [d/DATE_OF_BIRTH] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [h/HEIGHT] [w/WEIGHT] [b/BLOOD_TYPE]`\u003cbr\u003e e.g., \u003cbr\u003e `find i/G1234567S`\u003cbr\u003e`find n/Jack i/T00 dob/2000 h/17 a/Changi`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "**Access** | `access INDEX` \u003cbr\u003e e.g., `access 1`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "**Add Note** | `addnote [d/DATE] c/CONTENT_OF_MEDICAL_NOTE` \u003cbr\u003e e.g. `addnote c/Patient is having fever. Prescribed panadol.`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "**Edit Note** | `editnote INDEX [d/DATE] [c/CONTENT_OF_MEDICAL_NOTE]` \u003cbr\u003e e.g. `editnote 1 d/20-02-2018 c/Patient is having migraine.`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "**Delete Note** | `deletenote INDEX` \u003cbr\u003e e.g. `deletenote 1`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "**Exit** | `exit`"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 53,
      "wang-jun-hao": 126,
      "divakarmal": 3,
      "foojingyi": 13,
      "PrestonTYR": 14,
      "-": 94
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deletePatient(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveMediBook(mediBook)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 2,
      "-": 36
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "MediBook *-right-\u003e \"1\" UniquePatientList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "MediBook *-right-\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "UniqueTagList -[hidden]down- UniquePatientList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "UniqueTagList -[hidden]down- UniquePatientList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList *-right-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "UniquePatientList o-right-\u003e Patient"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "Patient -up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "Patient *--\u003e Name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "Patient *--\u003e Phone"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "Patient *--\u003e Email"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "Patient *--\u003e Address"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 10,
      "-": 11
    }
  },
  {
    "path": "docs/diagrams/CommitActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "if () then ([command commits MediBook])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    :Purge redunant states;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    :Save MediBook to"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    mediBookStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 3,
      "-": 12
    }
  },
  {
    "path": "docs/diagrams/CreateAccountActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ":User inputs details;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ":Logic executes the string input;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "if () then ([user details are of an acceptable format])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    :Logic calls Storage to save the user details;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "else ([incorrect format])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    :Logic throws a invalid value error;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "PrestonTYR": 15
    }
  },
  {
    "path": "docs/diagrams/CreateAccountSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "user -[USER_COLOR]\u003e ui : user details"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "ui -[UI_COLOR]\u003e logic : createAccount(user details)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : createAccount(user details)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "storage --[STORAGE_COLOR]\u003e storage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "PrestonTYR": 31
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "participant \":MediBookParser\" as MediBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(\"delete 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "LogicManager -\u003e MediBookParser : parseCommand(\"delete 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "activate MediBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "MediBookParser -\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "DeleteCommandParser --\u003e MediBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "MediBookParser -\u003e DeleteCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "DeleteCommandParser --\u003e MediBookParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e MediBookParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "MediBookParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "deactivate MediBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "DeleteCommand -\u003e Model : deletePatient(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult --\u003e DeleteCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 11,
      "-": 58
    }
  },
  {
    "path": "docs/diagrams/FindClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "skinparam arrowColor LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Interface \"Predicate\u003cT\u003e\" \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "class FieldContainsKeywordsPredicate"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Class FileUtil"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Class FindCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "class FindCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "FieldContainsKeywordsPredicate .up-|\u003e \"Predicate\u003cT\u003e\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "FieldContainsKeywordsPredicate .-\u003e FileUtil"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "FieldContainsKeywordsPredicate .left-\u003e Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "FindCommand o--up\u003e \"1..*\" FieldContainsKeywordsPredicate"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "FindCommand .-\u003e Model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "FindCommandParser .-\u003e FindCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "FindCommandParser .-\u003e FieldContainsKeywordsPredicate"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "FindCommandParser .-\u003e Prefix"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 25
    }
  },
  {
    "path": "docs/diagrams/FindSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "participant \":MediBookParser\" as MediBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "participant \":FindCommandParser\" as FindCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "participant \":FindCommand\" as FindCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "[-\u003e LogicManager : execute(input)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "LogicManager -\u003e MediBookParser : parseCommand(input)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "activate MediBookParser"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "create FindCommandParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "MediBookParser -\u003e FindCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "activate FindCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "FindCommandParser --\u003e MediBookParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "deactivate FindCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "MediBookParser -\u003e FindCommandParser : parse(arguments)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "activate FindCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "create FindCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "FindCommandParser -\u003e FindCommand : FindCommand(predicates)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "activate FindCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "FindCommand --\u003e FindCommandParser"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "deactivate FindCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "FindCommandParser --\u003e MediBookParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "deactivate FindCommandParser"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "MediBookParser --\u003e LogicManager"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "deactivate MediBookParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "destroy FindCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "LogicManager -\u003e FindCommand : execute(model)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "activate FindCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "FindCommand -\u003e Model : updateFilteredPatientList(predicate)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Model --\u003e FindCommand"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "FindCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "deactivate FindCommand"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "FindCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "destroy FindCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 62
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "Class MediBookParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "LogicManager --\u003e\"1\" MediBookParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "MediBookParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 3,
      "-": 59
    }
  },
  {
    "path": "docs/diagrams/LoginSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "user -[USER_COLOR]\u003e ui : input login details"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "ui -[UI_COLOR]\u003e logic : login(\"details\")"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : checkAccountDetails(\"details\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "ui -[UI_COLOR]\u003e ui: switch to main window"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "PrestonTYR": 28
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "Interface ReadOnlyMediBook \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "Class MediBook"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "Class ReadOnlyMediBook"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "Package Patient {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "Class Patient"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Class IC"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Class DateOfBirth"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Class Height"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Class Weight"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Class Bmi"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Class BloodType"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Class Address"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class Email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Class Phone"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "Class UniquePatientList"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "MediBook .up.|\u003e ReadOnlyMediBook"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "ModelManager o--\u003e \"1\" MediBook"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "MediBook *--\u003e \"1\" UniquePatientList"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "UniquePatientList o--\u003e \"*\" Patient"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Patient *--\u003e \"1\" IC"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Patient *--\u003e \"1\" DateOfBirth"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Patient *--\u003e \"1\" Name"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Patient *--\u003e \"1\" Phone"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Patient *--\u003e \"0..1\" Email"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Patient *--\u003e \"0..1\" Address"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Patient *--\u003e \"0..1\" Height"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Patient *--\u003e \"0..1\" Weight"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Patient *--\u003e \"0..1\" BloodType"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Patient *--\u003e \"0..1\" Bmi"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "Patient *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Bmi --\u003e Height"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Bmi --\u003e Weight"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "IC -[hidden]right-\u003e Name"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Name -[hidden]right-\u003e DateOfBirth"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "DateOfBirth -[hidden]right-\u003e Phone"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Phone -[hidden]right-\u003e Address"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "Address -[hidden]right-\u003e Email"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Bmi -[hidden]down-\u003e Height"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Bmi -[hidden]down-\u003e Weight"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "ModelManager --\u003e\"1\" Patient : filtered list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 12,
      "PrestonTYR": 23,
      "-": 39
    }
  },
  {
    "path": "docs/diagrams/NoteSequenceDiagramFocusLogic.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "participant \":MediBookParser\" as MediBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "participant \":NoteCommandParser\" as NoteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "participant \"nc:NoteCommand\" as NoteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "participant \"r:CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "participant \"mn:MedicalNote\" as MedicalNote MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "[-\u003e LogicManager : execute(\"note n/Dr John c/Patient...\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "LogicManager -\u003e MediBookParser : parseCommand(\"note n/Dr John c/Patient...\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "activate MediBookParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "create NoteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "MediBookParser -\u003e NoteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "activate NoteCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "NoteCommandParser --\u003e MediBookParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "deactivate NoteCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "MediBookParser -\u003e NoteCommandParser : parse(\"n/Dr John c/Patient...\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "activate NoteCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "create MedicalNote"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "NoteCommandParser -\u003e MedicalNote"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "activate MedicalNote"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "MedicalNote --\u003e NoteCommandParser : mn"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "deactivate MedicalNote"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "create NoteCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "NoteCommandParser -\u003e NoteCommand : NoteCommand(mn)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "activate NoteCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "NoteCommand --\u003e NoteCommandParser : nc"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "deactivate NoteCommand"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "NoteCommandParser --\u003e MediBookParser : nc"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "deactivate NoteCommandParser"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "NoteCommandParser -[hidden]-\u003e MediBookParser"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "destroy NoteCommandParser"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "MediBookParser --\u003e LogicManager : nc"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "deactivate MediBookParser"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "LogicManager -\u003e NoteCommand : execute()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "activate NoteCommand"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "ref over NoteCommand, Model : update patient in model"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "NoteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "CommandResult --\u003e NoteCommand : r"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "NoteCommand --\u003e LogicManager : r"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "deactivate NoteCommand"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "[\u003c--LogicManager : r"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 75
    }
  },
  {
    "path": "docs/diagrams/NoteSequenceDiagramSDUpdatePatientInModel.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "mainframe sd update patient in model"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "participant \"nc:NoteCommand\" as NoteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "participant \":ModelManager\" as ModelManager MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "participant \"dp:Patient\" as Patient MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "activate NoteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "NoteCommand --\u003e ModelManager : getPatientToAccess()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "activate ModelManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "ModelManager --\u003e NoteCommand : dp"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "deactivate ModelManager"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "NoteCommand --\u003e Patient : addMedicalNote(mn)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "activate Patient"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "Patient --\u003e NoteCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "deactivate Patient"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 29
    }
  },
  {
    "path": "docs/diagrams/PatientProfileClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package PatientProfile \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "Class PatientProfile"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "Class PersonalDetailsCard"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "Class PersonalDetailsRow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "Class MedicalDetailsCard"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "Class MedicalDetailsRow"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "Class MedicalNotesPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "Class MedicalNoteCard"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "PatientProfile *--\u003e \"1\" PersonalDetailsCard"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "PatientProfile *--\u003e \"1\" MedicalDetailsCard"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "PatientProfile *--\u003e \"1\" MedicalNotesPanel"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "PersonalDetailsCard --\u003e \"4..10\" PersonalDetailsRow"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "MedicalDetailsCard --\u003e \"1\" MedicalDetailsRow"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "MedicalNotesPanel --\u003e \"*\" MedicalNoteCard"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 26
    }
  },
  {
    "path": "docs/diagrams/PatientProfileSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "participant \":MainWindow\" as MainWindow UI_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "box PatientProfile UI_COLOR_T1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "participant \":PatientProfile\" as PatientProfile UI_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "participant \":PersonalDetailsCard\" as PersonalDetailsCard UI_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "participant \":PersonalDetailsRow\" as PersonalDetailsRow UI_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "participant \":MedicalDetailsCard\" as MedicalDetailsCard UI_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "participant \":MedicalDetailsRow\" as MedicalDetailsRow UI_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "participant \":MedicalNotesPanel\" as MedicalNotesPanel UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "participant \":MedicalNoteCard\" as MedicalNoteCard UI_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "create PatientProfile"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "MainWindow -\u003e PatientProfile: PatientProfile(patient)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "activate PatientProfile"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "create PersonalDetailsCard"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "PatientProfile -\u003e PersonalDetailsCard"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "activate PersonalDetailsCard"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "PersonalDetailsCard -\u003e PersonalDetailsCard: fillListView()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "activate PersonalDetailsCard"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "loop for all details"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    create PersonalDetailsRow"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    PersonalDetailsCard -\u003e PersonalDetailsRow"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    activate PersonalDetailsRow"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    PersonalDetailsCard \u003c-- PersonalDetailsRow"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    deactivate PersonalDetailsRow"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "end"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "deactivate PersonalDetailsCard"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "PatientProfile \u003c-- PersonalDetailsCard"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "deactivate PersonalDetailsCard"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "create MedicalDetailsCard"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "PatientProfile -\u003e MedicalDetailsCard"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "activate MedicalDetailsCard"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "loop for all details"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    create MedicalDetailsRow"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    MedicalDetailsCard -\u003e MedicalDetailsRow"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    activate MedicalDetailsRow"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    MedicalDetailsCard \u003c-- MedicalDetailsRow"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    deactivate MedicalDetailsRow"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "end"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "PatientProfile \u003c-- MedicalDetailsCard"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "deactivate MedicalDetailsCard"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "create MedicalNotesPanel"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "PatientProfile -\u003e MedicalNotesPanel"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "activate MedicalNotesPanel"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "loop for all medical notes"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    create MedicalNoteCard"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    MedicalNotesPanel -\u003e MedicalNoteCard"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    activate MedicalNoteCard"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    MedicalNotesPanel \u003c-- MedicalNoteCard"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    deactivate MedicalNoteCard"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "end"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "PatientProfile \u003c-- MedicalNotesPanel"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "deactivate MedicalNotesPanel"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "MainWindow \u003c-- PatientProfile"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "deactivate PatientProfile"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 73
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "Interface MediBookStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Interface MedicalNoteListStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "Class JsonMediBookStorage"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "StorageManager .up.|\u003e Storage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "StorageManager o--\u003e MediBookStorage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "StorageManager o-left-\u003e MedicalNoteListStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "JsonMediBookStorage .left.|\u003e MediBookStorage"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "JsonMediBookStorage .down.\u003e JsonSerializableMediBookStorage"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "JsonMedicalNoteListStorage .right-|\u003e MedicalNoteListStorage"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "JsonMedicalNoteListStorage .up-\u003e JsonSerializableMedicalNoteListStorage"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "JsonSerializableMedicalNoteListStorage .up-\u003e JsonAdaptedMedicalNote"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "JsonSerializableMediBookStorage .right.\u003e JsonSerializablePatient"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "JsonSerializablePatient .right.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 6,
      "divakarmal": 7,
      "-": 16
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "Class PatientListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "Package PatientProfile {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "Class PatientProfile"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "MainWindow *-down--\u003e PatientListPanel"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "MainWindow *--\u003e PatientProfile"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "PatientListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "PatientProfile -up-|\u003e UiPart"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "PatientListPanel .right.\u003e Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "PatientProfile .right.\u003e Model"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "PatientListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 3,
      "foojingyi": 11,
      "-": 51
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState0.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title Initial state"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    class State1 as \"__mb0:MediBook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    class State2 as \"__mb1:MediBook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    class State3 as \"__mb2:MediBook__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "hide State2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState1.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"delete 5\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    class State1 as \"__mb0:MediBook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    class State2 as \"__mb1:MediBook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    class State3 as \"__mb2:MediBook__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 3,
      "-": 19
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState2.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"add n/David\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    class State1 as \"__mb0:MediBook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    class State2 as \"__mb1:MediBook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    class State3 as \"__mb2:MediBook__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState3.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"undo\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    class State1 as \"__mb0:MediBook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    class State2 as \"__mb1:MediBook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    class State3 as \"__mb2:MediBook__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState4.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"list\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    class State1 as \"__mb0:MediBook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    class State2 as \"__mb1:MediBook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    class State3 as \"__mb2:MediBook__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState5.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"clear\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    class State1 as \"__mb0:MediBook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    class State2 as \"__mb1:MediBook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    class State3 as \"__mb3:MediBook__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "note right on link: State ab2 deleted."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 3,
      "-": 18
    }
  },
  {
    "path": "docs/diagrams/UndoSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "participant \":MediBookParser\" as MediBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"u:UndoCommand\" as UndoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "participant \":VersionedMediBook\" as VersionedMediBook MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(undo)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "LogicManager -\u003e MediBookParser : parseCommand(undo)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "activate MediBookParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "create UndoCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "MediBookParser -\u003e UndoCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "UndoCommand --\u003e MediBookParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "MediBookParser --\u003e LogicManager : u"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "deactivate MediBookParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e UndoCommand : execute()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "UndoCommand -\u003e Model : undoMediBook()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "Model -\u003e VersionedMediBook : undo()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "activate VersionedMediBook"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "VersionedMediBook -\u003e VersionedMediBook :resetData(ReadOnlyMediBook)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "VersionedMediBook --\u003e Model :"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "deactivate VersionedMediBook"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e UndoCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "destroy UndoCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 14,
      "-": 39
    }
  },
  {
    "path": "docs/diagrams/tracing/LogicSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":LogicManager\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "Participant \":MediBookParser\" as abp LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":EditCommandParser\" as ecp LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \"command:EditCommand\" as ec LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e logic : execute"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "logic -\u003e abp ++: parseCommand(commandText)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "create ecp"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp ++: parse(arguments)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "create ec"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "ecp -\u003e ec ++: index, editPatientDescriptor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "ec --\u003e ecp --"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "ecp --\u003e abp --: command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "abp --\u003e logic --: command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 2,
      "-": 19
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "title: MediBook"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-F13-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-F13-3/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-F13-3/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-F13-3/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "**MediBook is a desktop application for managing your patient record.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "* If you are interested in using MediBook, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "* If you are interested about developing MediBook, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "PrestonTYR": 6,
      "-": 13
    }
  },
  {
    "path": "docs/team/prestontyr.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "title: Preston Toh\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "## Project: MediBook"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "MediBook is a desktop app for managing patients, optimised for use via a Command Line Interface (CLI) while still"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "having the benefits of a Graphical User Interface (GUI). If you are a doctor or an administrative staff in a"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "hospital or clinic and can type fast, MediBook can help you keep track of patients faster than traditional apps."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "MediBook contains a central database of patients and supports operations to add, delete and edit patients. The"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "app keeps track of patient\u0027s personal details, `IC Number, Name, Date of Birth, Phone Number, Email Address`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "medical details, `Height, Weight, BMI, BloodType`. "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "MediBook also supports operations to add, delete and edit medical notes for patients. Each note contains a date,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "doctor and the contents of the note."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "**New Feature:** Added the ability to create accounts and login into MediBook."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "* What it does: Allows the user to create an account linked with their MCR, which is the identification number for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "a doctor\u0027s medical license and login to the MediBook system using that account."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "* Justification: Since medical data is considered private information and not everyone should have access to it,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "the implementation of a login feature ensures that only doctors and medical staff can access the system and the"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "private information inside."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "* Highlights: This feature required the implementation of multiple UI elements, `LoginWindow` and `CreateAccountWindow`."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "It also required an `Account` class and `UserAccountsList` as a list of accounts to check against when logging in."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "This implementation was challenging as it required learning and understanding how JavaFX interacts with the program and"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "adding a way to store account information."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "**New Feature:** Added the ability to access a patient\u0027s profile, which shows all their information."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "* What it does: Allows the user to access a patient\u0027s profile, which shows all of a patient\u0027s information along with"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "medical notes oertaining to the patient."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "* Justification: This feature improves the usability of the product. Since each patient has many fields of information"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "along with plenty of medical notes, having all of the information displayed while viewing the list of patients will make"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "it cluttered and difficult to use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "* Highlights: This feature required a command, which is parsed by the logic manager to also interact with the UI element"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "of the application. This was challenging as it required changing how the CommandResult worked, so that when the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "MainWindow parses the CommandResult, it knows if it should switch the regions shown on the UI."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "**New Feature:** Reworked the patient model such that some fields can be optional when creating a new patient."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "* What it does: Allows the user to create a new patient with only the compulsory fields of `IC, Name, Date of Birth and"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "Phone Number`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "* Justification: As not all fields may be available to the user at the point of patient creation, fields that are not"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "important for identifying a patient are made optional and can be empty."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "* Highlights: This feature required changing how `AddCommand` and `EditCommand` interacted with the `Patient` class."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "This was challenging as the use of `Optionals` had to be implemented throughout the commands and how they are parsed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "**Code Contributed:** [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dprestontyr)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "* Ensured milestones set were met project team members."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "* Closed issues that were completed or issues that we decided not to resolve on GitHub."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "**Enhancements to Existing Features:**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "* Wrote additional test cases for existing features. (Pull requests [\\#76](https://github.com/AY2021S1-CS2103T-F13-3/tp/pull/76))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "**Documentation:**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "* User Guide:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    * Added documentation for logging in and creating account features."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    * Added documentation for `access` feature."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "**Community:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "* PRs reviewed and [approved](https://github.com/AY2021S1-CS2103T-F13-3/tp/pulls?q\u003dis%3Apr+is%3Aclosed+reviewed-by%3APrestonTYR+)"
      }
    ],
    "authorContributionMap": {
      "PrestonTYR": 65
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.medibook.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "Create a new `Remark` in `seedu.medibook.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "Simply add the following to [`seedu.medibook.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the modelContext menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "![Using the modelContext menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 2,
      "divakarmal": 6,
      "-": 386
    }
  },
  {
    "path": "src/main/java/seedu/medibook/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/medibook/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/medibook/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.MediBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ReadOnlyMediBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.storage.JsonMediBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.storage.JsonMedicalNoteListStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.storage.JsonUserAccountsListStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.storage.MediBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.storage.MedicalNoteListStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.storage.UserAccountsListStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing MediBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        MediBookStorage mediBookStorage \u003d new JsonMediBookStorage(userPrefs.getMediBookFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        MedicalNoteListStorage medicalNoteListStorage \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new JsonMedicalNoteListStorage(userPrefs.getMedicalNotesDirPath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        UserAccountsListStorage userAccountsListStorage \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                new JsonUserAccountsListStorage(userPrefs.getUserAccountPath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        storage \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                new StorageManager(mediBookStorage, userPrefsStorage, medicalNoteListStorage, userAccountsListStorage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s medi book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * The data from the sample medi book will be used instead if {@code storage}\u0027s medi book is not found,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * or an empty medi book will be used instead if errors occur when reading {@code storage}\u0027s medi book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Optional\u003cReadOnlyMediBook\u003e mediBookOptional;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        ReadOnlyMediBook initialData;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            mediBookOptional \u003d storage.readMediBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            if (!mediBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample MediBook\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            initialData \u003d mediBookOptional.orElseGet(SampleDataUtil::getSampleMediBook);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty MediBook\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            initialData \u003d new MediBook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty MediBook\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            initialData \u003d new MediBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty MediBook\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        logger.info(\"Starting MediBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Medi Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 5,
      "wang-jun-hao": 1,
      "divakarmal": 41,
      "PrestonTYR": 6,
      "-": 139
    }
  },
  {
    "path": "src/main/java/seedu/medibook/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/medibook/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/medibook/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private static final String LOG_FILE \u003d \"medibook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 2,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/medibook/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX \u003d \"The patient index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String MESSAGE_INVALID_NOTE_DISPLAYED_INDEX \u003d \"The medical note index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String MESSAGE_PATIENT_LISTED_OVERVIEW \u003d \"%1$d patients listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_IN_PATIENT_PROFILE \u003d \"Invalid command while viewing \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            + \"a patient\u0027s profile\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 1,
      "divakarmal": 3,
      "PrestonTYR": 2,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/medibook/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Version} with the given version details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "-": 115
    }
  },
  {
    "path": "src/main/java/seedu/medibook/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/medibook/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/medibook/commons/exceptions/IllegalLoginException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "package seedu.medibook.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "public class IllegalLoginException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public IllegalLoginException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PrestonTYR": 8
    }
  },
  {
    "path": "src/main/java/seedu/medibook/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/medibook/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets an {@code Image} from the specified path."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 2,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/medibook/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/medibook/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/medibook/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final String RENAME_FAILED_MESSAGE_FORMAT \u003d \"MediBook was unable to rename the file from %s to %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Deletes a file if it exists."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @throws IOException if the file or directory cannot be deleted."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static void deleteIfExists(Path file) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Files.deleteIfExists(file);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Renames a file if it exists."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @throws IOException if the file or directory cannot be renamed."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static void renameIfExists(Path oldFile, Path newFile) throws IOException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (!isFileExists(oldFile)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        File fileToRename \u003d new File(oldFile.toString());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        boolean success \u003d fileToRename.renameTo(new File(newFile.toString()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (!success) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            String errorMessage \u003d String.format(RENAME_FAILED_MESSAGE_FORMAT, oldFile, newFile);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new IOException(errorMessage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 27,
      "divakarmal": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/medibook/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/medibook/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *   Ignores case, a full word match is not required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"Ab\") \u003d\u003d true //matches part of \"ABc\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"df\") \u003d\u003d false //does not match any word"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String preppedWord \u003d word.trim().toLowerCase();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String preppedSentence \u003d sentence.toLowerCase();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .anyMatch(w -\u003e w.contains(preppedWord));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 6,
      "divakarmal": 2,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalLoginException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ReadOnlyMediBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Returns the MediBook."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * @see seedu.medibook.model.Model#getMediBook()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    ReadOnlyMediBook getMediBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of patients */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    ObservableList\u003cPatient\u003e getFilteredPatientList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Returns the user prefs\u0027 medi book file path."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    Path getMediBookFilePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Returns the current patient accessed by medi book."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    Optional\u003cPatient\u003e getPatientToAccess();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Checks if the input username and password match any of the accounts saved."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    void processLoginInfo(String username, String password) throws DataConversionException, IllegalLoginException,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            IllegalValueException;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Creates a new account with declared username, password, doctor\u0027s name and doctor\u0027s mcr."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    void createAccount(String username, String password, String doctorName, String doctorMcr) throws"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            IllegalValueException, DataConversionException, IOException;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Removes the active user in the model."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    void logout();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 2,
      "divakarmal": 14,
      "PrestonTYR": 25,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalLoginException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.parser.MediBookParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.Account;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.AdminAccount;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ReadOnlyMediBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNoteList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.patient.Ic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.storage.Storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static final String FILE_SAVE_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static final String FILE_LOAD_ERROR_MESSAGE \u003d \"Could not read data from file: \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private final MediBookParser mediBookParser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        mediBookParser \u003d new MediBookParser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public Optional\u003cPatient\u003e getPatientToAccess() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return model.getPatientToAccess();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // Logging, safe to ignore"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // Parse user input from String to a Command"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Command command \u003d mediBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // Executes the Command and stores the result"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            // We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            storage.saveMediBook(model.getMediBook());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            handleMedicalNoteListIo();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new CommandException(FILE_SAVE_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new CommandException(FILE_LOAD_ERROR_MESSAGE + dce, dce);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public ReadOnlyMediBook getMediBook() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return model.getMediBook();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public ObservableList\u003cPatient\u003e getFilteredPatientList() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return model.getFilteredPatientList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public Path getMediBookFilePath() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return model.getMediBookFilePath();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private void handleMedicalNoteListIo() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Optional\u003cPatient\u003e accessPatient \u003d model.getPatientToAccess();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (accessPatient.isPresent()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            readOrSaveMedicalNoteList(accessPatient.get());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Optional\u003cPatient\u003e deletedPatient \u003d model.getDeletedPatient();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (deletedPatient.isPresent()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            deleteMedicalNoteList(deletedPatient.get());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Optional\u003cPatient\u003e editedPatient \u003d model.getEditedPatient();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (editedPatient.isPresent()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            renameMedicalNoteList(editedPatient.get());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (model.getShouldDeleteAllMedicalNotes()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            deleteAllMedicalNotes();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private void deleteAllMedicalNotes() throws IOException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        storage.deleteAllMedicalNoteList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        model.setShouldDeleteAllMedicalNotes(false);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private void readOrSaveMedicalNoteList(Patient patient) throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        boolean shouldLoadMedicalNotes \u003d model.getShouldLoadMedicalNotes();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (shouldLoadMedicalNotes) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            storage.readMedicalNoteList(patient.getIc())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                    .ifPresent(medicalNotes -\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                            patient.setMedicalNoteList(new MedicalNoteList(medicalNotes.getMedicalNoteList())));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            storage.saveMedicalNoteList(patient.getMedicalNoteList(), patient.getIc());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private void deleteMedicalNoteList(Patient patient) throws IOException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        storage.deleteMedicalNoteList(patient.getIc());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        model.resetDeletedPatient();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private void renameMedicalNoteList(Patient patient) throws IOException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Ic oldIc \u003d model.getEditedPatientPrevIc().get();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Ic newIc \u003d patient.getIc();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        storage.renameMedicalNoteList(oldIc, newIc);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        model.resetEditedPatient();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void processLoginInfo(String username, String password) throws DataConversionException,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            IllegalLoginException, IllegalValueException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Optional\u003cAccount\u003e loginAccount \u003d storage.login(username, password);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (loginAccount.get() instanceof AdminAccount) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            model.setActiveUser(Optional.empty());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            model.setActiveUser(Optional.of(loginAccount.get().getDoctor()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void createAccount(String username, String password, String doctorName, String doctorMcr) throws"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            IllegalValueException, DataConversionException, IOException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        storage.createAccount(username, password, doctorName, doctorMcr);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void logout() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        model.setActiveUser(Optional.empty());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 64,
      "wang-jun-hao": 8,
      "divakarmal": 22,
      "PrestonTYR": 28,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/commands/AccessCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.Context;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": " * Accesses a patient\u0027s profile in the medi book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "public class AccessCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"access\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            + \": Accesses the patient identified by the index number used in the displayed patient list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static final String MESSAGE_ACCESS_PATIENT_SUCCESS \u003d \"Accessed Patient: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public AccessCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        if (model.getPatientToAccess().isPresent()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COMMAND_IN_PATIENT_PROFILE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Patient patientToAccess \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Context context \u003d model;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        context.accessPatient(patientToAccess);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        context.setShouldLoadMedicalNotes(true);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ACCESS_PATIENT_SUCCESS, patientToAccess), false,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                false, true, false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                || (other instanceof AccessCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((AccessCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 5,
      "wang-jun-hao": 4,
      "PrestonTYR": 53
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_ALLERGY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_BLOOD_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_CONDITION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_IC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_TREATMENT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_WEIGHT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Adds a patient to the medi book."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a patient to the medi book. \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            + PREFIX_IC + \"IC \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + PREFIX_DATE + \"DATE OF BIRTH \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + \"[\" + PREFIX_HEIGHT + \"HEIGHT] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + \"[\" + PREFIX_WEIGHT + \"WEIGHT] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + \"[\" + PREFIX_BLOOD_TYPE + \"BLOOD TYPE] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            + \"[\" + PREFIX_ALLERGY + \"ALLERGY]... \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            + \"[\" + PREFIX_CONDITION + \"CONDITION]... \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            + \"[\" + PREFIX_TREATMENT + \"TREATMENT]...\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            + PREFIX_IC + \"S9123456A \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + PREFIX_DATE + \"04-11-1991 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            + PREFIX_HEIGHT + \"180 \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + PREFIX_WEIGHT + \"70.5 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            + PREFIX_BLOOD_TYPE + \"A+ \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            + PREFIX_ALLERGY + \"shellfish \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            + PREFIX_ALLERGY + \"dust \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            + PREFIX_CONDITION + \"fever \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            + PREFIX_TREATMENT + \"Paracetamol \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            + PREFIX_TREATMENT + \"Ibuprofen (for high fever only)\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New patient added: %1$s\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PATIENT \u003d \"This patient already exists in the medi book\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private final Patient toAdd;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Patient}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public AddCommand(Patient patient) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        requireNonNull(patient);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        toAdd \u003d patient;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (model.getPatientToAccess().isPresent()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COMMAND_IN_PATIENT_PROFILE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        if (model.hasPatient(toAdd)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        model.addPatient(toAdd);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 1,
      "wang-jun-hao": 9,
      "divakarmal": 25,
      "foojingyi": 11,
      "PrestonTYR": 7,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/commands/AddNoteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import static seedu.medibook.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.commonfields.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.medicalnote.Content;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNote;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " * Adds a medical note to a patient in MediBook."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "public class AddNoteCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addnote\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a medical note to the current patient \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + \"in MediBook. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + PREFIX_CONTENT + \"MEDICAL NOTE CONTENT \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + PREFIX_DATE + \"04-11-1991 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + PREFIX_CONTENT + \"Patient has high fever and cough.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New medical note entry added:\\n%1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_NOTE \u003d \"This medical note entry already exists in the system.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String MESSAGE_ADD_NOTE_ON_LIST \u003d \"You can only add medical note to a patient when you are \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + \"viewing his/her patient profile. Access the patient profile before adding medical note.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static final String MESSAGE_USER_CANNOT_ADD \u003d \"Current user cannot add medical notes\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AddNoteCommand.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private final Date medicalNoteDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private final Content medicalNoteContent;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Creates an AddNoteCommand to add the specified {@code MedicalNote}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public AddNoteCommand(Date date, Content content) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        requireAllNonNull(date, content);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        this.medicalNoteDate \u003d date;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        this.medicalNoteContent \u003d content;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        model.setShouldLoadMedicalNotes(false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Optional\u003cPatient\u003e patientOptional \u003d model.getPatientToAccess();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        if (patientOptional.isEmpty()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            throw new CommandException(MESSAGE_ADD_NOTE_ON_LIST);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Patient displayedPatient \u003d patientOptional.get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assert model.hasPatient(displayedPatient) : \"Patient in Context does not exist in model\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (model.getActiveUser().isEmpty()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            throw new CommandException(MESSAGE_USER_CANNOT_ADD);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        MedicalNote newMedicalNote \u003d new MedicalNote(medicalNoteDate, model.getActiveUser().get(), medicalNoteContent);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        if (displayedPatient.alreadyHasMedicalNote(newMedicalNote)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_NOTE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        displayedPatient.addMedicalNote(newMedicalNote);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        logger.info(\"----------------[PATIENT AND ORDER OF MEDICAL NOTES:][\" + displayedPatient + \"\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                + displayedPatient.getMedicalNoteList() + \"]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, newMedicalNote));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                || (other instanceof AddNoteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                \u0026\u0026 medicalNoteDate.equals(((AddNoteCommand) other).medicalNoteDate)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                \u0026\u0026 medicalNoteContent.equals(((AddNoteCommand) other).medicalNoteContent));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 2,
      "wang-jun-hao": 74,
      "PrestonTYR": 18
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.MediBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Clears the medi book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Medi book has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        model.setMediBook(new MediBook());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        model.setShouldDeleteAllMedicalNotes(true);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 1,
      "divakarmal": 6,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /** The application should change to a patient\u0027s profile. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private final boolean showProfile;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /** The application should change to the list of patients. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private final boolean showList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean showProfile, boolean showList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        this.showProfile \u003d showProfile;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        this.showList \u003d showList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        this(feedbackToUser, false, false, false, false);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public boolean isShowProfile() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return showProfile;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public boolean isShowList() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return showList;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                \u0026\u0026 showProfile \u003d\u003d otherCommandResult.showProfile"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                \u0026\u0026 showList \u003d\u003d otherCommandResult.showList;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, showProfile, showList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "PrestonTYR": 22,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Deletes a patient identified using it\u0027s displayed index from the medi book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            + \": Deletes the patient identified by the index number used in the displayed patient list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String MESSAGE_DELETE_PATIENT_SUCCESS \u003d \"Deleted Patient: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (model.getPatientToAccess().isPresent()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COMMAND_IN_PATIENT_PROFILE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient patientToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        model.setDeletedPatient(patientToDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        model.deletePatient(patientToDelete);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PATIENT_SUCCESS, patientToDelete));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 1,
      "divakarmal": 14,
      "PrestonTYR": 4,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/commands/DeleteNoteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNote;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNoteList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " * Deletes a medical note identified using it\u0027s displayed index in the patient\u0027s profile from MediBook."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "public class DeleteNoteCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletenote\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + \": Deletes the medical note identified by the index number used in the displayed index in the\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + \" patient\u0027s profile page.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String MESSAGE_DELETE_NOTE_SUCCESS \u003d \"Deleted Medical Note: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String MESSAGE_DELETE_NOTE_ON_LIST \u003d \"You can only delete a medical note from a patient \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + \"when you are viewing his/her patient profile. Access the patient profile before \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + \"deleting a medical note.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static final String MESSAGE_USER_CANNOT_DELETE \u003d \"Current user cannot delete medical notes\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static final String MESSAGE_CANNOT_DELETE_OTHER_DOCTOR_NOTES \u003d \"Can\u0027t delete other doctor\u0027s medical notes\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DeleteNoteCommand.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Creates an DeleteNoteCommand to delete the specified {@code MedicalNote}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @param targetIndex index of the medical note to be deleted."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public DeleteNoteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        model.setShouldLoadMedicalNotes(false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Optional\u003cPatient\u003e patientOptional \u003d model.getPatientToAccess();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        if (patientOptional.isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            throw new CommandException(MESSAGE_DELETE_NOTE_ON_LIST);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Patient displayedPatient \u003d patientOptional.get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assert model.hasPatient(displayedPatient) : \"Patient in context does not exist in model\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        MedicalNoteList medicalNoteList \u003d displayedPatient.getMedicalNoteList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        int zeroBasedIndex \u003d targetIndex.getZeroBased();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        if (zeroBasedIndex \u003e\u003d medicalNoteList.size()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_NOTE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (model.getActiveUser().isEmpty()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            throw new CommandException(MESSAGE_USER_CANNOT_DELETE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        MedicalNote noteToDelete \u003d medicalNoteList.getMedicalNoteAtIndex(zeroBasedIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (noteToDelete.getDoctorMcr().equals(model.getActiveUser().get().getMcr())) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            medicalNoteList.deleteMedicalNoteAtIndex(zeroBasedIndex);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            throw new CommandException(MESSAGE_CANNOT_DELETE_OTHER_DOCTOR_NOTES);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        logger.info(\"----------------[PATIENT AND ORDER OF MEDICAL NOTES:][\" + displayedPatient + \"\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                + displayedPatient.getMedicalNoteList() + \"]\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_NOTE_SUCCESS, noteToDelete));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                || (other instanceof DeleteNoteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteNoteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 85,
      "PrestonTYR": 10
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_ALLERGY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_BLOOD_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_CONDITION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_IC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_TREATMENT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_WEIGHT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.model.Model.PREDICATE_SHOW_ALL_PATIENTS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.Messages;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.index.Index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.commonfields.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicaldetail.Allergy;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicaldetail.Condition;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicaldetail.Treatment;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNoteList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Address;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.BloodType;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.DateOfBirth;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Email;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Height;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Ic;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Weight;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Edits the details of an existing patient in the medi book."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the patient identified \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            + \"by the index number used in the displayed patient list. \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            + \"[\" + PREFIX_IC + \"IC] \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE OF BIRTH] \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            + \"[\" + PREFIX_HEIGHT + \"HEIGHT] \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + \"[\" + PREFIX_WEIGHT + \"WEIGHT] \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            + \"[\" + PREFIX_BLOOD_TYPE + \"BLOOD TYPE]\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            + \"[\" + PREFIX_ALLERGY + \"ALLERGY]... \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            + \"[\" + PREFIX_CONDITION + \"CONDITION]... \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            + \"[\" + PREFIX_TREATMENT + \"TREATMENT]...\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String MESSAGE_EDIT_PATIENT_SUCCESS \u003d \"Edited Patient: %1$s\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PATIENT \u003d \"This patient already exists in the medi book.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private final EditPatientDescriptor editPatientDescriptor;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * @param index of the patient in the filtered patient list to edit"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * @param editPatientDescriptor details to edit the patient with"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public EditCommand(Index index, EditPatientDescriptor editPatientDescriptor) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        requireNonNull(editPatientDescriptor);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        this.editPatientDescriptor \u003d new EditPatientDescriptor(editPatientDescriptor);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (model.getPatientToAccess().isPresent()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COMMAND_IN_PATIENT_PROFILE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient patientToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient editedPatient \u003d createEditedPatient(patientToEdit, editPatientDescriptor);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        MedicalNoteList medicalNoteList \u003d patientToEdit.getMedicalNoteList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        editedPatient.setMedicalNoteList(medicalNoteList.makeCopy());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        if (!patientToEdit.isSamePatient(editedPatient) \u0026\u0026 model.hasPatient(editedPatient)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        boolean wasIcEdited \u003d !patientToEdit.getIc().equals(editedPatient.getIc());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (wasIcEdited) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            model.setEditedPatient(editedPatient, patientToEdit.getIc());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        model.setPatient(patientToEdit, editedPatient);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        model.updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Creates and returns a {@code Patient} with the details of {@code patientToEdit}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * edited with {@code editPatientDescriptor}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private static Patient createEditedPatient(Patient patientToEdit, EditPatientDescriptor editPatientDescriptor) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assert patientToEdit !\u003d null;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Ic updatedIc \u003d editPatientDescriptor.getIc().orElse(patientToEdit.getIc());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Name updatedName \u003d editPatientDescriptor.getName().orElse(patientToEdit.getName());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        DateOfBirth updatedDateOfBirth \u003d editPatientDescriptor.getDateOfBirth().orElse(patientToEdit.getDateOfBirth());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Phone updatedPhone \u003d editPatientDescriptor.getPhone().orElse(patientToEdit.getPhone());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Optional\u003cEmail\u003e updatedEmail \u003d editPatientDescriptor.getEmail().or(patientToEdit::getEmail);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Optional\u003cAddress\u003e updatedAddress \u003d editPatientDescriptor.getAddress().or(patientToEdit::getAddress);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Optional\u003cHeight\u003e updatedHeight \u003d editPatientDescriptor.getHeight().or(patientToEdit::getHeight);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Optional\u003cWeight\u003e updatedWeight \u003d editPatientDescriptor.getWeight().or(patientToEdit::getWeight);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Optional\u003cBloodType\u003e updatedBloodType \u003d editPatientDescriptor.getBloodType()"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                .or(patientToEdit::getBloodType);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        Set\u003cAllergy\u003e updatedAllergies \u003d editPatientDescriptor.getAllergies().orElse(patientToEdit.getAllergies());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        Set\u003cCondition\u003e updatedConditions \u003d editPatientDescriptor.getConditions().orElse(patientToEdit.getConditions());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        Set\u003cTreatment\u003e updatedTreatments \u003d editPatientDescriptor.getTreatments().orElse(patientToEdit.getTreatments());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Patient editedPatient \u003d new Patient(updatedIc, updatedName, updatedDateOfBirth, updatedPhone, updatedEmail,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                updatedAddress, updatedHeight, updatedWeight, updatedBloodType, updatedAllergies, updatedConditions,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            updatedTreatments);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        editedPatient.setRecord(patientToEdit.getRecord());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        boolean wasHeightUpdated \u003d editPatientDescriptor.getHeight().isPresent();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        boolean wasWeightUpdated \u003d editPatientDescriptor.getWeight().isPresent();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (wasHeightUpdated || wasWeightUpdated) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            updateRecords(editedPatient, editPatientDescriptor);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return editedPatient;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static void updateRecords(Patient editedPatient, EditPatientDescriptor editPatientDescriptor) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        editPatientDescriptor.getHeight()"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .or(editedPatient::getHeight)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .ifPresent(h -\u003e editedPatient.getRecord().addHeightRecord(h));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        editPatientDescriptor.getWeight()"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .or(editedPatient::getWeight)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .ifPresent(w -\u003e editedPatient.getRecord().addWeightRecord(w));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                \u0026\u0026 editPatientDescriptor.equals(e.editPatientDescriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Stores the details to edit the patient with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * corresponding field value of the patient."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static class EditPatientDescriptor {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        private Ic ic;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        private DateOfBirth dateOfBirth;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        private Height height;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        private Weight weight;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        private BloodType bloodType;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        private Set\u003cAllergy\u003e allergies;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        private Set\u003cCondition\u003e conditions;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        private Set\u003cTreatment\u003e treatments;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        public EditPatientDescriptor() {}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "         * Defensive copies of medical tags are used internally."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        public EditPatientDescriptor(EditPatientDescriptor toCopy) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            setIc(toCopy.ic);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            setDateOfBirth(toCopy.dateOfBirth);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            setHeight(toCopy.height);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            setWeight(toCopy.weight);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            setBloodType(toCopy.bloodType);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            setAllergies(toCopy.allergies);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            setConditions(toCopy.conditions);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            setTreatments(toCopy.treatments);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return CollectionUtil.isAnyNonNull(ic, name, dateOfBirth, phone, email, address, height, weight,"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                                               bloodType, allergies, conditions, treatments);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        public void setIc(Ic ic) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            this.ic \u003d ic;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        public Optional\u003cIc\u003e getIc() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return Optional.ofNullable(ic);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        public void setDateOfBirth(DateOfBirth dateOfBirth) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        public Optional\u003cDateOfBirth\u003e getDateOfBirth() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            return Optional.ofNullable(dateOfBirth);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        public void setHeight(Height height) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            this.height \u003d height;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        public Optional\u003cHeight\u003e getHeight() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return Optional.ofNullable(height);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        public void setWeight(Weight weight) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            this.weight \u003d weight;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        public Optional\u003cWeight\u003e getWeight() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return Optional.ofNullable(weight);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        public void setBloodType(BloodType bloodType) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            this.bloodType \u003d bloodType;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        public Optional\u003cBloodType\u003e getBloodType() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            return Optional.ofNullable(bloodType);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "         * Sets {@code allergies} to this object\u0027s {@code allergies}."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "         * A defensive copy of {@code allergies} is used internally."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        public void setAllergies(Set\u003cAllergy\u003e allergies) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            this.allergies \u003d (allergies !\u003d null) ? new HashSet\u003c\u003e(allergies) : null;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "         * Returns an unmodifiable allergy set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code allergies} is null."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        public Optional\u003cSet\u003cAllergy\u003e\u003e getAllergies() {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            return (allergies !\u003d null) ? Optional.of(Collections.unmodifiableSet(allergies)) : Optional.empty();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "         * Sets {@code conditions} to this object\u0027s {@code conditions}."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "         * A defensive copy of {@code conditions} is used internally."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        public void setConditions(Set\u003cCondition\u003e conditions) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            this.conditions \u003d (conditions !\u003d null) ? new HashSet\u003c\u003e(conditions) : null;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "         * Returns an unmodifiable condition set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code conditions} is null."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        public Optional\u003cSet\u003cCondition\u003e\u003e getConditions() {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            return (conditions !\u003d null) ? Optional.of(Collections.unmodifiableSet(conditions)) : Optional.empty();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "         * Sets {@code treatments} to this object\u0027s {@code treatments}."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "         * A defensive copy of {@code treatments} is used internally."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        public void setTreatments(Set\u003cTreatment\u003e treatments) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            this.treatments \u003d (treatments !\u003d null) ? new HashSet\u003c\u003e(treatments) : null;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "         * Returns an unmodifiable treatment set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code treatments} is null."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        public Optional\u003cSet\u003cTreatment\u003e\u003e getTreatments() {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            return (treatments !\u003d null) ? Optional.of(Collections.unmodifiableSet(treatments)) : Optional.empty();"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            if (!(other instanceof EditPatientDescriptor)) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            EditPatientDescriptor e \u003d (EditPatientDescriptor) other;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return getIc().equals(e.getIc())"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    \u0026\u0026 getName().equals(e.getName())"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                    \u0026\u0026 getDateOfBirth().equals(e.getDateOfBirth())"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                    \u0026\u0026 getHeight().equals(e.getHeight())"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                    \u0026\u0026 getWeight().equals(e.getWeight())"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                    \u0026\u0026 getBloodType().equals(e.getBloodType())"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                    \u0026\u0026 getAllergies().equals(e.getAllergies())"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                    \u0026\u0026 getConditions().equals(e.getConditions())"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                    \u0026\u0026 getTreatments().equals(e.getTreatments());"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 33,
      "wang-jun-hao": 15,
      "divakarmal": 71,
      "foojingyi": 79,
      "PrestonTYR": 39,
      "-": 148
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/commands/EditNoteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_MCR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.commonfields.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.medicalnote.Content;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNote;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " * Edits the details of an existing medical note in the MediBook."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "public class EditNoteCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editnote\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the medical note identified \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + \"by the index number used in the displayed medical note list. \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME OF DOCTOR] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + \"[\" + PREFIX_MCR + \" MEDICAL REGISTRATION NO.] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + \"[\" + PREFIX_CONTENT + \"CONTENT] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + PREFIX_DATE + \"18-06-2019 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + PREFIX_CONTENT + \"Patient is having stomach cramps.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String MESSAGE_EDIT_NOTE_SUCCESS \u003d \"Edited Medical Note: %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_NOTE \u003d \"This medical note already exists in this patient profile.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String MESSAGE_EDIT_NOTE_ON_LIST \u003d \"You can only edit medical note of a patient when you are \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + \"viewing his/her patient profile. Access the patient profile before editing medical note.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static final String MESSAGE_USER_CANNOT_EDIT \u003d \"Current user cannot edit medical notes\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static final String MESSAGE_CANNOT_EDIT_OTHER_DOCTOR_NOTES \u003d \"Can\u0027t edit other doctor\u0027s medical notes\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(EditNoteCommand.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private final EditNoteDescriptor editNoteDescriptor;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Constructs a command to edit medical notes at the index, using the descriptor."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @param index of the medical note in the displayed medical note list to edit."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @param editNoteDescriptor details to edit the medical note with."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public EditNoteCommand(Index index, EditNoteDescriptor editNoteDescriptor) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        requireNonNull(editNoteDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.editNoteDescriptor \u003d new EditNoteDescriptor(editNoteDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        model.setShouldLoadMedicalNotes(false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Optional\u003cPatient\u003e patientOptional \u003d model.getPatientToAccess();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        if (patientOptional.isEmpty()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            throw new CommandException(MESSAGE_EDIT_NOTE_ON_LIST);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Patient displayedPatient \u003d patientOptional.get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assert model.hasPatient(displayedPatient) : \"Patient in Context does not exist in model\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        int indexZeroBased \u003d index.getZeroBased();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        if (indexZeroBased \u003e\u003d displayedPatient.getNumOfMedicalNotes()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_NOTE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        MedicalNote noteToEdit \u003d displayedPatient.getMedicalNoteAtIndex(indexZeroBased);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        MedicalNote newMedicalNote \u003d createEditedNote(noteToEdit, editNoteDescriptor);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (model.getActiveUser().isEmpty()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            throw new CommandException(MESSAGE_USER_CANNOT_EDIT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (!model.getActiveUser().get().equals(noteToEdit.doctor)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            throw new CommandException(MESSAGE_CANNOT_EDIT_OTHER_DOCTOR_NOTES);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            displayedPatient.deleteMedicalNoteAtIndex(indexZeroBased);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            if (displayedPatient.alreadyHasMedicalNote(newMedicalNote)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_NOTE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            displayedPatient.addMedicalNote(newMedicalNote);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            // add back original note (undo the operation)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            displayedPatient.addMedicalNote(noteToEdit);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            // carry forward exception"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        logger.info(\"----------------[PATIENT AND ORDER OF MEDICAL NOTES:][\" + displayedPatient + \"\\n\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                + displayedPatient.getMedicalNoteList() + \"]\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_NOTE_SUCCESS, newMedicalNote));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Creates and returns a {@code Medical Note} with the details of {@code noteToEdit}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * edited with {@code editNoteDescriptor}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private static MedicalNote createEditedNote(MedicalNote noteToEdit, EditNoteDescriptor editNoteDescriptor) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assert noteToEdit !\u003d null : \"Note to edit in EditNoteCommand#createEditedNote() is null\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Date updatedDate \u003d editNoteDescriptor.getDate().orElse(noteToEdit.getDate());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Content updatedContent \u003d editNoteDescriptor.getContent().orElse(noteToEdit.getContent());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return new MedicalNote(updatedDate, noteToEdit.doctor, updatedContent);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        if (!(other instanceof EditNoteCommand)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        EditNoteCommand e \u003d (EditNoteCommand) other;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                \u0026\u0026 editNoteDescriptor.equals(e.editNoteDescriptor);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Stores the details to edit the medical note with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * corresponding field value of the medical note."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static class EditNoteDescriptor {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        private Date date;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        private Content content;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        public EditNoteDescriptor() {}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "         */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        public EditNoteDescriptor(EditNoteDescriptor toCopy) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            setContent(toCopy.content);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "         */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return CollectionUtil.isAnyNonNull(date, content);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        public void setDate(Date date) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        public Optional\u003cDate\u003e getDate() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        public void setContent(Content content) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            this.content \u003d content;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        public Optional\u003cContent\u003e getContent() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return Optional.ofNullable(content);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            if (!(other instanceof EditNoteDescriptor)) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            EditNoteDescriptor e \u003d (EditNoteDescriptor) other;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return getDate().equals(e.getDate())"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                    \u0026\u0026 getContent().equals(e.getContent());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 199,
      "PrestonTYR": 12
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting MediBook as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false, false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 3,
      "PrestonTYR": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_IC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Finds and lists all patients in medi book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            + \": Finds all patients whose fields matches with the specified keywords (case-insensitive) provided \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            + \"and displays them as a list with index numbers.\\nAt least one search field must be specified.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            + PREFIX_IC + \"IC... \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            + PREFIX_NAME + \"NAME... \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + PREFIX_DATE + \"DATE OF BIRTH... \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            + PREFIX_PHONE + \"PHONE... \\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            + PREFIX_IC + \"S9123456B T1234567G \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            + PREFIX_NAME + \"Alice Bernice Charlotte \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + PREFIX_DATE + \"28-02-2012 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            + PREFIX_PHONE + \"98765432 69204068 93210283\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private final List\u003cPredicate\u003cPatient\u003e\u003e predicates;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public FindCommand(Predicate\u003cPatient\u003e predicate) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.predicates \u003d Collections.singletonList(predicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public FindCommand(List\u003cPredicate\u003cPatient\u003e\u003e predicates) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.predicates \u003d predicates;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Predicate\u003cPatient\u003e combinedPredicates \u003d predicates.stream().reduce(x -\u003e true, Predicate::and);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        model.updateFilteredPatientList(combinedPredicates);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                String.format(Messages.MESSAGE_PATIENT_LISTED_OVERVIEW, model.getFilteredPatientList().size()),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                false, false, false, true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                \u0026\u0026 arePredicatesEqual(predicates, ((FindCommand) other).predicates)); // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Checks if the two lists contains the same predicates regardless of order."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private boolean arePredicatesEqual(List\u003cPredicate\u003cPatient\u003e\u003e predicates1, List\u003cPredicate\u003cPatient\u003e\u003e predicates2) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (predicates1.size() !\u003d predicates2.size()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        HashSet\u003cPredicate\u003cPatient\u003e\u003e predicatesSet \u003d new HashSet\u003c\u003e(predicates1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicatesSet.removeAll(predicates2);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return predicatesSet.isEmpty();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 39,
      "wang-jun-hao": 3,
      "divakarmal": 8,
      "PrestonTYR": 2,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 2,
      "PrestonTYR": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.model.Model.PREDICATE_SHOW_ALL_PATIENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Lists all patients in the medi book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all patients\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        model.updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        model.resetAccessedPatient();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false, false, true);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 6,
      "PrestonTYR": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/parser/AccessCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import static seedu.medibook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.logic.commands.AccessCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": " * Parses input arguments and creates a new AccessCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "public class AccessCommandParser implements Parser\u003cAccessCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AccessCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * and returns an AccessCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public AccessCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return new AccessCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AccessCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PrestonTYR": 28
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_ALLERGY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_BLOOD_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_CONDITION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_IC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_TREATMENT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_WEIGHT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.commonfields.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicaldetail.Allergy;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicaldetail.Condition;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicaldetail.Treatment;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.BloodType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.DateOfBirth;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Height;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Ic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Weight;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_IC, PREFIX_NAME, PREFIX_DATE, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_HEIGHT, PREFIX_WEIGHT, PREFIX_BLOOD_TYPE, PREFIX_ALLERGY,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                        PREFIX_CONDITION, PREFIX_TREATMENT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_IC, PREFIX_NAME, PREFIX_DATE, PREFIX_PHONE)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Ic ic \u003d ParserUtil.parseIc(argMultimap.getValue(PREFIX_IC).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        DateOfBirth dateOfBirth \u003d ParserUtil.parseDateOfBirth(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Optional\u003cEmail\u003e email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Optional\u003cAddress\u003e address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Optional\u003cHeight\u003e height \u003d ParserUtil.parseHeight(argMultimap.getValue(PREFIX_HEIGHT));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Optional\u003cWeight\u003e weight \u003d ParserUtil.parseWeight(argMultimap.getValue(PREFIX_WEIGHT));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Optional\u003cBloodType\u003e bloodType \u003d ParserUtil.parseBloodType(argMultimap.getValue(PREFIX_BLOOD_TYPE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        Set\u003cAllergy\u003e allergyList \u003d ParserUtil.parseAllergies(argMultimap.getAllValues(PREFIX_ALLERGY));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        Set\u003cCondition\u003e conditionList \u003d ParserUtil.parseConditions(argMultimap.getAllValues(PREFIX_CONDITION));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        Set\u003cTreatment\u003e treatmentList \u003d ParserUtil.parseTreatments(argMultimap.getAllValues(PREFIX_TREATMENT));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient patient \u003d new Patient(ic, name, dateOfBirth, phone, email, address, height, weight,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                                   bloodType, allergyList, conditionList, treatmentList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        height.ifPresent(h -\u003e patient.getRecord().addHeightRecord(h));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        weight.ifPresent(w -\u003e patient.getRecord().addWeightRecord(w));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return new AddCommand(patient);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 3,
      "wang-jun-hao": 6,
      "divakarmal": 23,
      "foojingyi": 12,
      "PrestonTYR": 9,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/parser/AddNoteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.logic.commands.AddNoteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.commonfields.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.medicalnote.Content;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " * Parses input arguments and creates a new AddNoteCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "public class AddNoteCommandParser implements Parser\u003cAddNoteCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddNoteCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * and returns a AddNoteCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public AddNoteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    ArgumentTokenizer.tokenize(args, PREFIX_DATE, PREFIX_CONTENT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_CONTENT)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddNoteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).orElse(Date.getTodayDate()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            Content content \u003d ParserUtil.parseContent(argMultimap.getValue(PREFIX_CONTENT).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return new AddNoteCommand(date, content);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        } catch (IllegalArgumentException iae) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            throw new ParseException(iae.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 48,
      "PrestonTYR": 3
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final Prefix PREFIX_CONTENT \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static final Prefix PREFIX_IC \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static final Prefix PREFIX_HEIGHT \u003d new Prefix(\"h/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final Prefix PREFIX_WEIGHT \u003d new Prefix(\"w/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final Prefix PREFIX_BLOOD_TYPE \u003d new Prefix(\"b/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public static final Prefix PREFIX_ALLERGY \u003d new Prefix(\"al/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public static final Prefix PREFIX_CONDITION \u003d new Prefix(\"con/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public static final Prefix PREFIX_TREATMENT \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final Prefix PREFIX_MCR \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 1,
      "wang-jun-hao": 4,
      "divakarmal": 2,
      "foojingyi": 3,
      "PrestonTYR": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 5,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/parser/DeleteNoteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.logic.commands.DeleteNoteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "public class DeleteNoteCommandParser implements Parser\u003cDeleteNoteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteNoteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * and returns a DeleteNoteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public DeleteNoteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return new DeleteNoteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteNoteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 29
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_ALLERGY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_BLOOD_TYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_CONDITION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_IC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_TREATMENT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_WEIGHT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.EditCommand.EditPatientDescriptor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicaldetail.Allergy;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicaldetail.Condition;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicaldetail.Treatment;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_IC, PREFIX_NAME, PREFIX_DATE, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                    PREFIX_ADDRESS, PREFIX_HEIGHT, PREFIX_WEIGHT, PREFIX_BLOOD_TYPE, PREFIX_ALLERGY,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                    PREFIX_CONDITION, PREFIX_TREATMENT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        EditPatientDescriptor editPatientDescriptor \u003d new EditPatientDescriptor();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (argMultimap.getValue(PREFIX_IC).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            editPatientDescriptor.setIc(ParserUtil.parseIc(argMultimap.getValue(PREFIX_IC).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            editPatientDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            editPatientDescriptor.setDateOfBirth(ParserUtil.parseDateOfBirth(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            editPatientDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            editPatientDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            editPatientDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (argMultimap.getValue(PREFIX_HEIGHT).isPresent()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            editPatientDescriptor.setHeight(ParserUtil.parseHeight(argMultimap.getValue(PREFIX_HEIGHT)).get());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        if (argMultimap.getValue(PREFIX_WEIGHT).isPresent()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            editPatientDescriptor.setWeight(ParserUtil.parseWeight(argMultimap.getValue(PREFIX_WEIGHT)).get());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        if (argMultimap.getValue(PREFIX_BLOOD_TYPE).isPresent()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            editPatientDescriptor.setBloodType(ParserUtil"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    .parseBloodType(argMultimap.getValue(PREFIX_BLOOD_TYPE)).get());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        parseAllergiesForEdit(argMultimap.getAllValues(PREFIX_ALLERGY)).ifPresent(editPatientDescriptor::setAllergies);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        parseConditionsForEdit(argMultimap.getAllValues(PREFIX_CONDITION))"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .ifPresent(editPatientDescriptor::setConditions);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        parseTreatmentsForEdit(argMultimap.getAllValues(PREFIX_TREATMENT))"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .ifPresent(editPatientDescriptor::setTreatments);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        if (!editPatientDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return new EditCommand(index, editPatientDescriptor);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e allergies} into a {@code Set\u003cAllergy\u003e} if {@code allergies} is non-empty."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * If {@code allergies} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * {@code Set\u003cAllergy\u003e} containing zero allergy tags."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private Optional\u003cSet\u003cAllergy\u003e\u003e parseAllergiesForEdit(Collection\u003cString\u003e allergies) throws ParseException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assert allergies !\u003d null;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (allergies.isEmpty()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        Collection\u003cString\u003e allergySet \u003d allergies.size() \u003d\u003d 1"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            \u0026\u0026 allergies.contains(\"\") ? Collections.emptySet() : allergies;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return Optional.of(ParserUtil.parseAllergies(allergySet));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e conditions} into a {@code Set\u003cCondition\u003e} if {@code conditions} is non-empty."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * If {@code conditions} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * {@code Set\u003cCondition\u003e} containing zero condition tags."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private Optional\u003cSet\u003cCondition\u003e\u003e parseConditionsForEdit(Collection\u003cString\u003e conditions) throws ParseException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assert conditions !\u003d null;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (conditions.isEmpty()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        Collection\u003cString\u003e conditionSet \u003d conditions.size() \u003d\u003d 1"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            \u0026\u0026 conditions.contains(\"\") ? Collections.emptySet() : conditions;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return Optional.of(ParserUtil.parseConditions(conditionSet));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e treatments} into a {@code Set\u003cTreatment\u003e} if {@code treatments} is non-empty."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * If {@code treatments} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * {@code Set\u003cTreatment\u003e} containing zero treatment tags."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private Optional\u003cSet\u003cTreatment\u003e\u003e parseTreatmentsForEdit(Collection\u003cString\u003e treatments) throws ParseException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assert treatments !\u003d null;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (treatments.isEmpty()) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        Collection\u003cString\u003e treatmentSet \u003d treatments.size() \u003d\u003d 1"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                \u0026\u0026 treatments.contains(\"\") ? Collections.emptySet() : treatments;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return Optional.of(ParserUtil.parseTreatments(treatmentSet));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 2,
      "wang-jun-hao": 6,
      "divakarmal": 23,
      "foojingyi": 55,
      "PrestonTYR": 7,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/parser/EditNoteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.logic.commands.EditNoteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.logic.commands.EditNoteCommand.EditNoteDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " * Parses input arguments and creates a new EditNoteCommand object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "public class EditNoteCommandParser implements Parser\u003cEditNoteCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditNoteCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * and returns an EditNoteCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public EditNoteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DATE, PREFIX_CONTENT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditNoteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        EditNoteDescriptor editNoteDescriptor \u003d new EditNoteDescriptor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            editNoteDescriptor.setDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CONTENT).isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            editNoteDescriptor.setContent(ParserUtil.parseContent(argMultimap.getValue(PREFIX_CONTENT).get()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        if (!editNoteDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            throw new ParseException(EditNoteCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return new EditNoteCommand(index, editNoteDescriptor);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 50,
      "PrestonTYR": 2
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_BLOOD_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_IC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_WEIGHT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.FieldContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    // array of prefixes currently supported by the find command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static final Prefix[] SUPPORTED_SEARCH_PREFIXES \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            new Prefix[]{"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                PREFIX_NAME, PREFIX_IC, PREFIX_DATE, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_HEIGHT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                PREFIX_WEIGHT, PREFIX_ADDRESS, PREFIX_BLOOD_TYPE};"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                ArgumentTokenizer.tokenize(args, SUPPORTED_SEARCH_PREFIXES);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        boolean isArgumentInvalid \u003d anyPrefixEmpty(argMultimap)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                || noPrefixesSpecified(argMultimap)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (isArgumentInvalid) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        List\u003cPredicate\u003cPatient\u003e\u003e predicates \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                Arrays.stream(SUPPORTED_SEARCH_PREFIXES)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .filter(prefix -\u003e prefixNotEmpty(argMultimap, prefix))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .map(prefix -\u003e mapToPredicate(argMultimap, prefix))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return new FindCommand(predicates);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Returns true if the prefixes by the user are all unsupported."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private boolean noPrefixesSpecified(ArgumentMultimap argumentMultimap) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return Stream.of(SUPPORTED_SEARCH_PREFIXES).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isEmpty());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Returns true if any of the prefixes that were specified by the user contains an empty {@code String}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * in the given * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private boolean anyPrefixEmpty(ArgumentMultimap argumentMultimap) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return Stream.of(SUPPORTED_SEARCH_PREFIXES).anyMatch(prefix -\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            Optional\u003cString\u003e keyword \u003d argumentMultimap.getValue(prefix);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            boolean isPrefixSpecified \u003d keyword.isPresent();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            if (!isPrefixSpecified) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return keyword.get().isEmpty();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        });"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private boolean prefixNotEmpty(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String keyword \u003d argMultimap.getValue(prefix).orElse(\"\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return !keyword.isEmpty();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private FieldContainsKeywordsPredicate mapToPredicate(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(argMultimap.getValue(prefix).get().split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return new FieldContainsKeywordsPredicate(keywords, prefix);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 56,
      "wang-jun-hao": 2,
      "divakarmal": 14,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/parser/MediBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.logic.commands.AccessCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.logic.commands.AddNoteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.logic.commands.DeleteNoteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.logic.commands.EditNoteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public class MediBookParser {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        case AddNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return new AddNoteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        case DeleteNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return new DeleteNoteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        case EditNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return new EditNoteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        case AccessCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return new AccessCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 12,
      "divakarmal": 14,
      "PrestonTYR": 4,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.commonfields.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.commonfields.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.doctor.Mcr;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicaldetail.Allergy;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicaldetail.Condition;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicaldetail.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicaldetail.Treatment;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.medicalnote.Content;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.BloodType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.DateOfBirth;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Height;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Ic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Weight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Parses a {@code String ic} into a {@code Ic}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * @throws ParseException if the given {@code ic} is invalid."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static Ic parseIc(String ic) throws ParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        requireNonNull(ic);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        String trimmedIc \u003d ic.trim();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        String capitalisedTrimmedIc \u003d trimmedIc.toUpperCase();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        if (!Ic.isValidIc(capitalisedTrimmedIc)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            throw new ParseException(Ic.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return new Ic(capitalisedTrimmedIc);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Parses a {@code String dateOfBirth} into a {@code DateOfBirth}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @throws ParseException if the given {@code dateOfBirth} is invalid."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public static DateOfBirth parseDateOfBirth(String dateOfBirth) throws ParseException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        requireNonNull(dateOfBirth);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        String trimmedDateOfBirth \u003d dateOfBirth.trim();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (!DateOfBirth.isValidDateOfBirth(trimmedDateOfBirth)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            throw new ParseException(DateOfBirth.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return new DateOfBirth(trimmedDateOfBirth);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Parses a {@code String date} into a {@code Date}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static Date parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        if (!Date.isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            throw new ParseException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return new Date(trimmedDate, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            throw new ParseException(Date.MESSAGE_NON_FUTURE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws ParseException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (address.isPresent()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            String trimmedAddress \u003d address.get().trim();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return Optional.of(new Address(trimmedAddress));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws ParseException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (email.isPresent()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            String trimmedEmail \u003d email.get().trim();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return Optional.of(new Email(trimmedEmail));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e height} into a {@code Optional\u003cHeight\u003e}."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @throws ParseException if the given {@code height} is invalid."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static Optional\u003cHeight\u003e parseHeight(Optional\u003cString\u003e height) throws ParseException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (height.isPresent()) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            String trimmedHeight \u003d height.get().trim();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            if (!Height.isValidHeight(trimmedHeight)) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                throw new ParseException(Height.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return Optional.of(new Height(trimmedHeight));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e weight} into a {@code Optional\u003cWeight\u003e}."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @throws ParseException if the given {@code weight} is invalid."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static Optional\u003cWeight\u003e parseWeight(Optional\u003cString\u003e weight) throws ParseException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (weight.isPresent()) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            String trimmedWeight \u003d weight.get().trim();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            if (!Weight.isValidWeight(trimmedWeight)) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                throw new ParseException(Weight.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return Optional.of(new Weight(trimmedWeight));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e BloodType} into a {@code Optional\u003cBloodType\u003e}."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     *"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * @throws ParseException if the given {@code BloodType} is invalid."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static Optional\u003cBloodType\u003e parseBloodType(Optional\u003cString\u003e bloodType) throws ParseException {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (bloodType.isPresent()) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            String trimmedBloodType \u003d bloodType.get().trim();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            if (!BloodType.isValidBloodType(trimmedBloodType)) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                throw new ParseException(BloodType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return Optional.of(new BloodType(trimmedBloodType));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Parses a {@code String content} into a {@code Content}."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @throws ParseException if the given {@code content} is invalid."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static Content parseContent(String content) throws ParseException {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        requireNonNull(content);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        String trimmedContent \u003d content.trim();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        if (!Content.isValidContent(trimmedContent)) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            throw new ParseException(Content.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return new Content(trimmedContent);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Parses a {@code String mcr} into a {@code Mcr}."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @throws ParseException if the given {@code mcr} is invalid."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static Mcr parseMcr(String mcr) throws ParseException {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        requireNonNull(mcr);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        String trimmedMcr \u003d mcr.trim();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        String capitalisedTrimmedMcr \u003d trimmedMcr.toUpperCase();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        if (!Mcr.isValidMcr(capitalisedTrimmedMcr)) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            throw new ParseException(Mcr.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return new Mcr(capitalisedTrimmedMcr);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Parses a {@code String allergy} into a {@code Allergy}."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @throws ParseException if the given {@code allergy} is invalid."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public static Allergy parseAllergy(String allergy) throws ParseException {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        String trimmedTagName \u003d trimTagName(allergy);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assert Tag.isValidTagName(trimmedTagName);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return new Allergy(trimmedTagName);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Parses a {@code String condition} into a {@code Condition}."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @throws ParseException if the given {@code condition} is invalid."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public static Condition parseCondition(String condition) throws ParseException {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        String trimmedTagName \u003d trimTagName(condition);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assert Tag.isValidTagName(trimmedTagName);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return new Condition(trimmedTagName);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Parses a {@code String treatment} into a {@code Treatment}."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @throws ParseException if the given {@code treatment} is invalid."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public static Treatment parseTreatment(String treatment) throws ParseException {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        String trimmedTagName \u003d trimTagName(treatment);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assert Tag.isValidTagName(trimmedTagName);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return new Treatment(trimmedTagName);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Trims a {@code String tag} into a valid tag name."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private static String trimTagName(String tag) throws ParseException {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        String trimmedTagName \u003d tag.trim();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTagName)) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return trimmedTagName;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e allergies} into a {@code Set\u003cAllergy\u003e}."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public static Set\u003cAllergy\u003e parseAllergies(Collection\u003cString\u003e allergies) throws ParseException {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        requireNonNull(allergies);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        final Set\u003cAllergy\u003e allergySet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        for (String tagName : allergies) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            allergySet.add(parseAllergy(tagName));"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return allergySet;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e conditions} into a {@code Set\u003cCondition\u003e}."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public static Set\u003cCondition\u003e parseConditions(Collection\u003cString\u003e conditions) throws ParseException {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        requireNonNull(conditions);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        final Set\u003cCondition\u003e conditionSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        for (String tagName : conditions) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            conditionSet.add(parseCondition(tagName));"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return conditionSet;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e treatments} into a {@code Set\u003cTreatment\u003e}."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public static Set\u003cTreatment\u003e parseTreatments(Collection\u003cString\u003e treatments) throws ParseException {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        requireNonNull(treatments);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        final Set\u003cTreatment\u003e treatmentSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        for (String tagName : treatments) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            treatmentSet.add(parseTreatment(tagName));"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return treatmentSet;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 10,
      "wang-jun-hao": 69,
      "divakarmal": 24,
      "foojingyi": 91,
      "PrestonTYR": 53,
      "-": 91
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/medibook/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/Account.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "package seedu.medibook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.doctor.Doctor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "public class Account {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static final String MESSAGE_USERNAME_CONSTRAINTS \u003d \"Username has to be at least 5 characters\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static final String MESSAGE_PASSWORD_CONSTRAINTS \u003d \"Password has to be at least 5 characters\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private String username;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private Doctor doctor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Constructs an account with a username and a password."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public Account(String username, String password, Doctor doctor) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        this.doctor \u003d doctor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public String getUsername() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return this.username;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public String getPassword() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return this.password;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public Doctor getDoctor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return this.doctor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Checks if two accounts are equal."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (!(other instanceof Account)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Account otherAccount \u003d (Account) other;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return otherAccount.username.equals(this.username)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                \u0026\u0026 otherAccount.password.equals(this.password)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                \u0026\u0026 otherAccount.doctor.equals(this.doctor);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public boolean check(String username, String password) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return this.username.equals(username) \u0026\u0026 this.password.equals(password);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PrestonTYR": 56
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/AdminAccount.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "package seedu.medibook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "public class AdminAccount extends Account {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public AdminAccount() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        super(\"admin\", \"admin\", null);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PrestonTYR": 8
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/Context.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package seedu.medibook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.doctor.Doctor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.patient.Ic;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public interface Context {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Accesses the given patient."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * The patient must exist in the medi book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    void accessPatient(Patient patient);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Returns an {@code Optional} of the current accessed {@code patient}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    Optional\u003cPatient\u003e getPatientToAccess();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Resets the accessed patient."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    void resetAccessedPatient();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Sets the {@code patient} that has just been deleted."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    void setDeletedPatient(Patient patient);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Returns the {@code patient} that has just been deleted."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    Optional\u003cPatient\u003e getDeletedPatient();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Resets the {@code patient} that has just been deleted."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    void resetDeletedPatient();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Sets the {@code patient} that has just been edited."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    void setEditedPatient(Patient patient, Ic prevIc);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Returns the {@code patient} that has just been edited."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    Optional\u003cPatient\u003e getEditedPatient();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Returns the previous Ic of an edited patient assuming the Ic was edited."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    Optional\u003cIc\u003e getEditedPatientPrevIc();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Resets the {@code patient} that has just been edited."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    void resetEditedPatient();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Returns a boolean on whether the medical notes of a {@code patient} should be loaded."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    boolean getShouldLoadMedicalNotes();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Sets the boolean on whether the medical notes of a {@code patient} should be loaded."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    void setShouldLoadMedicalNotes(boolean b);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Returns a boolean on whether all medical notes should be cleared."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    boolean getShouldDeleteAllMedicalNotes();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Sets the boolean on whether all medical notes should be cleared."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    void setShouldDeleteAllMedicalNotes(boolean b);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Sets the current user using MediBook."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    void setActiveUser(Optional\u003cDoctor\u003e doctor);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Returns the doctor currently using the system."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    Optional\u003cDoctor\u003e getActiveUser();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 79,
      "PrestonTYR": 11
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/MediBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.UniquePatientList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Wraps all data at the mediBook level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Duplicates are not allowed (by .isSamePatient comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public class MediBook implements ReadOnlyMediBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private final UniquePatientList patients;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        patients \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public MediBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Creates an MediBook using the Patients in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public MediBook(ReadOnlyMediBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Replaces the contents of the patient list with {@code patients}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * {@code patients} must not contain duplicate patients."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void setPatients(List\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        this.patients.setPatients(patients);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Resets the existing data of this {@code MediBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void resetData(ReadOnlyMediBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        setPatients(newData.getPatientList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    //// patient-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Returns true if a patient with the same identity as {@code patient} exists in the medi book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public boolean hasPatient(Patient patient) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        requireNonNull(patient);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return patients.contains(patient);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Adds a patient to the medi book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * The patient must not already exist in the medi book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void addPatient(Patient p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        patients.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Replaces the given patient {@code target} in the list with {@code editedPatient}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * {@code target} must exist in the medi book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * The patient identity of {@code editedPatient} must not be the same as"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * another existing patient in the medi book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void setPatient(Patient target, Patient editedPatient) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        requireNonNull(editedPatient);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        patients.setPatient(target, editedPatient);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Removes {@code key} from this {@code MediBook}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * {@code key} must exist in the medi book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void removePatient(Patient key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        patients.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return patients.asUnmodifiableObservableList().size() + \" patients\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public ObservableList\u003cPatient\u003e getPatientList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return patients.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                || (other instanceof MediBook // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                \u0026\u0026 patients.equals(((MediBook) other).patients));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return patients.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 44,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public interface Model extends Context {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    Predicate\u003cPatient\u003e PREDICATE_SHOW_ALL_PATIENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Returns the user prefs\u0027 medi book file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    Path getMediBookFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Sets the user prefs\u0027 medi book file path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    void setMediBookFilePath(Path mediBookFilePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Replaces medi book data with the data in {@code mediBook}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    void setMediBook(ReadOnlyMediBook mediBook);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /** Returns the MediBook */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    ReadOnlyMediBook getMediBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Returns true if a patient with the same identity as {@code patient} exists in the medi book."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    boolean hasPatient(Patient patient);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Deletes the given patient."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * The patient must exist in the medi book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    void deletePatient(Patient target);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Adds the given patient."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * {@code patient} must not already exist in the medi book."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    void addPatient(Patient patient);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Replaces the given patient {@code target} with {@code editedPatient}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * {@code target} must exist in the medi book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * The patient identity of {@code editedPatient} must not be the same as"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * another existing patient in the medi book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    void setPatient(Patient target, Patient editedPatient);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /** Returns an unmodifiable view of the filtered patient list */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    ObservableList\u003cPatient\u003e getFilteredPatientList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Updates the filter of the filtered patient list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    void updateFilteredPatientList(Predicate\u003cPatient\u003e predicate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 1,
      "divakarmal": 29,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/ModelContext.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package seedu.medibook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.doctor.Doctor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.patient.Ic;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": " * Wraps the data from the most recently executed command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class ModelContext implements Context {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private Optional\u003cPatient\u003e accessedPatient \u003d Optional.empty();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private boolean shouldLoadMedicalNotes \u003d true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private Optional\u003cPatient\u003e deletedPatient \u003d Optional.empty();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private Optional\u003cPatient\u003e editedPatient \u003d Optional.empty();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private Optional\u003cIc\u003e editedPatientPrevIc \u003d Optional.empty();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private boolean shouldDeleteAllMedicalNotes \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private Optional\u003cDoctor\u003e currentDoctor \u003d Optional.empty();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void accessPatient(Patient patient) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.accessedPatient \u003d Optional.of(patient);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public Optional\u003cPatient\u003e getPatientToAccess() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return this.accessedPatient;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void resetAccessedPatient() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.accessedPatient \u003d Optional.empty();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void setDeletedPatient(Patient patient) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.deletedPatient \u003d Optional.of(patient);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public Optional\u003cPatient\u003e getDeletedPatient() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return this.deletedPatient;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void resetDeletedPatient() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.deletedPatient \u003d Optional.empty();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void setEditedPatient(Patient patient, Ic prevIc) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.editedPatient \u003d Optional.of(patient);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.editedPatientPrevIc \u003d Optional.of(prevIc);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public Optional\u003cPatient\u003e getEditedPatient() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return this.editedPatient;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public Optional\u003cIc\u003e getEditedPatientPrevIc() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return this.editedPatientPrevIc;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void resetEditedPatient() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.editedPatient \u003d Optional.empty();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.editedPatientPrevIc \u003d Optional.empty();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public boolean getShouldLoadMedicalNotes() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return this.shouldLoadMedicalNotes;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void setShouldLoadMedicalNotes(boolean b) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.shouldLoadMedicalNotes \u003d b;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public boolean getShouldDeleteAllMedicalNotes() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return this.shouldDeleteAllMedicalNotes;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void setShouldDeleteAllMedicalNotes(boolean b) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.shouldDeleteAllMedicalNotes \u003d b;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void setActiveUser(Optional\u003cDoctor\u003e doctor) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        this.currentDoctor \u003d doctor;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public Optional\u003cDoctor\u003e getActiveUser() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return this.currentDoctor;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (!(other instanceof ModelContext)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        ModelContext otherContext \u003d (ModelContext) other;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return otherContext.shouldDeleteAllMedicalNotes \u003d\u003d shouldDeleteAllMedicalNotes"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                \u0026\u0026 otherContext.shouldLoadMedicalNotes \u003d\u003d shouldLoadMedicalNotes"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                \u0026\u0026 otherContext.accessedPatient.equals(accessedPatient)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                \u0026\u0026 otherContext.deletedPatient.equals(deletedPatient)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                \u0026\u0026 otherContext.editedPatient.equals(editedPatient)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                \u0026\u0026 otherContext.editedPatientPrevIc.equals(editedPatientPrevIc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 109,
      "PrestonTYR": 12
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.doctor.Doctor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.patient.Ic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Represents the in-memory model of the medi book data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private final MediBook mediBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private final FilteredList\u003cPatient\u003e filteredPatients;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private final Context context \u003d new ModelContext();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Initializes a ModelManager with the given mediBook and userPrefs."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public ModelManager(ReadOnlyMediBook mediBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        requireAllNonNull(mediBook, userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        logger.fine(\"Initializing with MediBook: \" + mediBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        this.mediBook \u003d new MediBook(mediBook);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        filteredPatients \u003d new FilteredList\u003c\u003e(this.mediBook.getPatientList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        this(new MediBook(), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public Path getMediBookFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return userPrefs.getMediBookFilePath();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void setMediBookFilePath(Path mediBookFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        requireNonNull(mediBookFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        userPrefs.setMediBookFilePath(mediBookFilePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MediBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void setMediBook(ReadOnlyMediBook mediBook) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        this.mediBook.resetData(mediBook);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public ReadOnlyMediBook getMediBook() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return mediBook;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public boolean hasPatient(Patient patient) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        requireNonNull(patient);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return mediBook.hasPatient(patient);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void deletePatient(Patient target) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        mediBook.removePatient(target);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void addPatient(Patient patient) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        mediBook.addPatient(patient);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void setPatient(Patient target, Patient editedPatient) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        requireAllNonNull(target, editedPatient);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        mediBook.setPatient(target, editedPatient);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Patient List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Patient} backed by the internal list of"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * {@code versionedMediBook}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public ObservableList\u003cPatient\u003e getFilteredPatientList() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return filteredPatients;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void updateFilteredPatientList(Predicate\u003cPatient\u003e predicate) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        filteredPatients.setPredicate(predicate);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dContext Methods\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void accessPatient(Patient patient) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        context.accessPatient(patient);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public Optional\u003cPatient\u003e getPatientToAccess() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return context.getPatientToAccess();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void resetAccessedPatient() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        context.resetAccessedPatient();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void setDeletedPatient(Patient patient) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        context.setDeletedPatient(patient);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public Optional\u003cPatient\u003e getDeletedPatient() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return context.getDeletedPatient();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void resetDeletedPatient() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        context.resetDeletedPatient();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void setEditedPatient(Patient patient, Ic prevIc) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        context.setEditedPatient(patient, prevIc);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public Optional\u003cPatient\u003e getEditedPatient() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return context.getEditedPatient();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public Optional\u003cIc\u003e getEditedPatientPrevIc() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return context.getEditedPatientPrevIc();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void resetEditedPatient() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        context.resetEditedPatient();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public boolean getShouldLoadMedicalNotes() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return context.getShouldLoadMedicalNotes();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void setShouldLoadMedicalNotes(boolean b) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        context.setShouldLoadMedicalNotes(b);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public boolean getShouldDeleteAllMedicalNotes() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return context.getShouldDeleteAllMedicalNotes();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void setShouldDeleteAllMedicalNotes(boolean b) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        context.setShouldDeleteAllMedicalNotes(b);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void setActiveUser(Optional\u003cDoctor\u003e doctor) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        context.setActiveUser(doctor);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public Optional\u003cDoctor\u003e getActiveUser() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return context.getActiveUser();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return mediBook.equals(other.mediBook)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                \u0026\u0026 filteredPatients.equals(other.filteredPatients)"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                \u0026\u0026 context.equals(other.context);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 77,
      "divakarmal": 44,
      "PrestonTYR": 12,
      "-": 106
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/ReadOnlyMediBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Unmodifiable view of an medi book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public interface ReadOnlyMediBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Returns an unmodifiable view of the patients list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * This list will not contain any duplicate patients."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    ObservableList\u003cPatient\u003e getPatientList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 7,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    Path getMediBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    Path getMedicalNotesDirPath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 1,
      "divakarmal": 3,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/UserAccountsList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "package seedu.medibook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "public class UserAccountsList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private final List\u003cAccount\u003e accountsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void addAccount(Account account) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        this.accountsList.add(account);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public List\u003cAccount\u003e getAccountsList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return this.accountsList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Checks if a given username and password are representative of an account."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public Optional\u003cAccount\u003e check(String username, String password) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Optional\u003cAccount\u003e result \u003d Optional.empty();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        for (Account account : accountsList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            if (account.check(username, password)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                result \u003d Optional.of(account);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Checks if a username already exists in the account database."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public boolean usernameExists(Account newAccount) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        boolean result \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        for (Account account : accountsList) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            if (newAccount.getUsername().equals(account.getUsername())) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                result \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Checks if a doctor\u0027s MCR is already linked with an account in the database."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public boolean mcrExists(Account newAccount) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        boolean result \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        for (Account account : accountsList) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            if (newAccount.getDoctor().getMcr().equals(account.getDoctor().getMcr())) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                result \u003d true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Checks if two UserAccountsList are equals."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (!(other instanceof UserAccountsList)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        UserAccountsList otherList \u003d (UserAccountsList) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return otherList.accountsList.equals(this.accountsList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PrestonTYR": 72
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private Path mediBookFilePath \u003d Paths.get(\"data\" , \"medibook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private Path medicalNotesDirPath \u003d Paths.get(\"data\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private Path userAccountPath \u003d Paths.get(\"data\", \"accounts.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        setMediBookFilePath(newUserPrefs.getMediBookFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public Path getMediBookFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return mediBookFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void setMediBookFilePath(Path mediBookFilePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        requireNonNull(mediBookFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        this.mediBookFilePath \u003d mediBookFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public Path getMedicalNotesDirPath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return medicalNotesDirPath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void setMedicalNotesDirPath(Path medicalNotesDirPath) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        requireNonNull(medicalNotesDirPath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.medicalNotesDirPath \u003d medicalNotesDirPath;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public Path getUserAccountPath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return userAccountPath;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void setUserAccountPath(Path userAccountPath) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        requireNonNull(userAccountPath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        this.userAccountPath \u003d userAccountPath;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                \u0026\u0026 mediBookFilePath.equals(o.mediBookFilePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return Objects.hash(guiSettings, mediBookFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + mediBookFilePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 10,
      "divakarmal": 12,
      "PrestonTYR": 8,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/commonfields/Date.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "package seedu.medibook.model.commonfields;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " * Represents a date in MediBook."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "public class Date implements Comparable\u003cDate\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            \"Date should be a valid calendar date and of the format \\\"DD-MM-YYYY\\\" \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                    + \"where D, M and Y represent digits of the day, month and year of the date respectively.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String MESSAGE_NON_FUTURE \u003d \"Date should not be in the future.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private static final String INPUT_STRING_PATTERN \u003d \"dd-MM-uuuu\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private static final String INPUT_STRING_PATTERN_SIMPLE \u003d \"dd-MM-yyyy\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private static final String OUTPUT_STRING_PATTERN \u003d \"d MMM uuuu\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private static final DateTimeFormatter INPUT_FORMATTER \u003d DateTimeFormatter.ofPattern(INPUT_STRING_PATTERN)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private static final DateTimeFormatter OUTPUT_FORMATTER \u003d DateTimeFormatter.ofPattern(OUTPUT_STRING_PATTERN);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public final String inputValue;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public final String outputValue;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private final LocalDate localDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Constructs a {@code Date} set to the given date in string form."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @param dateString a valid string representing the date"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @param isNonFuture true if date object represents a date in the past or today"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public Date(String dateString, boolean isNonFuture) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        requireNonNull(dateString);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        checkArgument(isValidDate(dateString), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        localDate \u003d LocalDate.parse(dateString, INPUT_FORMATTER);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        if (isNonFuture) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            checkArgument(isOnOrBeforeToday(localDate), MESSAGE_NON_FUTURE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        inputValue \u003d dateString;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        outputValue \u003d localDate.format(OUTPUT_FORMATTER);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Constructs a {@code Date} set to today\u0027s date."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public Date() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        java.util.Date todayDate \u003d new java.util.Date();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(INPUT_STRING_PATTERN_SIMPLE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        String todayDateInString \u003d formatter.format(todayDate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        localDate \u003d LocalDate.parse(todayDateInString, INPUT_FORMATTER);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        inputValue \u003d todayDateInString;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        outputValue \u003d localDate.format(OUTPUT_FORMATTER);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Returns true if the given string is a valid date."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            LocalDate.parse(test, INPUT_FORMATTER);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        } catch (DateTimeParseException | NullPointerException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Returns true if this date is in the past or today."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private static boolean isOnOrBeforeToday(LocalDate date) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        LocalDate todayDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return date.isBefore(todayDate) || date.isEqual(todayDate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Returns today\u0027s date as a string."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @return A string representing today\u0027s date in the format dd-MM-yyyy"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static String getTodayDate() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        java.util.Date date \u003d new java.util.Date();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return formatter.format(date);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Returns the localDate of the Date as a LocalDate object"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * @return localDate of the Date object"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public LocalDate getLocalDate() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return localDate;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Returns the string that was the input by user when defining a date."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @return string input by user."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public String getInputString() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return inputValue;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return outputValue;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                \u0026\u0026 localDate.equals(((Date) other).localDate)); // state check"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return localDate.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public int compareTo(Date o) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return this.localDate.compareTo(o.localDate);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 118,
      "divakarmal": 8
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/commonfields/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "package seedu.medibook.model.commonfields;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " * Represents a name in the medi book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Returns true if the given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 3,
      "divakarmal": 1,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/doctor/Doctor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "package seedu.medibook.model.doctor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.commonfields.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " * Represents a doctor in MediBook."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "public class Doctor {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private static final String TITLE \u003d \"Dr\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private final Mcr mcr;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Constructs a doctor object with the specified name and MCR."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @param name Alphanumberic name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @param mcr Valid MCR."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public Doctor(Name name, Mcr mcr) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        requireAllNonNull(name, mcr);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.mcr \u003d mcr;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public String getStringNameWithTitle() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return TITLE + \" \" + name.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public String getStringNameNoTitle() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return name.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public String getStringMcr() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return mcr.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public Mcr getMcr() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return mcr;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        if (!(other instanceof Doctor)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Doctor otherDoctor \u003d (Doctor) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return otherDoctor.name.equals(name) \u0026\u0026 otherDoctor.mcr.equals(mcr);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return Objects.hash(name, mcr);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return TITLE + \" \" + name.toString() + \" (\" + mcr.toString() + \")\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 73
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/doctor/Mcr.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "package seedu.medibook.model.doctor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " * Represents a Doctor\u0027s Medical Registration ID (MCR) in MediBook."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidMcr(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "public class Mcr {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"MCR should be of the format M@xxxx#\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + \"1. The @ should be either a letter or number\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + \"2. The xxxx should be digits\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + \"3. The # should be a letter\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String FIRST_CHARACTER_REGEX \u003d \"[Mm]\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String SECOND_CHARACTER_REGEX \u003d \"[a-zA-Z0-9]\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String DIGITS_REGEX \u003d \"\\\\d{4}\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String LAST_CHARACTER_REGEX \u003d \"[a-zA-Z]\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d FIRST_CHARACTER_REGEX + SECOND_CHARACTER_REGEX + DIGITS_REGEX"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            + LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Constructs a {@code Mcr}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @param mcr A valid Mcr string."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public Mcr(String mcr) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        requireNonNull(mcr);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        checkArgument(isValidMcr(mcr), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        String mcrInCaps \u003d mcr.toUpperCase();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        value \u003d mcrInCaps;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Returns true if the given string is a valid IC number."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static boolean isValidMcr(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                || (other instanceof Mcr // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                \u0026\u0026 value.equals(((Mcr) other).value)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 61
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/medicaldetail/Allergy.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package seedu.medibook.model.medicaldetail;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * Represents an Allergy in the medi book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * This {@code Allergy} class inherits from the {@code Tag} class."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * It is a medical tag describing one of the allergies that a patient has,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * where the set of allergies is a medical detail of that patient."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public class Allergy extends Tag {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Constructs an {@code Allergy}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public Allergy(String tagName) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        super(tagName);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            || (other instanceof Allergy // instanceof handles nulls"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            \u0026\u0026 tagName.equals(((Allergy) other).tagName)); // state check"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 26
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/medicaldetail/Condition.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package seedu.medibook.model.medicaldetail;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * Represents a medical Condition in the medi book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * This {@code Condition} class inherits from the {@code Tag} class."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * It is a medical tag describing one of the medical conditions that a patient is diagnosed with,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * where the set of conditions is a medical detail of that patient."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public class Condition extends Tag {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Constructs a medical {@code Condition}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public Condition(String tagName) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        super(tagName);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            || (other instanceof Condition // instanceof handles nulls"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            \u0026\u0026 tagName.equals(((Condition) other).tagName)); // state check"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 26
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/medicaldetail/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package seedu.medibook.model.medicaldetail;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Represents a Tag in the medi book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * Each medical detail of a {@code Patient} is described with medical tags,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * which are objects that inherit from this {@code Tag} class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Medical tags should have a least one alphanumeric character.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        boolean isValid \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        for (int i \u003d 0; i \u003c test.length(); i++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            // check every character"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            isValid \u003d isValid || String.valueOf(test.charAt(i)).matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return isValid;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 2,
      "foojingyi": 12,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/medicaldetail/Treatment.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package seedu.medibook.model.medicaldetail;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * Represents a medical Treatment in the medi book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * This {@code Treatment} class inherits from the {@code Tag} class."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * It is a medical tag describing one of the medical treatments being given to a patient,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * where the set of treatments is a medical detail of that patient."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public class Treatment extends Tag {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Constructs a medical {@code Treatment}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public Treatment(String tagName) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        super(tagName);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            || (other instanceof Treatment // instanceof handles nulls"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            \u0026\u0026 tagName.equals(((Treatment) other).tagName)); // state check"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 26
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/medicalnote/Content.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "package seedu.medibook.model.medicalnote;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " * Represents the textual content of a medical note."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "public class Content {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Content cannot be blank.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private final String innerString;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Construct a content object containing the specified string."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @param str content of medical note in string, cannot be empty."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public Content(String str) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        requireNonNull(str);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        if (!isValidContent(str)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            throw new IllegalArgumentException(MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        innerString \u003d str;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Returns true if the given string is a valid content (non-empty)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @param test string to be tested."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @return true if string is valid as a content."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static boolean isValidContent(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return test.length() \u003e 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return innerString;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        if (!(other instanceof Content)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Content otherContent \u003d (Content) other;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return otherContent.innerString.equals(innerString);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 54
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/medicalnote/MedicalNote.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.medicalnote;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.commonfields.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.commonfields.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.doctor.Doctor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.doctor.Mcr;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * Represents a medical note entry for a Patient in MediBook, on a particular date by a particular doctor."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " * Guarantees: details are present and not null, date and doctor\u0027s names are valid, fields are immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public class MedicalNote {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /** Date of medical note entry. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public final Date date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /** Author of note. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public final Doctor doctor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /** Content of the note i.e. relevant information from patient\u0027s consultation. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public final Content content;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Constructs a {@code MedicalNote}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @param date String representation of a valid date of entry."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @param doctor A valid doctor\u0027s name."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @param content Contents of the note."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public MedicalNote(Date date, Doctor doctor, Content content) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        requireAllNonNull(date, doctor, content);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.doctor \u003d doctor;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public Name getDoctorName() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return doctor.getName();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public Mcr getDoctorMcr() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return doctor.getMcr();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public Content getContent() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public String getInputDateString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return date.inputValue;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public String getDoctorNameWithTitle() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return doctor.getStringNameWithTitle();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public String getDoctorNameNoTitle() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return doctor.getStringNameNoTitle();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public String getDoctorStringMcr() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return doctor.getStringMcr();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public String getContentString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return content.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return \"Date: \" + date.outputValue"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                + \"\\nDoctor: \" + doctor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                + \"\\nContent: \" + content;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (!(other instanceof MedicalNote)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        MedicalNote otherNote \u003d (MedicalNote) other;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return otherNote.date.equals(date)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                \u0026\u0026 otherNote.doctor.equals(doctor)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                \u0026\u0026 otherNote.content.equals(content);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return Objects.hash(date, doctor, content);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 8,
      "wang-jun-hao": 45,
      "divakarmal": 2,
      "foojingyi": 47
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/medicalnote/MedicalNoteComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "package seedu.medibook.model.medicalnote;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.commonfields.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " * A comparator of medical notes that works with sort to give a list of medical notes from most recent to least recent."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "public class MedicalNoteComparator implements Comparator\u003cMedicalNote\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public int compare(MedicalNote o1, MedicalNote o2) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Date date1 \u003d o1.date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Date date2 \u003d o2.date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return -date1.compareTo(date2);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 17
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/medicalnote/MedicalNoteList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "package seedu.medibook.model.medicalnote;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " * Represents a list of medical notes, sorted from most recent date to least recent date, for a Patient in MediBook."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class MedicalNoteList implements ReadOnlyMedicalNoteList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private static final MedicalNoteComparator comparator \u003d new MedicalNoteComparator();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /** An inner representation of list of medical notes within MedicalNoteList that works with GUI element */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private final ObservableList\u003cMedicalNote\u003e innerList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Constructs an empty medical note list object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public MedicalNoteList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        innerList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Constructs medical note list object containing medical notes in the given list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Notes in medical note list will be sorted sorted from most recent date to least recent date."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * A new copy of the list is created to be stored as the inner list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @param listOfMedicalNotes list of medical notes"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public MedicalNoteList(List\u003cMedicalNote\u003e listOfMedicalNotes) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        ObservableList\u003cMedicalNote\u003e copyOfList \u003d FXCollections.observableArrayList(listOfMedicalNotes);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        copyOfList.sort(comparator);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.innerList \u003d copyOfList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Adds a new medical note to this list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @param newMedicalNote medical note to be added to this list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void add(MedicalNote newMedicalNote) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        innerList.add(newMedicalNote);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        innerList.sort(comparator);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Returns true if the specified medical note is already a medical note in this list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @param otherMedicalNote medical note to test against."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @return true if the same medical note exists in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public boolean alreadyHasMedicalNote(MedicalNote otherMedicalNote) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return innerList.contains(otherMedicalNote);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Returns true if this list contains no medical notes."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @return true if this list contains no medical notes."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return innerList.isEmpty();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Creates and return a copy of this medical note list that is not the same object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @return A copy of this medical note list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public MedicalNoteList makeCopy() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        List\u003cMedicalNote\u003e copyOfList \u003d new LinkedList\u003c\u003e(innerList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return new MedicalNoteList(copyOfList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Returns number of medical notes contained within this list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return innerList.size();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Deletes the medical note at the specified index from the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @param index Zero-based index of medical note."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void deleteMedicalNoteAtIndex(int index) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assert index \u003c size() : \"Attempting to delete with out-of-range index\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        innerList.remove(index);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Retrieves the medical note at the specified index in the list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @param index Zero-based index of medical note."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @return medical note at index in list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public MedicalNote getMedicalNoteAtIndex(int index) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assert index \u003c size() : \"Attempting to get medical note with out-of-range index\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return innerList.get(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Gets an observable list of medical notes contained within this medical note list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @return Observable list of medical notes."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public ObservableList\u003cMedicalNote\u003e getObservableInnerList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return innerList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public List\u003cMedicalNote\u003e getMedicalNoteList() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return Collections.unmodifiableList(innerList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        for (MedicalNote medicalNote : innerList) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            result +\u003d medicalNote.toString() + \"\\n\\n\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        if (!(other instanceof MedicalNoteList)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        MedicalNoteList otherList \u003d (MedicalNoteList) other;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return otherList.innerList.equals(innerList);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 11,
      "wang-jun-hao": 124
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/medicalnote/ReadOnlyMedicalNoteList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package seedu.medibook.model.medicalnote;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": " * Unmodifiable view of a medical notes list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public interface ReadOnlyMedicalNoteList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Returns an unmodifiable view of the patient\u0027s medical notes."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    List\u003cMedicalNote\u003e getMedicalNoteList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 15
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/patient/Address.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Represents a Patient\u0027s address in the medi book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 3,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/patient/BloodType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Represent\u0027s a Patient\u0027s blood type in the medi book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidBloodType(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public class BloodType {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Blood type can only be one of the 8 possible blood types\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public final BloodTypeEnum bloodType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Constructor for BloodType object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * @param bloodType blood type of the patient"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public BloodType(String bloodType) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        requireNonNull(bloodType);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        checkArgument(isValidBloodType(bloodType), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        this.bloodType \u003d BloodTypeEnum.valueOfLabel(bloodType);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static boolean isValidBloodType(String test) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return !(BloodTypeEnum.valueOfLabel(test) \u003d\u003d null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return bloodType.label;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return other \u003d\u003d this //short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                || (other instanceof BloodType"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                \u0026\u0026 bloodType.equals(((BloodType) other).bloodType));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 40
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/patient/BloodTypeEnum.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public enum BloodTypeEnum {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    A_POSITIVE(\"A+\"),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    A_NEGATIVE(\"A-\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    B_POSITIVE(\"B+\"),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    B_NEGATIVE(\"B-\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    O_POSITIVE(\"O+\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    O_NEGATIVE(\"O-\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    AB_POSITIVE(\"AB+\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    AB_NEGATIVE(\"AB-\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public final String label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private BloodTypeEnum(String label) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        this.label \u003d label;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Gets enum from string input"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * @param label"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * @return required BloodTypeEnum object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static BloodTypeEnum valueOfLabel(String label) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        for (BloodTypeEnum e : values()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            if (e.label.equals(label)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                return e;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 31
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/patient/Bmi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Represents a Person\u0027s BMI in the medi book, whose value is defined to 1 dp (zero-padded)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidBmi(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "public class Bmi {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            \"BMI should only contain positive numbers with 1 decimal place, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private static final double conversionFactor \u003d 100;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private final double numericValue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Constructs a {@code bmi} from known weight and height."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @param weight A valid weight object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @param height A valid height object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public Bmi(Weight weight, Height height) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        requireAllNonNull(weight, height);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        double numericWeight \u003d weight.getNumericValue();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        int numericHeight \u003d height.getNumericValue();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.numericValue \u003d computeBmiValue(numericWeight, numericHeight);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.value \u003d String.valueOf(numericValue);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Constructs a {@code bmi}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @param bmi A valid bmi."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public Bmi(String bmi) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        requireNonNull(bmi);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        checkArgument(isValidBmi(bmi), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.value \u003d bmi;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.numericValue \u003d Double.parseDouble(bmi);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private static double computeBmiValue(double numericWeight, int numericHeight) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        double numericHeightInMetres \u003d ((double) numericHeight) / conversionFactor;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        double numericBmi \u003d numericWeight / Math.pow(numericHeightInMetres, 2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return ((double) Math.round(numericBmi * 10)) / 10;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Returns true if a given string is a valid bmi."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static boolean isValidBmi(String test) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            // check if valid number"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            Double bmi \u003d Double.parseDouble(test);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            // check if specified with 1 decimal place"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            if (!hasDotAsSecondLastCharacter(test)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            if (bmi \u003c\u003d 0) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        } catch (NumberFormatException | NullPointerException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private static boolean hasDotAsSecondLastCharacter(String test) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        if (!test.contains(\".\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        int indexOfDot \u003d test.indexOf(\".\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        if (indexOfDot !\u003d test.length() - 2) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                || (other instanceof Bmi // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                \u0026\u0026 value.equals(((Bmi) other).value)); // state check"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 100,
      "divakarmal": 4
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/patient/DateOfBirth.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.commonfields.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Represents a Patient\u0027s date of birth (DOB) in the medi book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDateOfBirth(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public class DateOfBirth {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            \"Date of birth (DOB) should be a valid calendar date and of the format \\\"DD-MM-YYYY\\\" \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                    + \"where D, M and Y represent digits of the day, month and year of the DOB respectively.\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                    + \"\\nDOB should not be in the future.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private final String inputValue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private final String outputValue;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Constructs a {@code DateOfBirth}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @param dobString A valid date of birth."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public DateOfBirth(String dobString) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        requireNonNull(dobString);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        checkArgument(isValidDateOfBirth(dobString), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        date \u003d new Date(dobString, true);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        inputValue \u003d date.inputValue;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        outputValue \u003d date.outputValue;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Returns true if a given string is a valid date of birth."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static boolean isValidDateOfBirth(String dobString) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        if (!Date.isValidDate(dobString)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new Date(dobString, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public String getInputString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return inputValue;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public String getOutputString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return outputValue;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return outputValue;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                || (other instanceof DateOfBirth // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                \u0026\u0026 date.equals(((DateOfBirth) other).date)); // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return date.hashCode();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 30,
      "divakarmal": 3,
      "foojingyi": 43
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/patient/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Represents a Patient\u0027s email in the medi book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 3,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/patient/FieldContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_BLOOD_TYPE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_IC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_WEIGHT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.parser.Prefix;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": " * Tests that a {@code Patient}\u0027s field as specified by the prefix matches with the keyword given."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class FieldContainsKeywordsPredicate implements Predicate\u003cPatient\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private final Prefix prefix;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Creates a predicate for a patient field based on the given prefix and keywords."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public FieldContainsKeywordsPredicate(List\u003cString\u003e keywords, Prefix prefix) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public boolean test(Patient patient) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(getField(patient), keyword));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                || (other instanceof FieldContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                \u0026\u0026 keywords.equals(((FieldContainsKeywordsPredicate) other).keywords)) // keywords check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                \u0026\u0026 prefix.equals(((FieldContainsKeywordsPredicate) other).prefix); // prefix check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private String getField(Patient patient) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // switch statement cannot be used since Prefix is not an enum"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (PREFIX_IC.equals(prefix)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return patient.getIc().ic;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (PREFIX_NAME.equals(prefix)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return patient.getName().fullName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        if (PREFIX_DATE.equals(prefix)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return patient.getDateOfBirthInputString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (PREFIX_PHONE.equals(prefix)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return patient.getPhone().value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (PREFIX_EMAIL.equals(prefix)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return patient.getEmail().map(Email::toString).orElse(\"\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (PREFIX_HEIGHT.equals(prefix)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return patient.getHeight().map(Height::toString).orElse(\"\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (PREFIX_WEIGHT.equals(prefix)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return patient.getWeight().map(Weight::toString).orElse(\"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (PREFIX_ADDRESS.equals(prefix)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return patient.getAddress().map(Address::toString).orElse(\"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (PREFIX_BLOOD_TYPE.equals(prefix)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return patient.getBloodType().map(BloodType::toString).orElse(\"\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 66,
      "wang-jun-hao": 3,
      "divakarmal": 11
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/patient/Height.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Represents a Patient\u0027s height in the medi book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidHeight(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class Height {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            \"Height should only contain numbers, and it should be a value between 0 and 300 exclusive\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static final String HEIGHT_UNIT \u003d \"cm\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final int HEIGHT_MIN \u003d 0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final int HEIGHT_MAX \u003d 300;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private final int numericValue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Constructs a {@code Height}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param height A valid height."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public Height(String height) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        requireNonNull(height);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        checkArgument(isValidHeight(height), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        value \u003d height;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.numericValue \u003d Integer.parseInt(height);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Returns true if a given string is a valid height."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static boolean isValidHeight(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            int height \u003d Integer.parseInt(test);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return height \u003c HEIGHT_MAX \u0026\u0026 height \u003e HEIGHT_MIN;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public int getNumericValue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return numericValue;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return String.valueOf(value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                || (other instanceof Height // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                \u0026\u0026 value.equals(((Height) other).value)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 56,
      "wang-jun-hao": 6,
      "divakarmal": 3
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/patient/Ic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Represents a Patient\u0027s ic in the medi book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidIc(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "public class Ic {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"IC should be of the format @xxxxxxx#\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            + \"1. The @ should be a letter S, T, F or G\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            + \"2. The xxxxxxx should be a 7-digit number\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            + \"3. The # should be any letter\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static final String FIRST_CHARACTER_REGEX \u003d \"[STFGstfg]{1,1}\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static final String DIGITS_REGEX \u003d \"\\\\d{7,7}\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static final String LAST_CHARACTER_REGEX \u003d \"\\\\w{1,1}\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d FIRST_CHARACTER_REGEX + DIGITS_REGEX + LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public final String ic;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Constructs an {@code Ic}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * @param ic A valid IC number."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public Ic(String ic) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        requireNonNull(ic);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        checkArgument(isValidIc(ic), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        this.ic \u003d ic.toUpperCase();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assert ic.length() \u003d\u003d 9;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Returns if a given string is a valid IC number."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static boolean isValidIc(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return ic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                || (other instanceof Ic // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                \u0026\u0026 ic.equals(((Ic) other).ic)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return ic.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 3,
      "PrestonTYR": 56
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/patient/Patient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.commonfields.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicaldetail.Allergy;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicaldetail.Condition;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicaldetail.Treatment;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNote;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNoteList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Represents a Patient in the medi book."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public class Patient {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static final String OPTIONAL_FIELD_EMPTY_MESSAGE \u003d \"N/A\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    // Compulsory fields"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private final Ic ic;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private final DateOfBirth dateOfBirth;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    // Optional fields"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private final Optional\u003cEmail\u003e email;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private final Optional\u003cAddress\u003e address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private final Optional\u003cHeight\u003e height;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private final Optional\u003cWeight\u003e weight;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private final Optional\u003cBmi\u003e bmi;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private final Optional\u003cBloodType\u003e bloodType;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    // Default empty fields"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private MedicalNoteList medicalNoteList \u003d new MedicalNoteList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private final Set\u003cAllergy\u003e allergies \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private final Set\u003cCondition\u003e conditions \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private final Set\u003cTreatment\u003e treatments \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    // Patient\u0027s past records"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private Record record \u003d new Record();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public Patient(Ic ic, Name name, DateOfBirth dateOfBirth, Phone phone, Optional\u003cEmail\u003e email,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                   Optional\u003cAddress\u003e address, Optional\u003cHeight\u003e height, Optional\u003cWeight\u003e weight,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                   Optional\u003cBloodType\u003e bloodType, Set\u003cAllergy\u003e allergies, Set\u003cCondition\u003e conditions,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                   Set\u003cTreatment\u003e treatments) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        requireAllNonNull(ic, name, dateOfBirth, phone, email, address, height, weight, bloodType, allergies,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                conditions, treatments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        this.ic \u003d ic;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.bloodType \u003d bloodType;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.allergies.addAll(allergies);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.conditions.addAll(conditions);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.treatments.addAll(treatments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (height.isEmpty() || weight.isEmpty()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            this.bmi \u003d Optional.empty();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            this.bmi \u003d Optional.of(new Bmi(weight.get(), height.get()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Overloaded constructor of Person with an additional bmi field that has already been computed to bypass"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * unnecessary re-computation of bmi."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public Patient(Ic ic, Name name, DateOfBirth dateOfBirth, Phone phone, Optional\u003cEmail\u003e email,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                   Optional\u003cAddress\u003e address, Optional\u003cHeight\u003e height, Optional\u003cWeight\u003e weight, Optional\u003cBmi\u003e bmi,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                   Optional\u003cBloodType\u003e bloodType, Set\u003cAllergy\u003e allergies, Set\u003cCondition\u003e conditions,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                   Set\u003cTreatment\u003e treatments) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        requireAllNonNull(ic, name, dateOfBirth, phone, email, address, height, weight, bloodType, allergies,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            conditions, treatments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.ic \u003d ic;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.bmi \u003d bmi;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        this.bloodType \u003d bloodType;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.allergies.addAll(allergies);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.conditions.addAll(conditions);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.treatments.addAll(treatments);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public Ic getIc() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return ic;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public DateOfBirth getDateOfBirth() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return dateOfBirth;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public String getDateOfBirthInputString() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return dateOfBirth.getInputString();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public String getDateOfBirthOutputString() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return dateOfBirth.getOutputString();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Represents the email of the patient for the UI to display."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * @return a string representing the email of the patient or N/A if there"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * is no email."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public String getStringEmail() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (getEmail().isPresent()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return getEmail().get().toString();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return OPTIONAL_FIELD_EMPTY_MESSAGE;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Represents the address of the patient for the UI to display."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * @return a string representing the address of the patient or N/A if there"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * is no address."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public String getStringAddress() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (getAddress().isPresent()) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return getAddress().get().toString();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return OPTIONAL_FIELD_EMPTY_MESSAGE;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public Optional\u003cHeight\u003e getHeight() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return height;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Represents the height of the patient for the UI to display."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * @return a string representing the height of the patient or N/A if there"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * is no height."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public String getStringHeight() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (getHeight().isPresent()) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return getHeight().get().toString();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return OPTIONAL_FIELD_EMPTY_MESSAGE;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public Optional\u003cWeight\u003e getWeight() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return weight;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Represents the weight of the patient for the UI to display."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * @return a string representing the weight of the patient or N/A if there"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * is no weight."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public String getStringWeight() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (getWeight().isPresent()) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return getWeight().get().toString();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return OPTIONAL_FIELD_EMPTY_MESSAGE;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public Optional\u003cBmi\u003e getBmi() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return bmi;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Represents the bmi of the patient for the UI to display."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * @return a string representing the bmi of the patient or N/A if there"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * is no bmi."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public String getStringBmi() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (getBmi().isPresent()) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return getBmi().get().toString();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return OPTIONAL_FIELD_EMPTY_MESSAGE;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public Optional\u003cBloodType\u003e getBloodType() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return bloodType;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Represents the bloodtype of the patient for the UI to display."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * @return a string representing the bloodtype of the patient or N/A if there"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * is no bloodtype."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public String getStringBloodType() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (getBloodType().isPresent()) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return getBloodType().get().toString();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return OPTIONAL_FIELD_EMPTY_MESSAGE;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Returns an immutable allergy set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public Set\u003cAllergy\u003e getAllergies() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return Collections.unmodifiableSet(allergies);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Returns an immutable condition set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public Set\u003cCondition\u003e getConditions() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return Collections.unmodifiableSet(conditions);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Returns an immutable treatment set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public Set\u003cTreatment\u003e getTreatments() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return Collections.unmodifiableSet(treatments);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Adds medical note to the list of medical notes in this patient"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @param newMedicalNote new medical note object to be added to patient"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void addMedicalNote(MedicalNote newMedicalNote) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        medicalNoteList.add(newMedicalNote);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Sets the medical note list object within this patient to the given medical note list."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @param medicalNoteList new medical note list to be stored within patient."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void setMedicalNoteList(MedicalNoteList medicalNoteList) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.medicalNoteList \u003d medicalNoteList;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Returns the medical note list object within this patient."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public MedicalNoteList getMedicalNoteList() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return medicalNoteList;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public ObservableList\u003cMedicalNote\u003e getObservableMedicalNoteList() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return medicalNoteList.getObservableInnerList();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Retrieves the medical note at the specified index in the list belonging to the patient."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @param index Zero-based index of medical note."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @return medical note at index in list belonging to the patient."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public MedicalNote getMedicalNoteAtIndex(int index) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return medicalNoteList.getMedicalNoteAtIndex(index);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Deletes the medical note at the specified index from the list belonging to the patient."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @param index Zero-based index of medical note."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void deleteMedicalNoteAtIndex(int index) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        medicalNoteList.deleteMedicalNoteAtIndex(index);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Get number of medical notes within the list belonging to this patient."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @return Number of medical notes in the list."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public int getNumOfMedicalNotes() {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return medicalNoteList.size();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Returns true if both patients of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * This defines a weaker notion of equality between two patients."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public boolean isSamePatient(Patient otherPatient) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        if (otherPatient \u003d\u003d this) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return otherPatient !\u003d null"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                \u0026\u0026 otherPatient.getIc().equals(getIc());"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Represents the IC of the patient for the UI to display."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * @return a string representing the IC"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public String getStringIc() {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return getIc().toString();"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Represents the Name of the patient for the UI to display."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * @return a string representing the Name"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public String getStringName() {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return getName().toString();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Represents the Date of birth of the patient for the UI to display."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * @return a string representing the Date of birth"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public String getStringDob() {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return getDateOfBirth().toString();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Represents the Phone number of the patient for the UI to display."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * @return a string representing the phone number"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public String getStringPhone() {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return getPhone().toString();"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Returns the past records of the patient."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @return Record object containing the patient\u0027s past records"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public Record getRecord() {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assert this.record !\u003d null : \"Record should not be null!\";"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return this.record;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Sets the past records of the patient."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void setRecord(Record record) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        requireNonNull(record);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.record \u003d record;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Returns true if the specified medical note is already a medical note in the list belonging to this patient."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @param otherMedicalNote medical note to test against."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @return true if the same medical note exists in the list belonging to this patient."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public boolean alreadyHasMedicalNote(MedicalNote otherMedicalNote) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return medicalNoteList.alreadyHasMedicalNote(otherMedicalNote);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Returns true if both patients have the same identity and data fields."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * This defines a stronger notion of equality between two patients."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        if (!(other instanceof Patient)) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient otherPatient \u003d (Patient) other;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return otherPatient.getIc().equals(getIc())"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                \u0026\u0026 otherPatient.getName().equals(getName())"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                \u0026\u0026 otherPatient.getDateOfBirth().equals(getDateOfBirth())"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                \u0026\u0026 otherPatient.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                \u0026\u0026 otherPatient.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                \u0026\u0026 otherPatient.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                \u0026\u0026 otherPatient.getHeight().equals(getHeight())"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                \u0026\u0026 otherPatient.getWeight().equals(getWeight())"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                \u0026\u0026 otherPatient.getBmi().equals(getBmi())"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                \u0026\u0026 otherPatient.getBloodType().equals(getBloodType())"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                \u0026\u0026 otherPatient.getMedicalNoteList().equals(getMedicalNoteList())"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                \u0026\u0026 otherPatient.getAllergies().equals(getAllergies())"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                \u0026\u0026 otherPatient.getConditions().equals(getConditions())"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                \u0026\u0026 otherPatient.getTreatments().equals(getTreatments());"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return Objects.hash(ic, name, dateOfBirth, phone, email, address, height, weight, bmi,"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                            bloodType, medicalNoteList, allergies, conditions, treatments);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        builder.append(getIc())"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                .append(\" Name \")"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .append(\" Date of Birth: \")"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .append(getDateOfBirth())"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                .append(getStringEmail())"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                .append(getStringAddress())"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .append(\" Height: \")"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                .append(getStringHeight())"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                .append(\" Weight: \")"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                .append(getStringWeight())"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                .append(\" BMI: \")"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                .append(getStringBmi())"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                .append(\" Blood type: \")"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                .append(getStringBloodType())"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .append(\" Allergies: \");"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        getAllergies().forEach(builder::append);"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        builder.append(\" Conditions: \");"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        getConditions().forEach(builder::append);"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        builder.append(\" Treatments: \");"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        getTreatments().forEach(builder::append);"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 25,
      "wang-jun-hao": 107,
      "divakarmal": 77,
      "foojingyi": 59,
      "PrestonTYR": 102,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/patient/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Represents a Patient\u0027s phone number in the medi book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be within 7 to 15 digits long.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{7,15}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 2,
      "divakarmal": 3,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/patient/Record.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static seedu.medibook.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.commonfields.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class Record {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private HashMap\u003cDate, Height\u003e heightRecord;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private HashMap\u003cDate, Weight\u003e weightRecord;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Initializes a {@code} Record object with empty height and weight record."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public Record() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.heightRecord \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.weightRecord \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Initializes a {@code} Record object with the given height and weight record."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public Record(HashMap\u003cDate, Height\u003e heightRecord, HashMap\u003cDate, Weight\u003e weightRecord) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        requireAllNonNull(heightRecord, weightRecord);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.heightRecord \u003d heightRecord;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.weightRecord \u003d weightRecord;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void addHeightRecord(Height height) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        addHeightRecord(new Date(), height);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Inserts a {@code height} record for the given {@code date}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param date date of record"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param height height of patient"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void addHeightRecord(Date date, Height height) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assert date !\u003d null : \"Date should not be null!\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assert height !\u003d null : \"Height should not be null!\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        heightRecord.put(date, height);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void addWeightRecord(Weight weight) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        addWeightRecord(new Date(), weight);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Inserts a {@code weight} record for the given {@code date}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param date date of record"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param weight weight of patient"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void addWeightRecord(Date date, Weight weight) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assert date !\u003d null : \"Date should not be null!\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assert weight !\u003d null : \"Weight should not be null!\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        weightRecord.put(date, weight);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public HashMap\u003cDate, Height\u003e getHeightRecord() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assert heightRecord !\u003d null : \"Height record should not be null\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return heightRecord;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public HashMap\u003cDate, Weight\u003e getWeightRecord() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assert weightRecord !\u003d null : \"Weight record should not be null\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return weightRecord;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (!(other instanceof Record)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Record otherRecord \u003d (Record) other;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return otherRecord.getHeightRecord().equals(getHeightRecord())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                \u0026\u0026 otherRecord.getWeightRecord().equals(getWeightRecord());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 86
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/patient/UniquePatientList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.exceptions.DuplicatePatientException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.exceptions.PatientNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * A list of patients that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * A patient is considered unique by comparing using {@code Patient#isSamePatient(Patient)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * As such, adding and updating of patients uses Patient#isSamePatient(Patient) for equality"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * so as to ensure that the patient being added or updated is unique in terms of identity in the UniquePatientList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * However, the removal of a patient uses Patient#equals(Object)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * so as to ensure that the patient with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * @see Patient#isSamePatient(Patient)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public class UniquePatientList implements Iterable\u003cPatient\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private final ObservableList\u003cPatient\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private final ObservableList\u003cPatient\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Returns true if the list contains an equivalent patient as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public boolean contains(Patient toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePatient);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Adds a patient to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * The patient must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void add(Patient toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            throw new DuplicatePatientException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Replaces the patient {@code target} in the list with {@code editedPatient}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * The patient identity of {@code editedPatient} must not be the same as another existing patient in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void setPatient(Patient target, Patient editedPatient) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        requireAllNonNull(target, editedPatient);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            throw new PatientNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        if (!target.isSamePatient(editedPatient) \u0026\u0026 contains(editedPatient)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            throw new DuplicatePatientException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        internalList.set(index, editedPatient);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Removes the equivalent patient from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * The patient must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void remove(Patient toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            throw new PatientNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void setPatients(UniquePatientList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Replaces the contents of this list with {@code patients}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * {@code patients} must not contain duplicate patients."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void setPatients(List\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        requireAllNonNull(patients);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        if (!patientsAreUnique(patients)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            throw new DuplicatePatientException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        internalList.setAll(patients);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public ObservableList\u003cPatient\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public Iterator\u003cPatient\u003e iterator() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                || (other instanceof UniquePatientList // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePatientList) other).internalList));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Returns true if {@code patients} contains only unique patients."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private boolean patientsAreUnique(List\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        for (int i \u003d 0; i \u003c patients.size() - 1; i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            for (int j \u003d i + 1; j \u003c patients.size(); j++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                if (patients.get(i).isSamePatient(patients.get(j))) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 138
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/patient/Weight.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Represents a Patient\u0027s weight in the medi book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidWeight(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "public class Weight {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            \"Weight (kg) should only contain positive numbers with 1 decimal place, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String WEIGHT_UNIT \u003d \"kg\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private final double numericValue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Constructs a {@code weight}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * @param weight A valid weight."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public Weight(String weight) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        requireNonNull(weight);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        checkArgument(isValidWeight(weight), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.value \u003d weight;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.numericValue \u003d Double.parseDouble(weight);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Returns true if a given string is a valid weight."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static boolean isValidWeight(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            // check if valid number"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            Double weight \u003d Double.parseDouble(test);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            // check if specified with 1 decimal place"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            if (!hasDotAsSecondLastCharacter(test)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            if (weight \u003c\u003d 0) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        } catch (NumberFormatException | NullPointerException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private static boolean hasDotAsSecondLastCharacter(String test) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        if (!test.contains(\".\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        int indexOfDot \u003d test.indexOf(\".\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        if (indexOfDot !\u003d test.length() - 2) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public double getNumericValue() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return numericValue;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return String.valueOf(value);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                || (other instanceof Weight // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                \u0026\u0026 value.equals(((Weight) other).value)); // state check"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 83,
      "divakarmal": 3
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/patient/exceptions/DuplicatePatientException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Signals that the operation will result in duplicate Patients (Patients are considered duplicates"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public class DuplicatePatientException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public DuplicatePatientException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        super(\"Operation would result in duplicate patients\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 11
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/patient/exceptions/PatientNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Signals that the operation is unable to find the specified patient."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public class PatientNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 6
    }
  },
  {
    "path": "src/main/java/seedu/medibook/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.MediBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ReadOnlyMediBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.commonfields.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.commonfields.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicaldetail.Allergy;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicaldetail.Condition;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicaldetail.Treatment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.BloodType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.DateOfBirth;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Height;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Ic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.patient.Record;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Weight;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Contains utility methods for populating {@code MediBook} with sample data."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static Patient[] getSamplePatients() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return new Patient[] {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            new Patient(new Ic(\"S9123456A\"), new Name(\"Alex Yeoh\"), new DateOfBirth(\"15-05-1991\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    new Phone(\"87438807\"), Optional.of(new Email(\"alexyeoh@example.com\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    Optional.of(new Address(\"Blk 30 Geylang Street 29, #06-40\")), Optional.of(new Height(\"173\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                    Optional.of(new Weight(\"67.4\")), Optional.of(new BloodType(\"A+\")), getAllergySet(\"Penicillin\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                    getConditionSet(\"back sprain\"), getTreatmentSet(\"physiotherapy\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            new Patient(new Ic(\"S8786858D\"), new Name(\"Bernice Yu\"), new DateOfBirth(\"17-09-1987\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    new Phone(\"99272758\"), Optional.of(new Email(\"berniceyu@example.com\")),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    Optional.of(new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\")),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    Optional.of(new Height(\"166\")), Optional.of(new Weight(\"48.2\")),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                    Optional.of(new BloodType(\"B+\")), getAllergySet(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                    getConditionSet(\"ankle sprain\", \"fever\"), getTreatmentSet(\"physiotherapy\", \"Ibuprofen\")),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            new Patient(new Ic(\"T1234567G\"), new Name(\"Charlotte Oliveiro\"), new DateOfBirth(\"28-02-2012\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    new Phone(\"93210283\"), Optional.of(new Email(\"charlotte@example.com\")),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    Optional.of(new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\")), Optional.of(new Height(\"175\")),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                    Optional.of(new Weight(\"58.5\")), Optional.of(new BloodType(\"A+\")), getAllergySet(\"peanut\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                    getConditionSet(), getTreatmentSet(\"epinephrine\")),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            new Patient(new Ic(\"F7654321K\"), new Name(\"David Li\"), new DateOfBirth(\"20-12-1976\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    new Phone(\"91031282\"), Optional.of(new Email(\"lidavid@example.com\")),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    Optional.of(new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\")),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                    Optional.of(new Height(\"169\")), Optional.of(new Weight(\"64.9\")), Optional.of(new BloodType(\"O+\")),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                    getAllergySet(\"NSAIDs\"), getConditionSet(), getTreatmentSet()),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            new Patient(new Ic(\"G1928374R\"), new Name(\"Irfan Ibrahim\"), new DateOfBirth(\"11-04-2000\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    new Phone(\"92492021\"), Optional.of(new Email(\"irfan@example.com\")),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    Optional.of(new Address(\"Blk 47 Tampines Street 20, #17-35\")), Optional.of(new Height(\"180\")),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                    Optional.of(new Weight(\"80.5\")), Optional.of(new BloodType(\"AB+\")), getAllergySet(\"shellfish\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                    getConditionSet(\"knee sprain\"), getTreatmentSet(\"physiotherapy\")),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            new Patient(new Ic(\"S9182736Q\"), new Name(\"Roy Balakrishnan\"), new DateOfBirth(\"14-06-1991\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    new Phone(\"92624417\"), Optional.of(new Email(\"royb@example.com\")),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    Optional.of(new Address(\"Blk 45 Aljunied Street 85, #11-31\")), Optional.of(new Height(\"165\")),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                    Optional.of(new Weight(\"60.6\")), Optional.of(new BloodType(\"A-\")),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                    getAllergySet(\"fish\", \"Phenytoin\"), getConditionSet(\"mitral valve prolapse\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                    getTreatmentSet())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static ReadOnlyMediBook getSampleMediBook() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        MediBook sampleMb \u003d new MediBook();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Patient[] initPatients \u003d generateRecords(getSamplePatients());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        for (Patient samplePatient : initPatients) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            sampleMb.addPatient(samplePatient);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return sampleMb;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Returns a allergy set containing the list of strings given."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public static Set\u003cAllergy\u003e getAllergySet(String... strings) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .map(Allergy::new)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Returns a condition set containing the list of strings given."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public static Set\u003cCondition\u003e getConditionSet(String... strings) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .map(Condition::new)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Returns a treatment set containing the list of strings given."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public static Set\u003cTreatment\u003e getTreatmentSet(String... strings) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .map(Treatment::new)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static Patient[] generateRecords(Patient[] patients) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        for (Patient patient : patients) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            LocalDate date \u003d LocalDate.now();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            String currentHeight \u003d patient.getHeight().get().value;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            String currentWeight \u003d patient.getWeight().get().value;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            Record patientRecord \u003d patient.getRecord();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            double weightVariance \u003d Math.random() * 10;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            for (int i \u003d 0; i \u003c Math.random() * 20; i++) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                String dateString \u003d toDateString(date);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                Date recordDate \u003d new Date(dateString, true);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                Height recordHeight \u003d new Height(currentHeight);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                Weight recordWeight \u003d new Weight(currentWeight);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                patientRecord.addHeightRecord(recordDate, recordHeight);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                patientRecord.addWeightRecord(recordDate, recordWeight);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                date \u003d date.minusDays((int) (Math.random() * 20));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                int updatedHeight \u003d Integer.parseInt(currentHeight) - (int) (Math.random() * 1.5);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                currentHeight \u003d Integer.toString(updatedHeight);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                double updatedWeight \u003d Double.parseDouble(currentWeight) + (weightVariance * (Math.random() - 0.5));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                currentWeight \u003d toOneDecimal(Double.toString(updatedWeight));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return patients;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static String toDateString(LocalDate date) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // LocalDate toString returns dates as yyyy-mm-dd"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        List\u003cString\u003e dateInfo \u003d Arrays.asList(date.toString().split(\"-\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Collections.reverse(dateInfo);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // Reverse the year, month and date position to create a valid date string for the Date class"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return String.join(\"-\", dateInfo);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static String toOneDecimal(String value) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        int decimalPos \u003d value.indexOf(\".\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return value.substring(0, decimalPos + 2);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 46,
      "wang-jun-hao": 1,
      "divakarmal": 25,
      "foojingyi": 37,
      "PrestonTYR": 14,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/medibook/storage/JsonAdaptedAccount.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.Account;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.commonfields.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.doctor.Doctor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.doctor.Mcr;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "class JsonAdaptedAccount {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Account data is corrupted!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private final String username;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private final String password;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private final String doctorName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private final String doctorMcr;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public JsonAdaptedAccount(@JsonProperty(\"username\") String username, @JsonProperty(\"password\") String password,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                              @JsonProperty(\"doctorName\") String doctorName,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                              @JsonProperty(\"doctorMcr\") String doctorMcr) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        this.doctorName \u003d doctorName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        this.doctorMcr \u003d doctorMcr;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public JsonAdaptedAccount(Account source) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        username \u003d source.getUsername();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        password \u003d source.getPassword();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        doctorName \u003d source.getDoctor().getName().fullName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        doctorMcr \u003d source.getDoctor().getMcr().value;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public Account toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (doctorName \u003d\u003d null || doctorMcr \u003d\u003d null || !Name.isValidName(doctorName) || !Mcr.isValidMcr(doctorMcr)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        final Name modelDoctorName \u003d new Name(doctorName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        final Mcr modelDoctorMcr \u003d new Mcr(doctorMcr);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        final Doctor modelDoctor \u003d new Doctor(modelDoctorName, modelDoctorMcr);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        final Account modelAccount \u003d new Account(username, password, modelDoctor);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return modelAccount;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PrestonTYR": 51
    }
  },
  {
    "path": "src/main/java/seedu/medibook/storage/JsonAdaptedAllergy.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicaldetail.Allergy;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicaldetail.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * Jackson-friendly version of {@link Allergy}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public class JsonAdaptedAllergy extends JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Constructs a {@code JsonAdaptedAllergy} with the given {@code tagName}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public JsonAdaptedAllergy(String tagName) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        super(tagName);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Converts a given {@code Allergy} into this class for Jackson use."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public JsonAdaptedAllergy(Allergy source) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        super(source);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Converts this Jackson-friendly adapted allergy object into the model\u0027s {@code Allergy} object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted allergy."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public Allergy toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return new Allergy(tagName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 42
    }
  },
  {
    "path": "src/main/java/seedu/medibook/storage/JsonAdaptedCondition.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicaldetail.Condition;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicaldetail.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * Jackson-friendly version of {@link Condition}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public class JsonAdaptedCondition extends JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Constructs a {@code JsonAdaptedCondition} with the given {@code tagName}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public JsonAdaptedCondition(String tagName) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        super(tagName);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Converts a given {@code Condition} into this class for Jackson use."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public JsonAdaptedCondition(Condition source) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        super(source);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Converts this Jackson-friendly adapted condition object into the model\u0027s {@code Condition} object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted condition."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public Condition toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return new Condition(tagName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 38,
      "PrestonTYR": 3
    }
  },
  {
    "path": "src/main/java/seedu/medibook/storage/JsonAdaptedMedicalNote.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.commonfields.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.commonfields.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.doctor.Doctor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.doctor.Mcr;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.medicalnote.Content;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNote;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": " * Jackson-friendly version of {@link MedicalNote}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "class JsonAdaptedMedicalNote {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static final String ERROR_MESSAGE_NULL_FIELD \u003d \"MedicalNote\u0027s fields cannot be null!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public final String date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @JsonProperty(\"doctor name\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public final String doctorName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @JsonProperty(\"doctor mcr\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public final String doctorMcr;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public final String content;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Constructs a {@code JsonAdaptedMedicalNote} with the given patient details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public JsonAdaptedMedicalNote(@JsonProperty(\"date\") String date, @JsonProperty(\"doctor name\") String doctorName,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                                  @JsonProperty(\"doctor mcr\") String doctorMcr,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                                  @JsonProperty(\"content\") String content) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.doctorName \u003d doctorName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.doctorMcr \u003d doctorMcr;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Converts a given {@code MedicalNote} into this class for Jackson use."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public JsonAdaptedMedicalNote(MedicalNote medicalNote) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.date \u003d medicalNote.getInputDateString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.doctorName \u003d medicalNote.getDoctorNameNoTitle();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.doctorMcr \u003d medicalNote.getDoctorStringMcr();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.content \u003d medicalNote.getContentString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Converts this Jackson-friendly adapted patient object into the model\u0027s {@code Patient} object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted patient."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public MedicalNote toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            final Date modelDate \u003d ParserUtil.parseDate(date);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            final Name modelName \u003d ParserUtil.parseName(doctorName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            final Mcr modelMcr \u003d ParserUtil.parseMcr(doctorMcr);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            final Doctor modelDoctor \u003d new Doctor(modelName, modelMcr);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            final Content modelContent \u003d ParserUtil.parseContent(content);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            return new MedicalNote(modelDate, modelDoctor, modelContent);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        } catch (ParseException | IllegalArgumentException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new IllegalValueException(e.getMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new IllegalValueException(ERROR_MESSAGE_NULL_FIELD);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 56,
      "wang-jun-hao": 17
    }
  },
  {
    "path": "src/main/java/seedu/medibook/storage/JsonAdaptedPatient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.model.patient.Patient.OPTIONAL_FIELD_EMPTY_MESSAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.commonfields.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicaldetail.Allergy;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicaldetail.Condition;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicaldetail.Treatment;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.BloodType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Bmi;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.DateOfBirth;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Height;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Ic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.patient.Record;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Weight;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Jackson-friendly version of {@link Patient}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "class JsonAdaptedPatient {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Patient\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private final String ic;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private final String dateOfBirth;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private final String height;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private final String weight;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private final String bmi;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private final String bloodType;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private final JsonAdaptedRecord record;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private final List\u003cJsonAdaptedAllergy\u003e allergies \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private final List\u003cJsonAdaptedCondition\u003e conditions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private final List\u003cJsonAdaptedTreatment\u003e treatments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Constructs a {@code JsonAdaptedPatient} with the given patient details."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public JsonAdaptedPatient(@JsonProperty(\"ic\") String ic, @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                              @JsonProperty(\"dateOfBirth\") String dateOfBirth, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                              @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                              @JsonProperty(\"height\") String height, @JsonProperty(\"weight\") String weight,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                              @JsonProperty(\"bmi\") String bmi, @JsonProperty(\"blood type\") String bloodType,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                              @JsonProperty(\"record\") JsonAdaptedRecord record,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                              @JsonProperty(\"allergies\") List\u003cJsonAdaptedAllergy\u003e allergies,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                              @JsonProperty(\"conditions\") List\u003cJsonAdaptedCondition\u003e conditions,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                              @JsonProperty(\"treatments\") List\u003cJsonAdaptedTreatment\u003e treatments) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        this.ic \u003d ic;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.bmi \u003d bmi;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        this.bloodType \u003d bloodType;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.record \u003d record;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (allergies !\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            this.allergies.addAll(allergies);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (conditions !\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            this.conditions.addAll(conditions);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (treatments !\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            this.treatments.addAll(treatments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Converts a given {@code Patient} into this class for Jackson use."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public JsonAdaptedPatient(Patient source) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        ic \u003d source.getIc().ic;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        dateOfBirth \u003d source.getDateOfBirthInputString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (source.getEmail().isPresent()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            email \u003d source.getStringEmail();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            email \u003d OPTIONAL_FIELD_EMPTY_MESSAGE;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (source.getAddress().isPresent()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            address \u003d source.getStringAddress();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            address \u003d OPTIONAL_FIELD_EMPTY_MESSAGE;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // height"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (source.getHeight().isPresent()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            height \u003d source.getStringHeight();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            height \u003d OPTIONAL_FIELD_EMPTY_MESSAGE;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // weight"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (source.getWeight().isPresent()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            weight \u003d source.getStringWeight();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            weight \u003d OPTIONAL_FIELD_EMPTY_MESSAGE;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // bmi"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (source.getBmi().isPresent()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            bmi \u003d source.getStringBmi();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            bmi \u003d OPTIONAL_FIELD_EMPTY_MESSAGE;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // blood type"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (source.getBloodType().isPresent()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            bloodType \u003d source.getStringBloodType();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            bloodType \u003d OPTIONAL_FIELD_EMPTY_MESSAGE;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        record \u003d new JsonAdaptedRecord(source.getRecord());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        allergies.addAll(source.getAllergies().stream()"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .map(JsonAdaptedAllergy::new)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        conditions.addAll(source.getConditions().stream()"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .map(JsonAdaptedCondition::new)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        treatments.addAll(source.getTreatments().stream()"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .map(JsonAdaptedTreatment::new)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Converts this Jackson-friendly adapted patient object into the model\u0027s {@code Patient} object."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted patient."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public Patient toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        final List\u003cAllergy\u003e patientAllergies \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        for (JsonAdaptedAllergy allergy : allergies) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            patientAllergies.add(allergy.toModelType());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        final List\u003cCondition\u003e patientConditions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        for (JsonAdaptedCondition condition : conditions) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            patientConditions.add(condition.toModelType());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        final List\u003cTreatment\u003e patientTreatments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        for (JsonAdaptedTreatment tag : treatments) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            patientTreatments.add(tag.toModelType());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (ic \u003d\u003d null) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Ic.class.getSimpleName()));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (!Ic.isValidIc(ic)) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            throw new IllegalValueException(Ic.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        final Ic modelIc \u003d new Ic(ic);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (dateOfBirth \u003d\u003d null) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                    DateOfBirth.class.getSimpleName()));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (!DateOfBirth.isValidDateOfBirth(dateOfBirth)) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            throw new IllegalValueException(DateOfBirth.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        final DateOfBirth modelDateOfBirth \u003d new DateOfBirth(dateOfBirth);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        final Optional\u003cEmail\u003e modelEmail;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (email.equals(OPTIONAL_FIELD_EMPTY_MESSAGE)) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            modelEmail \u003d Optional.empty();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            modelEmail \u003d Optional.of(new Email(email));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        final Optional\u003cAddress\u003e modelAddress;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (address.equals(OPTIONAL_FIELD_EMPTY_MESSAGE)) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            modelAddress \u003d Optional.empty();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            modelAddress \u003d Optional.of(new Address(address));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        final Optional\u003cHeight\u003e modelHeight;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (height \u003d\u003d null) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Height.class.getSimpleName()));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (height.equals(OPTIONAL_FIELD_EMPTY_MESSAGE)) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            modelHeight \u003d Optional.empty();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else if (!Height.isValidHeight(height)) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new IllegalValueException(Height.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            modelHeight \u003d Optional.of(new Height(height));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        final Optional\u003cWeight\u003e modelWeight;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (weight \u003d\u003d null) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Weight.class.getSimpleName()));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (weight.equals(OPTIONAL_FIELD_EMPTY_MESSAGE)) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            modelWeight \u003d Optional.empty();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else if (!Weight.isValidWeight(weight)) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            throw new IllegalValueException(Weight.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            modelWeight \u003d Optional.of(new Weight(weight));"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        final Optional\u003cBmi\u003e modelBmi;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (bmi \u003d\u003d null) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Bmi.class.getSimpleName()));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (bmi.equals(OPTIONAL_FIELD_EMPTY_MESSAGE)) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            modelBmi \u003d Optional.empty();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else if (!Bmi.isValidBmi(bmi)) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            throw new IllegalValueException(Bmi.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            modelBmi \u003d Optional.of(new Bmi(bmi));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        final Optional\u003cBloodType\u003e modelBloodType;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (bloodType \u003d\u003d null) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                    BloodType.class.getSimpleName()));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (bloodType.equals(OPTIONAL_FIELD_EMPTY_MESSAGE)) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            modelBloodType \u003d Optional.empty();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else if (!BloodType.isValidBloodType(bloodType)) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            throw new IllegalValueException(BloodType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            modelBloodType \u003d Optional.of(new BloodType(bloodType));"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        final Set\u003cAllergy\u003e modelAllergies \u003d new HashSet\u003c\u003e(patientAllergies);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        final Set\u003cCondition\u003e modelConditions \u003d new HashSet\u003c\u003e(patientConditions);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        final Set\u003cTreatment\u003e modelTreatments \u003d new HashSet\u003c\u003e(patientTreatments);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        final Patient modelPatient \u003d new Patient(modelIc, modelName, modelDateOfBirth, modelPhone, modelEmail,"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                modelAddress, modelHeight, modelWeight, modelBmi, modelBloodType,"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                modelAllergies, modelConditions, modelTreatments);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (record \u003d\u003d null) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                    Record.class.getSimpleName()));"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        final Record modelRecord \u003d record.toModelType();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        modelPatient.setRecord(modelRecord);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return modelPatient;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 49,
      "wang-jun-hao": 14,
      "divakarmal": 35,
      "foojingyi": 61,
      "PrestonTYR": 91,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/medibook/storage/JsonAdaptedRecord.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonGetter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonSetter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.commonfields.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.patient.Height;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.patient.Record;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.patient.Weight;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": " * Jackson-friendly version of {@link Record}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "class JsonAdaptedRecord {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static final String MISSING_HEIGHT_RECORD_MESSAGE \u003d \"Record\u0027s height record field is missing!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static final String MISSING_WEIGHT_RECORD_MESSAGE \u003d \"Record\u0027s Weight record field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private final HashMap\u003cString, String\u003e heightRecord;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private final HashMap\u003cString, String\u003e weightRecord;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Constructs a {@code JsonAdaptedRecord} with the given records."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public JsonAdaptedRecord(@JsonProperty(\"heightRecord\") HashMap\u003cString, String\u003e heightRecord,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                             @JsonProperty(\"weightRecord\") HashMap\u003cString, String\u003e weightRecord) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.heightRecord \u003d heightRecord;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.weightRecord \u003d weightRecord;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Converts a given {@code Record} into this class for Jackson use."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public JsonAdaptedRecord(Record source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        heightRecord \u003d toStringMap(source.getHeightRecord());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        weightRecord \u003d toStringMap(source.getWeightRecord());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @JsonGetter"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public Map\u003cString, String\u003e getHeightRecord() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return heightRecord;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @JsonSetter"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void setHeightRecord(String date, String height) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        heightRecord.put(date, height);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @JsonGetter"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public Map\u003cString, String\u003e getWeightRecord() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return weightRecord;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @JsonSetter"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void setWeightRecord(String date, String weight) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        weightRecord.put(date, weight);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Converts this Jackson-friendly adapted Record object into the model\u0027s {@code Record} object."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public Record toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (this.heightRecord \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new IllegalValueException(MISSING_HEIGHT_RECORD_MESSAGE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (this.weightRecord \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new IllegalValueException(MISSING_WEIGHT_RECORD_MESSAGE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        HashMap\u003cDate, Height\u003e heightRecord \u003d toDateHeightMap(this.heightRecord);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        HashMap\u003cDate, Weight\u003e weightRecord \u003d toDateWeightMap(this.weightRecord);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return new Record(heightRecord, weightRecord);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private HashMap\u003cString, String\u003e toStringMap(HashMap\u003cDate, ?\u003e record) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        HashMap\u003cString, String\u003e result \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        record.keySet().forEach(key -\u003e {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            String value \u003d record.get(key).toString();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            result.put(key.getInputString(), value);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        });"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private HashMap\u003cDate, Height\u003e toDateHeightMap(HashMap\u003cString, String\u003e stringMap) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        HashMap\u003cDate, Height\u003e result \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        stringMap.keySet().forEach(key -\u003e {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            Date date \u003d new Date(key, true);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            Height height \u003d new Height(stringMap.get(key));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            result.put(date, height);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        });"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private HashMap\u003cDate, Weight\u003e toDateWeightMap(HashMap\u003cString, String\u003e stringMap) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        HashMap\u003cDate, Weight\u003e result \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        stringMap.keySet().forEach(key -\u003e {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            Date date \u003d new Date(key, true);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            Weight weight \u003d new Weight(stringMap.get(key));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            result.put(date, weight);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        });"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 114,
      "wang-jun-hao": 1
    }
  },
  {
    "path": "src/main/java/seedu/medibook/storage/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicaldetail.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    protected final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 2,
      "foojingyi": 2,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/medibook/storage/JsonAdaptedTreatment.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicaldetail.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicaldetail.Treatment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * Jackson-friendly version of {@link Treatment}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public class JsonAdaptedTreatment extends JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Constructs a {@code JsonAdaptedTreatment} with the given {@code tagName}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public JsonAdaptedTreatment(String tagName) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        super(tagName);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Converts a given {@code Treatment} into this class for Jackson use."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public JsonAdaptedTreatment(Treatment source) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        super(source);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Converts this Jackson-friendly adapted treatment object into the model\u0027s {@code Treatment} object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted treatment."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public Treatment toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return new Treatment(tagName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 39,
      "PrestonTYR": 3
    }
  },
  {
    "path": "src/main/java/seedu/medibook/storage/JsonMediBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ReadOnlyMediBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * A class to access MediBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public class JsonMediBookStorage implements MediBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonMediBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public JsonMediBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public Path getMediBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public Optional\u003cReadOnlyMediBook\u003e readMediBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return readMediBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Similar to {@link #readMediBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public Optional\u003cReadOnlyMediBook\u003e readMediBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Optional\u003cJsonSerializableMediBook\u003e jsonMediBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                filePath, JsonSerializableMediBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        if (!jsonMediBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            return Optional.of(jsonMediBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void saveMediBook(ReadOnlyMediBook mediBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        saveMediBook(mediBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Similar to {@link #saveMediBook(ReadOnlyMediBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void saveMediBook(ReadOnlyMediBook mediBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        requireNonNull(mediBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableMediBook(mediBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 1,
      "divakarmal": 26,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/medibook/storage/JsonMedicalNoteListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static seedu.medibook.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.commons.util.FileUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.medicalnote.ReadOnlyMedicalNoteList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.patient.Ic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": " * A class to access MedicalNoteList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class JsonMedicalNoteListStorage implements MedicalNoteListStorage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static final String NAME_DIR \u003d \"medicalnotes\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static final String NAME_EXTENSION \u003d \".json\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonMedicalNoteListStorage.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public JsonMedicalNoteListStorage(Path filePath) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public Path getMedicalNotesDirPath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public Optional\u003cReadOnlyMedicalNoteList\u003e readMedicalNoteList(Ic ic) throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return readMedicalNoteList(filePath, ic);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Similar to {@link #readMedicalNoteList(Ic ic)}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public Optional\u003cReadOnlyMedicalNoteList\u003e readMedicalNoteList(Path filePath, Ic ic) throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        requireNonNull(ic);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Path medicalNotesPath \u003d getMedicalNotesPath(filePath, ic);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (!FileUtil.isFileExists(medicalNotesPath)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Optional\u003cJsonSerializableMedicalNoteList\u003e jsonMedicalNoteList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                medicalNotesPath, JsonSerializableMedicalNoteList.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return Optional.of(jsonMedicalNoteList.get().toModelType());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void saveMedicalNoteList(ReadOnlyMedicalNoteList medicalNoteList, Ic ic) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        saveMedicalNoteList(medicalNoteList, filePath, ic);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Similar to {@link #saveMedicalNoteList(ReadOnlyMedicalNoteList, Ic ic)}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void saveMedicalNoteList(ReadOnlyMedicalNoteList medicalNoteList, Path filePath, Ic ic) throws IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        requireAllNonNull(medicalNoteList, filePath, ic);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Path medicalNotesPath \u003d getMedicalNotesPath(filePath, ic);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FileUtil.createIfMissing(medicalNotesPath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableMedicalNoteList(medicalNoteList), medicalNotesPath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void deleteMedicalNoteList(Ic ic) throws IOException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        deleteMedicalNoteList(filePath, ic);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void deleteMedicalNoteList(Path filePath, Ic ic) throws IOException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        requireAllNonNull(filePath, ic);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Path medicalNotesPath \u003d getMedicalNotesPath(filePath, ic);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FileUtil.deleteIfExists(medicalNotesPath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void renameMedicalNoteList(Ic oldIc, Ic newIc) throws IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        renameMedicalNoteList(filePath, oldIc, newIc);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void renameMedicalNoteList(Path filePath, Ic oldIc, Ic newIc) throws IOException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        requireAllNonNull(filePath, oldIc, newIc);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Path oldMedicalNotesPath \u003d getMedicalNotesPath(filePath, oldIc);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Path newMedicalNotesPath \u003d getMedicalNotesPath(filePath, newIc);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FileUtil.renameIfExists(oldMedicalNotesPath, newMedicalNotesPath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void deleteAllMedicalNoteList() throws IOException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        deleteAllMedicalNoteList(filePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void deleteAllMedicalNoteList(Path filePath) throws IOException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Path dirPath \u003d filePath.resolve(NAME_DIR);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Files.walk(dirPath)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .filter(Files::isRegularFile)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .map(Path::toFile)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .forEach(File::delete);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private Path getMedicalNotesPath(Path filePath, Ic ic) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return filePath.resolve(NAME_DIR).resolve(ic.toString() + NAME_EXTENSION);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 138
    }
  },
  {
    "path": "src/main/java/seedu/medibook/storage/JsonSerializableMediBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.MediBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ReadOnlyMediBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * An Immutable MediBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "@JsonRootName(value \u003d \"medibook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "class JsonSerializableMediBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PATIENT \u003d \"Patients list contains duplicate patient(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private final List\u003cJsonAdaptedPatient\u003e patients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Constructs a {@code JsonSerializableMediBook} with the given patients."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public JsonSerializableMediBook(@JsonProperty(\"patients\") List\u003cJsonAdaptedPatient\u003e patients) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        this.patients.addAll(patients);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Converts a given {@code ReadOnlyMediBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableMediBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public JsonSerializableMediBook(ReadOnlyMediBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        patients.addAll(source.getPatientList().stream().map(JsonAdaptedPatient::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Converts this medi book into the model\u0027s {@code MediBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public MediBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        MediBook mediBook \u003d new MediBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        for (JsonAdaptedPatient jsonAdaptedPatient : patients) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            Patient patient \u003d jsonAdaptedPatient.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            if (mediBook.hasPatient(patient)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            mediBook.addPatient(patient);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return mediBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 26,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/medibook/storage/JsonSerializableMedicalNoteList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNote;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNoteList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.medicalnote.ReadOnlyMedicalNoteList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": " * An Immutable MedicalNoteList that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "@JsonRootName(value \u003d \"medical notes\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "class JsonSerializableMedicalNoteList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @JsonProperty(\"medical notes\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private final List\u003cJsonAdaptedMedicalNote\u003e medicalNotes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Constructs a {@code JsonSerializableMedicalNoteList} with the given medical notes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public JsonSerializableMedicalNoteList(@JsonProperty(\"medical notes\") List\u003cJsonAdaptedMedicalNote\u003e medicalNotes) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.medicalNotes.addAll(medicalNotes);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Converts a given {@code ReadOnlyMediBook} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableMediBook}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public JsonSerializableMedicalNoteList(ReadOnlyMedicalNoteList source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        medicalNotes.addAll(source.getMedicalNoteList().stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .map(JsonAdaptedMedicalNote::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Converts this medi book into the model\u0027s {@code MediBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public MedicalNoteList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        MedicalNoteList medicalNoteList \u003d new MedicalNoteList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        for (JsonAdaptedMedicalNote jsonAdaptedMedicalNote : medicalNotes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            MedicalNote medicalNote \u003d jsonAdaptedMedicalNote.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            medicalNoteList.add(medicalNote);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return medicalNoteList;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 57
    }
  },
  {
    "path": "src/main/java/seedu/medibook/storage/JsonSerializableUserAccountsList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.Account;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.UserAccountsList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "@JsonRootName(value \u003d \"accounts\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "class JsonSerializableUserAccountsList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @JsonProperty(\"accounts\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private final List\u003cJsonAdaptedAccount\u003e accounts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public JsonSerializableUserAccountsList(@JsonProperty(\"accounts\") List\u003cJsonAdaptedAccount\u003e accounts) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        this.accounts.addAll(accounts);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public JsonSerializableUserAccountsList(UserAccountsList source) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        accounts.addAll(source.getAccountsList().stream().map(JsonAdaptedAccount::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public UserAccountsList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        UserAccountsList userAccountsList \u003d new UserAccountsList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        for (JsonAdaptedAccount jsonAdaptedAccount : accounts) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            Account account \u003d jsonAdaptedAccount.toModelType();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            userAccountsList.addAccount(account);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return userAccountsList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PrestonTYR": 38
    }
  },
  {
    "path": "src/main/java/seedu/medibook/storage/JsonUserAccountsListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalLoginException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.Account;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.AdminAccount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.UserAccountsList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.commonfields.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.doctor.Doctor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.doctor.Mcr;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "public class JsonUserAccountsListStorage implements UserAccountsListStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private static final String ADMIN_INPUT \u003d \"admin\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private static final String INVALID_LOGIN \u003d \"Invalid username/password\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private static final String EXISTING_USERNAME \u003d \"Username already exists\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private static final String EXISTING_MCR \u003d \"This MCR already has an account\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private final Path filepath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public JsonUserAccountsListStorage(Path filepath) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public Path getUserAccountFilepath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return this.filepath;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public Optional\u003cAccount\u003e login(String username, String password) throws DataConversionException,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            IllegalLoginException, IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (username.equals(ADMIN_INPUT) \u0026\u0026 password.equals(ADMIN_INPUT)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return Optional.of(new AdminAccount());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Optional\u003cJsonSerializableUserAccountsList\u003e jsonUserAccountList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                filepath, JsonSerializableUserAccountsList.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        UserAccountsList accountsList;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (jsonUserAccountList.isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            accountsList \u003d jsonUserAccountList.get().toModelType();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            Optional\u003cAccount\u003e result \u003d accountsList.check(username, password);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            if (result.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                return result;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                throw new IllegalLoginException(INVALID_LOGIN);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            throw new IllegalLoginException(INVALID_LOGIN);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void createAccount(String username, String password, String doctorName, String doctorMcr) throws"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            DataConversionException, IOException, IllegalValueException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        requireNonNull(doctorName);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        requireNonNull(doctorMcr);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (username.length() \u003c 5) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            throw new IllegalValueException(Account.MESSAGE_USERNAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (password.length() \u003c 5) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            throw new IllegalValueException(Account.MESSAGE_PASSWORD_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (!Name.isValidName(doctorName)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (!Mcr.isValidMcr(doctorMcr)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            throw new IllegalValueException(Mcr.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Account newAccount \u003d new Account(username, password, new Doctor(new Name(doctorName), new Mcr(doctorMcr)));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (newAccount.getUsername().equals(ADMIN_INPUT)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            throw new IllegalValueException(EXISTING_USERNAME);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (FileUtil.isFileExists(filepath)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            JsonSerializableUserAccountsList jsonUserAccountList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    filepath, JsonSerializableUserAccountsList.class).get();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            UserAccountsList accountsList \u003d jsonUserAccountList.toModelType();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            if (accountsList.usernameExists(newAccount)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                throw new IllegalValueException(EXISTING_USERNAME);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            if (accountsList.mcrExists(newAccount)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                throw new IllegalValueException(EXISTING_MCR);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            accountsList.addAccount(newAccount);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            jsonUserAccountList \u003d new JsonSerializableUserAccountsList(accountsList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            JsonUtil.saveJsonFile(jsonUserAccountList, filepath);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            FileUtil.createFile(filepath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            UserAccountsList newAccountsList \u003d new UserAccountsList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            newAccountsList.addAccount(newAccount);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            JsonSerializableUserAccountsList newJsonUserAccountList \u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    new JsonSerializableUserAccountsList(newAccountsList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            JsonUtil.saveJsonFile(newJsonUserAccountList, filepath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PrestonTYR": 115
    }
  },
  {
    "path": "src/main/java/seedu/medibook/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/medibook/storage/MediBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.MediBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ReadOnlyMediBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Represents a storage for {@link MediBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public interface MediBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    Path getMediBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Returns MediBook data as a {@link ReadOnlyMediBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    Optional\u003cReadOnlyMediBook\u003e readMediBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * @see #getMediBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    Optional\u003cReadOnlyMediBook\u003e readMediBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Saves the given {@link ReadOnlyMediBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * @param mediBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    void saveMediBook(ReadOnlyMediBook mediBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * @see #saveMediBook(ReadOnlyMediBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    void saveMediBook(ReadOnlyMediBook mediBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 46
    }
  },
  {
    "path": "src/main/java/seedu/medibook/storage/MedicalNoteListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNoteList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.medicalnote.ReadOnlyMedicalNoteList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.patient.Ic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": " * Represents a storage for {@link MedicalNoteList}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public interface MedicalNoteListStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    Path getMedicalNotesDirPath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Returns MedicalNoteList data as a {@link ReadOnlyMedicalNoteList}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param ic cannot be null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    Optional\u003cReadOnlyMedicalNoteList\u003e readMedicalNoteList(Ic ic) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @see #readMedicalNoteList(Ic ic)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    Optional\u003cReadOnlyMedicalNoteList\u003e readMedicalNoteList(Path filePath, Ic ic)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Saves the given {@link ReadOnlyMedicalNoteList} to the storage."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param ic cannot be null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param medicalNoteList cannot be null."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    void saveMedicalNoteList(ReadOnlyMedicalNoteList medicalNoteList, Ic ic) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @see #saveMedicalNoteList(ReadOnlyMedicalNoteList, Ic ic)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    void saveMedicalNoteList(ReadOnlyMedicalNoteList medicalNoteList, Path filePath, Ic ic) throws IOException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Deletes the data file containing the medical notes corresponding to the {@code ic}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param ic cannot be null."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @throws IOException if there was any problem deleting the file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    void deleteMedicalNoteList(Ic ic) throws IOException;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @see #deleteMedicalNoteList(Ic ic)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    void deleteMedicalNoteList(Path filePath, Ic ic) throws IOException;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Renames the data file containing the medical notes from the old {@code ic} to the new {@code ic}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param oldIc cannot be null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param newIc cannot be null."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @throws IOException if there was any problem renaming the file."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    void renameMedicalNoteList(Ic oldIc, Ic newIc) throws IOException;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @see #renameMedicalNoteList(Ic ic, Ic ic)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    void renameMedicalNoteList(Path filePath, Ic oldIc, Ic newIc) throws IOException;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Deletes all medical notes data file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    void deleteAllMedicalNoteList() throws IOException;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @see #deleteAllMedicalNoteList()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    void deleteAllMedicalNoteList(Path filePath) throws IOException;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 85
    }
  },
  {
    "path": "src/main/java/seedu/medibook/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalLoginException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.Account;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ReadOnlyMediBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "public interface Storage extends MediBookStorage, MedicalNoteListStorage, UserPrefsStorage, UserAccountsListStorage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    Path getMediBookFilePath();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    Optional\u003cReadOnlyMediBook\u003e readMediBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    void saveMediBook(ReadOnlyMediBook mediBook) throws IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    Optional\u003cAccount\u003e login(String username, String password) throws DataConversionException, IllegalLoginException,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            IllegalValueException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 8,
      "PrestonTYR": 8,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/medibook/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalLoginException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.Account;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ReadOnlyMediBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.medicalnote.ReadOnlyMedicalNoteList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.patient.Ic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Manages storage of MediBook data in local storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private MediBookStorage mediBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private MedicalNoteListStorage medicalNoteListStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private UserAccountsListStorage userAccountsListStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code MediBookStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public StorageManager(MediBookStorage mediBookStorage, UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                          MedicalNoteListStorage medicalNoteListStorage,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                          UserAccountsListStorage userAccountsListStorage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        this.mediBookStorage \u003d mediBookStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.medicalNoteListStorage \u003d medicalNoteListStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        this.userAccountsListStorage \u003d userAccountsListStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MediBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public Path getMediBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return mediBookStorage.getMediBookFilePath();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public Optional\u003cReadOnlyMediBook\u003e readMediBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return readMediBook(mediBookStorage.getMediBookFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public Optional\u003cReadOnlyMediBook\u003e readMediBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return mediBookStorage.readMediBook(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void saveMediBook(ReadOnlyMediBook mediBook) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        saveMediBook(mediBook, mediBookStorage.getMediBookFilePath());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void saveMediBook(ReadOnlyMediBook mediBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        mediBookStorage.saveMediBook(mediBook, filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MedicalNoteList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public Path getMedicalNotesDirPath() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return medicalNoteListStorage.getMedicalNotesDirPath();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public Optional\u003cReadOnlyMedicalNoteList\u003e readMedicalNoteList(Ic ic) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return readMedicalNoteList(medicalNoteListStorage.getMedicalNotesDirPath(), ic);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public Optional\u003cReadOnlyMedicalNoteList\u003e readMedicalNoteList(Path filePath, Ic ic)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return medicalNoteListStorage.readMedicalNoteList(filePath, ic);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                    \"Medical notes data file not in the correct format. An empty medical notes list will be used.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void saveMedicalNoteList(ReadOnlyMedicalNoteList medicalNoteList, Ic ic) throws IOException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        saveMedicalNoteList(medicalNoteList, medicalNoteListStorage.getMedicalNotesDirPath(), ic);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void saveMedicalNoteList(ReadOnlyMedicalNoteList medicalNoteList, Path filePath, Ic ic) throws IOException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        logger.fine(\"Attempting to save to data file: \" + filePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        medicalNoteListStorage.saveMedicalNoteList(medicalNoteList, filePath, ic);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void deleteMedicalNoteList(Ic ic) throws IOException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        deleteMedicalNoteList(medicalNoteListStorage.getMedicalNotesDirPath(), ic);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void deleteMedicalNoteList(Path filePath, Ic ic) throws IOException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        logger.fine(\"Attempting to delete data file: \" + filePath);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        medicalNoteListStorage.deleteMedicalNoteList(filePath, ic);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void renameMedicalNoteList(Ic oldIc, Ic newIc) throws IOException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        renameMedicalNoteList(medicalNoteListStorage.getMedicalNotesDirPath(), oldIc, newIc);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void renameMedicalNoteList(Path filePath, Ic oldIc, Ic newIc) throws IOException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        logger.fine(\"Attempting to rename data file: \" + filePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        medicalNoteListStorage.renameMedicalNoteList(filePath, oldIc, newIc);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void deleteAllMedicalNoteList() throws IOException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        deleteAllMedicalNoteList(medicalNoteListStorage.getMedicalNotesDirPath());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void deleteAllMedicalNoteList(Path filePath) throws IOException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        logger.fine(\"Attempting to clear all data files: \" + filePath);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        medicalNoteListStorage.deleteAllMedicalNoteList(filePath);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserAccount methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public Path getUserAccountFilepath() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return userAccountsListStorage.getUserAccountFilepath();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public Optional\u003cAccount\u003e login(String username, String password) throws DataConversionException,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            IllegalLoginException, IllegalValueException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return userAccountsListStorage.login(username, password);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void createAccount(String username, String password, String doctorName, String doctorMcr) throws"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            DataConversionException, IOException, IllegalValueException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        userAccountsListStorage.createAccount(username, password, doctorName, doctorMcr);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 73,
      "divakarmal": 21,
      "PrestonTYR": 25,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/medibook/storage/UserAccountsListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalLoginException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.Account;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "public interface UserAccountsListStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    Path getUserAccountFilepath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    Optional\u003cAccount\u003e login(String username, String password) throws DataConversionException, IllegalLoginException,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            IllegalValueException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    void createAccount(String username, String password, String doctorName, String doctorMcr) throws"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            DataConversionException, IOException, IllegalValueException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PrestonTYR": 22
    }
  },
  {
    "path": "src/main/java/seedu/medibook/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Represents a storage for {@link seedu.medibook.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Saves the given {@link seedu.medibook.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/medibook/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "         * @see seedu.medibook.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 5,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/medibook/ui/CreateAccountWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "package seedu.medibook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import javafx.scene.control.PasswordField;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalLoginException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.logic.Logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "public class CreateAccountWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private static final String FXML \u003d \"CreateAccountWindow.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private LoginWindow loginWindow;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private ImageView logo;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private Label username;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private TextField usernameField;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private Label password;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private PasswordField passwordField;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private Label doctorName;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private TextField doctorNameField;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private Label doctorMcr;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private TextField doctorMcrField;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private Button createButton;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private Button backButton;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private Image logoImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/logo.png\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Creates a {@code LoginWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public CreateAccountWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        logo.setImage(logoImage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        setButtonOnAction();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "         *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "         *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "         */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        });"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private void setButtonOnAction() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        createButton.setOnAction(event -\u003e createAccount());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        backButton.setOnAction(event -\u003e back());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private void createAccount() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        String username \u003d this.usernameField.getText();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        String password \u003d this.passwordField.getText();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        String doctorName \u003d this.doctorNameField.getText();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        String doctorMcr \u003d this.doctorMcrField.getText();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            logic.createAccount(username, password, doctorName, doctorMcr);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            logic.processLoginInfo(username, password);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } catch (IOException | DataConversionException | IllegalValueException | IllegalLoginException e) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private void back() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        loginWindow \u003d new LoginWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 1,
      "PrestonTYR": 212
    }
  },
  {
    "path": "src/main/java/seedu/medibook/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String USERGUIDE_URL \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            \"https://ay2021s1-cs2103t-f13-3.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 2,
      "divakarmal": 2,
      "-": 99
    }
  },
  {
    "path": "src/main/java/seedu/medibook/ui/LoginWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "package seedu.medibook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import javafx.scene.control.PasswordField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalLoginException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.logic.Logic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "public class LoginWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private static final String FXML \u003d \"LoginWindow.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private CreateAccountWindow createAccountWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private ImageView logo;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private Label username;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private TextField usernameField;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private Label password;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private PasswordField passwordField;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private Button loginButton;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private Button createButton;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private Image logoImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/logo.png\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Creates a {@code LoginWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public LoginWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        logo.setImage(logoImage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        setButtonOnAction();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "         *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "         *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "         */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        });"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private void setButtonOnAction() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        loginButton.setOnAction(event -\u003e processLoginInfo());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        createButton.setOnAction(event -\u003e createAccountStage());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private void processLoginInfo() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        String username \u003d this.usernameField.getText();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        String password \u003d this.passwordField.getText();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            logic.processLoginInfo(username, password);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } catch (IllegalLoginException | DataConversionException | IllegalValueException e) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            logger.info(\"Invalid login\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private void createAccountStage() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        createAccountWindow \u003d new CreateAccountWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 1,
      "PrestonTYR": 196
    }
  },
  {
    "path": "src/main/java/seedu/medibook/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.ui.patientprofile.PatientProfile;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private PatientListPanel patientListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private LoginWindow loginWindow;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private PatientProfile patientProfile;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private MenuItem logoutMenuItem;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private StackPane patientListPanelPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        setAccelerator(logoutMenuItem, KeyCombination.valueOf(\"F2\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        patientListPanel \u003d new PatientListPanel(logic.getFilteredPatientList());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        patientListPanelPlaceholder.getChildren().add(patientListPanel.getRoot());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getMediBookFilePath());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Returns to the login window."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void handleLogout() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        logic.logout();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        loginWindow \u003d new LoginWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private void handleProfile(Patient patient) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        patientProfile \u003d new PatientProfile(patient);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        patientListPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        patientListPanelPlaceholder.getChildren().add(patientProfile.getRoot());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private void handleList() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        patientListPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        patientListPanelPlaceholder.getChildren().add(patientListPanel.getRoot());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public PatientListPanel getPatientListPanel() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return patientListPanel;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * @see seedu.medibook.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            // Logger details, safe to ignore"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            if (commandResult.isShowProfile()) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                handleProfile(logic.getPatientToAccess().get());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            if (commandResult.isShowList()) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                handleList();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 2,
      "divakarmal": 15,
      "foojingyi": 1,
      "PrestonTYR": 38,
      "-": 182
    }
  },
  {
    "path": "src/main/java/seedu/medibook/ui/PatientListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import javafx.beans.property.ReadOnlyObjectWrapper;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Panel containing the list of patients."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public class PatientListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private static final String FXML \u003d \"PatientListPanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PatientListPanel.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private TableView\u003cPatient\u003e patientTableView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Creates a {@code PatientListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public PatientListPanel(ObservableList\u003cPatient\u003e patientList) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        List\u003cTableColumn\u003cPatient, String\u003e\u003e columns \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        TableColumn\u003cPatient, String\u003e columnIndex \u003d new TableColumn\u003c\u003e(\"#\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        columnIndex.setCellValueFactory(column-\u003e new ReadOnlyObjectWrapper\u003c\u003e("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                Integer.toString(patientTableView.getItems().indexOf(column.getValue()) + 1)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        columns.add(columnIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        TableColumn\u003cPatient, String\u003e columnIc \u003d new TableColumn\u003c\u003e(\"IC\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        columns.add(columnIc);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        TableColumn\u003cPatient, String\u003e columnName \u003d new TableColumn\u003c\u003e(\"Name\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        columns.add(columnName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        TableColumn\u003cPatient, String\u003e columnDob \u003d new TableColumn\u003c\u003e(\"DOB\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        columns.add(columnDob);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        TableColumn\u003cPatient, String\u003e columnPhone \u003d new TableColumn\u003c\u003e(\"Phone\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        columns.add(columnPhone);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        TableColumn\u003cPatient, String\u003e columnEmail \u003d new TableColumn\u003c\u003e(\"Email\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        columns.add(columnEmail);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        TableColumn\u003cPatient, String\u003e columnAddress \u003d new TableColumn\u003c\u003e(\"Address\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        columns.add(columnAddress);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        TableColumn\u003cPatient, String\u003e columnHeight \u003d new TableColumn\u003c\u003e(\"Height\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        columns.add(columnHeight);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        TableColumn\u003cPatient, String\u003e columnWeight \u003d new TableColumn\u003c\u003e(\"Weight\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        columns.add(columnWeight);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        TableColumn\u003cPatient, String\u003e columnBmi \u003d new TableColumn\u003c\u003e(\"BMI\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        columns.add(columnBmi);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        TableColumn\u003cPatient, String\u003e columnBloodType \u003d new TableColumn\u003c\u003e(\"Blood Type\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        columns.add(columnBloodType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        columns.forEach(col -\u003e {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            String text \u003d col.getText();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            if (!text.equals(\"#\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                String[] words \u003d text.split(\" \");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                IntStream.range(0, words.length).forEach(i -\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                    words[i] \u003d words[i].substring(0, 1).toUpperCase() + words[i].substring(1).toLowerCase();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                });"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                String property \u003d \"string\" + String.join(\"\", words);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                col.setCellValueFactory(new PropertyValueFactory\u003c\u003e(property));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            col.setResizable(false);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            col.setSortable(false);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            patientTableView.getColumns().add(col);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        });"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        columnIndex.prefWidthProperty().bind(patientTableView.widthProperty().multiply(0.04));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        columnIc.prefWidthProperty().bind(patientTableView.widthProperty().multiply(0.075));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        columnName.prefWidthProperty().bind(patientTableView.widthProperty().multiply(0.125));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        columnDob.prefWidthProperty().bind(patientTableView.widthProperty().multiply(0.07));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        columnPhone.prefWidthProperty().bind(patientTableView.widthProperty().multiply(0.07));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        columnEmail.prefWidthProperty().bind(patientTableView.widthProperty().multiply(0.15));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        columnAddress.prefWidthProperty().bind(patientTableView.widthProperty().multiply(0.22));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        columnHeight.prefWidthProperty().bind(patientTableView.widthProperty().multiply(0.0625));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        columnWeight.prefWidthProperty().bind(patientTableView.widthProperty().multiply(0.0625));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        columnBmi.prefWidthProperty().bind(patientTableView.widthProperty().multiply(0.04));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        columnBloodType.prefWidthProperty().bind(patientTableView.widthProperty().multiply(0.075));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        patientTableView.getItems().addAll(patientList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        patientList.addListener((ListChangeListener\u003cPatient\u003e) c -\u003e patientTableView.setItems(patientList));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 101
    }
  },
  {
    "path": "src/main/java/seedu/medibook/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/medibook/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StatusBarFooter} with the given {@code Path}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/medibook/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/medibook/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private LoginWindow loginWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            loginWindow \u003d new LoginWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            loginWindow.show();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 5,
      "PrestonTYR": 3,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/medibook/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/medibook/ui/patientprofile/MedicalDetailsCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package seedu.medibook.ui.patientprofile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicaldetail.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.ui.UiPart;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * An UI component that displays the medical details of a {@code Patient}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public class MedicalDetailsCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private static final String FXML \u003d \"ProfileDetailsCard.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public final Patient patient;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private Label cardHeader;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private ListView\u003cPair\u003cString, Set\u003cTag\u003e\u003e\u003e detailsListView;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Creates a {@code MedicalDetailsCard} for the given {@code Patient}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public MedicalDetailsCard(Patient patient) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        cardHeader.setText(\"Medical Details: \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        ObservableList\u003cPair\u003cString, Set\u003cTag\u003e\u003e\u003e fields \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        Set\u003cTag\u003e allergies \u003d new HashSet\u003c\u003e(patient.getAllergies());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        Set\u003cTag\u003e conditions \u003d new HashSet\u003c\u003e(patient.getConditions());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        Set\u003cTag\u003e treatments \u003d new HashSet\u003c\u003e(patient.getTreatments());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        fields.add(new Pair\u003cString, Set\u003cTag\u003e\u003e(\"Allergies: \", allergies));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        fields.add(new Pair\u003cString, Set\u003cTag\u003e\u003e(\"Conditions: \", conditions));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        fields.add(new Pair\u003cString, Set\u003cTag\u003e\u003e(\"Treatments: \", treatments));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        detailsListView.setItems(fields);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        detailsListView.setCellFactory(listView -\u003e new MedicalDetailsListViewCell());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (!(other instanceof MedicalDetailsCard)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        MedicalDetailsCard card \u003d (MedicalDetailsCard) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return patient.equals(card.patient);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a medical detail field using a {@code MedicalDetailsRow}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    class MedicalDetailsListViewCell extends ListCell\u003cPair\u003cString, Set\u003cTag\u003e\u003e\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        protected void updateItem(Pair\u003cString, Set\u003cTag\u003e\u003e categoryTagsPair, boolean empty) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            super.updateItem(categoryTagsPair, empty);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            if (empty || categoryTagsPair \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                setGraphic(new MedicalDetailsRow(categoryTagsPair.getKey(), categoryTagsPair.getValue()).getRoot());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 86
    }
  },
  {
    "path": "src/main/java/seedu/medibook/ui/patientprofile/MedicalDetailsRow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package seedu.medibook.ui.patientprofile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicaldetail.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * An UI component that displays one of the medical details of a {@code Patient} as a row of a list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public class MedicalDetailsRow extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private static final String FXML \u003d \"MedicalDetailsRow.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private HBox row;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private Label fieldName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Creates a {@code MedicalDetailsRow} for a medical detail of a {@code Patient} given the category and tags."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public MedicalDetailsRow(String fieldName, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.fieldName.setText(fieldName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        tags.stream().sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .forEach(tag -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                this.tags.getChildren().add(new Label(tag.tagName));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            });"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 39
    }
  },
  {
    "path": "src/main/java/seedu/medibook/ui/patientprofile/MedicalNoteCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package seedu.medibook.ui.patientprofile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNote;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * An UI component that displays a {@code MedicalNote}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public class MedicalNoteCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private static final String FXML \u003d \"MedicalNoteCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public final MedicalNote medicalNote;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private Label noteIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private Label doctorName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private TextArea content;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Creates a {@code MedicalNoteCard} with the given {@code MedicalNote} to be displayed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public MedicalNoteCard(MedicalNote medicalNote, int displayedIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.medicalNote \u003d medicalNote;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        noteIndex.setText(\"Note #\" + displayedIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        date.setText(medicalNote.date.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        doctorName.setText(medicalNote.doctor.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        content.setText(medicalNote.getContentString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        content.prefWidthProperty().bind(this.getRoot().prefWidthProperty());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        content.setWrapText(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (!(other instanceof MedicalNoteCard)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        MedicalNoteCard card \u003d (MedicalNoteCard) other;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return medicalNote.equals(card.medicalNote);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 2,
      "foojingyi": 59
    }
  },
  {
    "path": "src/main/java/seedu/medibook/ui/patientprofile/MedicalNotesPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package seedu.medibook.ui.patientprofile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNote;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.ui.UiPart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * Panel containing the list of {@code MedicalNote} of a {@code Patient}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public class MedicalNotesPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private static final String FXML \u003d \"MedicalNotesPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private Label panelHeader;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private ListView\u003cMedicalNote\u003e medicalNotesListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Creates a {@code MedicalNotesPanel} with the given {@code List} of {@code MedicalNote} objects."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public MedicalNotesPanel(ObservableList\u003cMedicalNote\u003e observableMedicalNotes) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        panelHeader.setText(\"Medical Notes:\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        medicalNotesListView.setItems(observableMedicalNotes);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        medicalNotesListView.setCellFactory(listView -\u003e new MedicalNotesPanel.MedicalNotesListViewCell());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code MedicalNote} using a {@code MedicalNoteCard}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    class MedicalNotesListViewCell extends ListCell\u003cMedicalNote\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        protected void updateItem(MedicalNote medicalNote, boolean empty) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            super.updateItem(medicalNote, empty);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            if (empty || medicalNote \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                setGraphic(new MedicalNoteCard(medicalNote, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 1,
      "foojingyi": 51
    }
  },
  {
    "path": "src/main/java/seedu/medibook/ui/patientprofile/PatientChartCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.ui.patientprofile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import javafx.scene.chart.LineChart;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.commonfields.Date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Height;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Weight;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.ui.UiPart;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * An UI component that displays charts representing a {@code Patient}\u0027s height, weight and BMI records."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public class PatientChartCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private static final String FXML \u003d \"PatientChartCard.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public final Patient patient;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private Label cardHeader;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private LineChart\u003cString, Number\u003e weightChart;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private LineChart\u003cString, Number\u003e heightChart;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private LineChart\u003cString, Number\u003e bmiChart;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Creates a {@code PatientChartCard} for the given {@code Patient}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public PatientChartCard(Patient patient) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        cardHeader.setText(\"Charts: \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        weightChart.setTitle(\"Weight Chart\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        heightChart.setTitle(\"Height Chart\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        bmiChart.setTitle(\"BMI Chart\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yy\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        XYChart.Series\u003cString, Number\u003e weightSeries \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        weightSeries.setName(\"weight records\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        XYChart.Series\u003cString, Number\u003e heightSeries \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        heightSeries.setName(\"height records\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        XYChart.Series\u003cString, Number\u003e bmiSeries \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        bmiSeries.setName(\"BMI records\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Map\u003cString, Integer\u003e stringHeightMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Map\u003cString, Double\u003e stringWeightMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        HashMap\u003cDate, Weight\u003e weightRecord \u003d patient.getRecord().getWeightRecord();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        List\u003cMap.Entry\u003cDate, Weight\u003e\u003e weightRecords \u003d new ArrayList\u003c\u003e(weightRecord.entrySet());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        HashMap\u003cDate, Height\u003e heightRecord \u003d patient.getRecord().getHeightRecord();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        List\u003cMap.Entry\u003cDate, Height\u003e\u003e heightRecords \u003d new ArrayList\u003c\u003e(heightRecord.entrySet());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        //weight chart"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        CategoryAxis xAxisWeight \u003d (CategoryAxis) weightChart.getXAxis();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        NumberAxis yAxisWeight \u003d (NumberAxis) weightChart.getYAxis();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        xAxisWeight.setLabel(\"Date\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        yAxisWeight.setForceZeroInRange(false);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        yAxisWeight.setLabel(\"Weight(kg)\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Weight[] weights \u003d weightRecord.values().toArray(new Weight[0]);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        List\u003cDate\u003e dateListWeight \u003d new ArrayList\u003cDate\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        for (int k \u003d 0; k \u003c weights.length; k++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            dateListWeight.add(weightRecords.get(k).getKey());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Collections.sort(dateListWeight);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        if (weightRecords.size() !\u003d 0) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            LocalDate startWeightDate \u003d dateListWeight.get(0).getLocalDate();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            LocalDate endWeightDate \u003d dateListWeight.get(dateListWeight.size() - 1).getLocalDate();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            ObservableList\u003cString\u003e allDatesWeight \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            while (!startWeightDate.isAfter(endWeightDate)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                allDatesWeight.add(formatter.format(startWeightDate));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                startWeightDate \u003d startWeightDate.plusDays(1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            xAxisWeight.setCategories(allDatesWeight);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            for (int i \u003d 0; i \u003c weights.length; i++) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                String date \u003d formatter.format(dateListWeight.get(i).getLocalDate());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                Double plot \u003d weightRecord.get(dateListWeight.get(i)).getNumericValue();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                stringWeightMap.put(date, plot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                weightSeries.getData().add(new XYChart.Data\u003c\u003e(date, plot));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            weightChart.getData().add(weightSeries);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        //height chart"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        CategoryAxis xAxisHeight \u003d (CategoryAxis) heightChart.getXAxis();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        NumberAxis yAxisHeight \u003d (NumberAxis) heightChart.getYAxis();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        xAxisHeight.setLabel(\"Date\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        yAxisHeight.setForceZeroInRange(false);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        yAxisHeight.setLabel(\"Height(cm)\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Height[] heights \u003d heightRecord.values().toArray(new Height[0]);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        List\u003cDate\u003e dateListHeight \u003d new ArrayList\u003cDate\u003e();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        for (int k \u003d 0; k \u003c heights.length; k++) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            dateListHeight.add(heightRecords.get(k).getKey());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Collections.sort(dateListHeight);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        if (heightRecords.size() !\u003d 0) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            LocalDate startHeightDate \u003d dateListHeight.get(0).getLocalDate();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            LocalDate endHeightDate \u003d dateListHeight.get(dateListHeight.size() - 1).getLocalDate();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            ObservableList\u003cString\u003e allDatesHeight \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            while (!startHeightDate.isAfter(endHeightDate)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                allDatesHeight.add(formatter.format(startHeightDate));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                startHeightDate \u003d startHeightDate.plusDays(1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            xAxisHeight.setCategories(allDatesHeight);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            for (int i \u003d 0; i \u003c heights.length; i++) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                String date \u003d formatter.format(dateListHeight.get(i).getLocalDate());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                int plot \u003d heightRecord.get(dateListHeight.get(i)).getNumericValue();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                stringHeightMap.put(date, plot);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                heightSeries.getData().add(new XYChart.Data\u003c\u003e(date, plot));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            heightChart.getData().add(heightSeries);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        //bmi chart"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        CategoryAxis xAxisBmi \u003d (CategoryAxis) bmiChart.getXAxis();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        NumberAxis yAxisBmi \u003d (NumberAxis) bmiChart.getYAxis();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        xAxisBmi.setLabel(\"Date\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        yAxisBmi.setForceZeroInRange(false);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        yAxisBmi.setLabel(\"BMI\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        if (weightRecords.size() !\u003d 0 \u0026\u0026 heightRecords.size() !\u003d 0) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            LocalDate startBmiDate;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            LocalDate endBmiDate;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            if (dateListHeight.get(0).getLocalDate().isBefore(dateListWeight.get(0).getLocalDate())) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                startBmiDate \u003d dateListHeight.get(0).getLocalDate();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                startBmiDate \u003d dateListWeight.get(0).getLocalDate();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            if (dateListHeight.get(dateListHeight.size() - 1).getLocalDate()"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                    .isBefore(dateListWeight.get(dateListWeight.size() - 1).getLocalDate())) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                endBmiDate \u003d dateListWeight.get(dateListWeight.size() - 1).getLocalDate();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                endBmiDate \u003d dateListHeight.get(dateListHeight.size() - 1).getLocalDate();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            ObservableList\u003cString\u003e allDatesBmi \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            while (!startBmiDate.isAfter(endBmiDate)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                allDatesBmi.add(formatter.format(startBmiDate));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                startBmiDate \u003d startBmiDate.plusDays(1);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            xAxisBmi.setCategories(allDatesBmi);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            for (int i \u003d 0; i \u003c allDatesBmi.size(); i++) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                String date \u003d allDatesBmi.get(i);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                if (stringHeightMap.get(date) !\u003d null \u0026\u0026 stringWeightMap.get(date) !\u003d null) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                    double height \u003d (double) stringHeightMap.get(date) / 100;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                    double weight \u003d stringWeightMap.get(date);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                    double numericBmi \u003d weight / Math.pow(height, 2);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                    double bmi \u003d ((double) Math.round(numericBmi * 10)) / 10;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                    bmiSeries.getData().add(new XYChart.Data\u003c\u003e(date, bmi));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            bmiChart.getData().add(bmiSeries);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        if (!(other instanceof MedicalDetailsCard)) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        PatientChartCard card \u003d (PatientChartCard) other;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return patient.equals(card.patient);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 205,
      "foojingyi": 4
    }
  },
  {
    "path": "src/main/java/seedu/medibook/ui/patientprofile/PatientProfile.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package seedu.medibook.ui.patientprofile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.ui.UiPart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * An UI component representing a patient\u0027s profile that displays all the information of a {@code Patient}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public class PatientProfile extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private static final String FXML \u003d \"PatientProfile.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public final Patient patient;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private AnchorPane personalDetailsCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private AnchorPane medicalDetailsCard;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private AnchorPane medicalNotesPanel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private AnchorPane patientChartCard;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Creates a {@code PatientProfile} for the given {@code Patient}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public PatientProfile(Patient patient) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        PersonalDetailsCard personalDetailsCard \u003d new PersonalDetailsCard(patient);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.personalDetailsCard.getChildren().add(personalDetailsCard.getRoot());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        personalDetailsCard.getRoot().prefHeightProperty().bind(this.personalDetailsCard.heightProperty());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        personalDetailsCard.getRoot().prefWidthProperty().bind(this.personalDetailsCard.widthProperty());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        MedicalDetailsCard medicalDetailsCard \u003d new MedicalDetailsCard(patient);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.medicalDetailsCard.getChildren().add(medicalDetailsCard.getRoot());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        medicalDetailsCard.getRoot().prefHeightProperty().bind(this.medicalDetailsCard.heightProperty());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        medicalDetailsCard.getRoot().prefWidthProperty().bind(this.medicalDetailsCard.widthProperty());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        MedicalNotesPanel medicalNotesPanel \u003d new MedicalNotesPanel(patient.getObservableMedicalNoteList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.medicalNotesPanel.getChildren().add(medicalNotesPanel.getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        medicalNotesPanel.getRoot().prefHeightProperty().bind(this.medicalNotesPanel.heightProperty());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        medicalNotesPanel.getRoot().prefWidthProperty().bind(this.medicalNotesPanel.widthProperty());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        PatientChartCard patientChartCard \u003d new PatientChartCard(patient);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        this.patientChartCard.getChildren().add(patientChartCard.getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        patientChartCard.getRoot().prefHeightProperty().bind(this.patientChartCard.heightProperty());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        patientChartCard.getRoot().prefWidthProperty().bind(this.patientChartCard.widthProperty());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (!(other instanceof PatientProfile)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        PatientProfile profile \u003d (PatientProfile) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return patient.equals(profile.patient);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 1,
      "divakarmal": 5,
      "foojingyi": 63,
      "PrestonTYR": 2
    }
  },
  {
    "path": "src/main/java/seedu/medibook/ui/patientprofile/PersonalDetailsCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package seedu.medibook.ui.patientprofile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.model.patient.Patient.OPTIONAL_FIELD_EMPTY_MESSAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.patient.Height;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.patient.Weight;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.ui.UiPart;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * An UI component that displays the personal details of a {@code Patient}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public class PersonalDetailsCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private static final String FXML \u003d \"ProfileDetailsCard.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public final Patient patient;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private Label cardHeader;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private ListView\u003cPair\u003cString, String\u003e\u003e detailsListView;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Creates a {@code PersonalDetailsCard} for the given {@code Patient}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public PersonalDetailsCard(Patient patient) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        cardHeader.setText(\"Personal Details: \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        fillListView();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private void fillListView() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        ObservableList\u003cPair\u003cString, String\u003e\u003e fields \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        fields.add(new Pair\u003cString, String\u003e(\"Name: \", patient.getStringName()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        fields.add(new Pair\u003cString, String\u003e(\"IC: \", patient.getStringIc()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        fields.add(new Pair\u003cString, String\u003e(\"Date Of Birth: \", patient.getStringDob()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        fields.add(new Pair\u003cString, String\u003e(\"Phone Number: \", patient.getStringPhone()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (patient.getEmail().isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            fields.add(new Pair\u003cString, String\u003e(\"Email: \", patient.getStringEmail()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            fields.add(new Pair\u003cString, String\u003e(\"Email: \", OPTIONAL_FIELD_EMPTY_MESSAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (patient.getAddress().isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            fields.add(new Pair\u003cString, String\u003e(\"Address: \", patient.getStringAddress()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            fields.add(new Pair\u003cString, String\u003e(\"Address: \", OPTIONAL_FIELD_EMPTY_MESSAGE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // height"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (patient.getHeight().isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            fields.add(new Pair\u003cString, String\u003e(\"Height: \", patient.getStringHeight() + Height.HEIGHT_UNIT));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            fields.add(new Pair\u003cString, String\u003e(\"Height: \", OPTIONAL_FIELD_EMPTY_MESSAGE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // weight"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (patient.getWeight().isPresent()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            fields.add(new Pair\u003cString, String\u003e(\"Weight: \", patient.getStringWeight() + Weight.WEIGHT_UNIT));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            fields.add(new Pair\u003cString, String\u003e(\"Weight: \", OPTIONAL_FIELD_EMPTY_MESSAGE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // bmi"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (patient.getBmi().isPresent()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            fields.add(new Pair\u003cString, String\u003e(\"BMI: \", patient.getStringBmi()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            fields.add(new Pair\u003cString, String\u003e(\"BMI: \", OPTIONAL_FIELD_EMPTY_MESSAGE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // bloodType"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (patient.getBloodType().isPresent()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            fields.add(new Pair\u003cString, String\u003e(\"Blood Type: \", patient.getStringBloodType()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            fields.add(new Pair\u003cString, String\u003e(\"Blood Type: \", OPTIONAL_FIELD_EMPTY_MESSAGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        detailsListView.setItems(fields);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        detailsListView.setCellFactory(listView -\u003e new PersonalDetailsListViewCell());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (!(other instanceof PersonalDetailsCard)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        PersonalDetailsCard card \u003d (PersonalDetailsCard) other;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return patient.equals(card.patient);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a patient field using a {@code PersonalDetailsRow}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    class PersonalDetailsListViewCell extends ListCell\u003cPair\u003cString, String\u003e\u003e {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        protected void updateItem(Pair\u003cString, String\u003e fieldValuePair, boolean empty) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            super.updateItem(fieldValuePair, empty);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            if (empty || fieldValuePair \u003d\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                setGraphic(new PersonalDetailsRow(fieldValuePair.getKey(), fieldValuePair.getValue()).getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 130
    }
  },
  {
    "path": "src/main/java/seedu/medibook/ui/patientprofile/PersonalDetailsRow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package seedu.medibook.ui.patientprofile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.ui.UiPart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * An UI component that displays one of the personal details of a {@code Patient} as a row of a list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public class PersonalDetailsRow extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private static final String FXML \u003d \"PersonalDetailsRow.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private HBox row;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private Label fieldName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private Label value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Creates a {@code PersonalDetailsRow} for a field of a {@code Patient} with the given value of the field."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public PersonalDetailsRow(String fieldName, String value) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.fieldName.setText(fieldName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.value.setText(value);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 31
    }
  },
  {
    "path": "src/main/resources/view/CreateAccountWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "\u003c?import javafx.scene.control.PasswordField?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "\u003cfx:root minHeight\u003d\"700\" minWidth\u003d\"550\" onCloseRequest\u003d\"#handleExit\" title\u003d\"MediBook\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                \u003cVBox fx:id\u003d\"createPanel\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                        \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                        \u003cBorderPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                            \u003ccenter\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                                \u003cImageView fx:id\u003d\"logo\" fitHeight\u003d\"200.0\" fitWidth\u003d\"443.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                            \u003c/center\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                        \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                        \u003cLabel fx:id\u003d\"username\" styleClass\u003d\"label-header-small\" text\u003d\"Username\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                        \u003cTextField fx:id\u003d\"usernameField\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                        \u003cLabel fx:id\u003d\"password\" styleClass\u003d\"label-header-small\" text\u003d\"Password\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                        \u003cPasswordField fx:id\u003d\"passwordField\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                  \u003cLabel fx:id\u003d\"doctorName\" styleClass\u003d\"label-header-small\" text\u003d\"Name\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                  \u003cTextField fx:id\u003d\"doctorNameField\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                  \u003cLabel fx:id\u003d\"doctorMcr\" styleClass\u003d\"label-header-small\" text\u003d\"MCR\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                  \u003cTextField fx:id\u003d\"doctorMcrField\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                        \u003cBorderPane prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                            \u003cright\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                                \u003cButton fx:id\u003d\"createButton\" defaultButton\u003d\"true\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"50.0\" prefWidth\u003d\"121.0\" style\u003d\"-fx-border-radius: 5;\" styleClass\u003d\"cell_big_label\" text\u003d\"Create\" textFill\u003d\"WHITE\" BorderPane.alignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                            \u003c/right\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                     \u003cleft\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                         \u003cButton fx:id\u003d\"backButton\" defaultButton\u003d\"false\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"50.0\" prefWidth\u003d\"121.0\" style\u003d\"-fx-border-radius: 5;\" styleClass\u003d\"cell_big_label\" text\u003d\"Back\" textFill\u003d\"WHITE\" BorderPane.alignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                     \u003c/left\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                     \u003ctop\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                                \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\" BorderPane.alignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                     \u003c/top\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                        \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "PrestonTYR": 75
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ".label-header-small {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        -fx-font-size: 16pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        -fx-text-fill: white;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        -fx-opacity: 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        #1db954"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    -fx-background-color: #555555;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    -fx-background-color: derive(#1db954, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    -fx-border-color: transparent transparent transparent #1d1d1d;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ".split-pane:vertical .split-pane-divider {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    -fx-background-color: derive(#1db954, 20%);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    -fx-border-color: transparent transparent transparent #1d1d1d;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    -fx-border-color: #1db954;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    -fx-background-color: #1db954;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    -fx-background-color: derive(#1db954, 30%);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "#filterField, #patientListPanel, #patientWebpage {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    -fx-background-color: #1db954;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "foojingyi": 13,
      "PrestonTYR": 7,
      "-": 343
    }
  },
  {
    "path": "src/main/resources/view/LoginWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "\u003c?import javafx.scene.control.PasswordField?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "\u003cfx:root minHeight\u003d\"700\" minWidth\u003d\"550\" onCloseRequest\u003d\"#handleExit\" title\u003d\"MediBook\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        \u003cVBox fx:id\u003d\"loginPanel\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                  \u003cBorderPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                     \u003ccenter\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                        \u003cImageView fx:id\u003d\"logo\" fitHeight\u003d\"200.0\" fitWidth\u003d\"500.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                     \u003c/center\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                  \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                  \u003cLabel fx:id\u003d\"username\" styleClass\u003d\"label-header\" text\u003d\"Username\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                  \u003cTextField fx:id\u003d\"usernameField\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                  \u003cLabel fx:id\u003d\"password\" styleClass\u003d\"label-header\" text\u003d\"Password\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                  \u003cPasswordField fx:id\u003d\"passwordField\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                  \u003cBorderPane prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                     \u003cright\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                        \u003cButton fx:id\u003d\"loginButton\" defaultButton\u003d\"true\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"50.0\" prefWidth\u003d\"121.0\" style\u003d\"-fx-border-radius: 5;\" styleClass\u003d\"cell_big_label\" text\u003d\"Login\" textFill\u003d\"WHITE\" BorderPane.alignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                     \u003c/right\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                     \u003cleft\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                         \u003cButton fx:id\u003d\"createButton\" defaultButton\u003d\"false\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"50.0\" prefWidth\u003d\"121.0\" style\u003d\"-fx-border-radius: 5;\" styleClass\u003d\"cell_big_label\" text\u003d\"Create Account\" textAlignment\u003d\"CENTER\" textFill\u003d\"WHITE\" wrapText\u003d\"true\" BorderPane.alignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                     \u003c/left\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                     \u003ctop\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\" BorderPane.alignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                     \u003c/top\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                  \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 1,
      "PrestonTYR": 70
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "         title\u003d\"MediBook\" minWidth\u003d\"550\" minHeight\u003d\"700\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "               \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Logout\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                 \u003citems\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                   \u003cMenuItem fx:id\u003d\"logoutMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleLogout\" text\u003d\"Logout\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                 \u003c/items\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "               \u003c/Menu\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        \u003cVBox fx:id\u003d\"patientList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "          \u003cStackPane fx:id\u003d\"patientListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "PrestonTYR": 13,
      "-": 50
    }
  },
  {
    "path": "src/main/resources/view/MedicalDetailsRow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003cHBox id\u003d\"row\" fx:id\u003d\"row\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \u003cAnchorPane\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        \u003cLabel fx:id\u003d\"fieldName\" styleClass\u003d\"cell_small_label\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \u003cAnchorPane\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        \u003cFlowPane fx:id\u003d\"tags\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 15
    }
  },
  {
    "path": "src/main/resources/view/MedicalNoteCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            \u003cLabel fx:id\u003d\"noteIndex\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$noteIndex\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            \u003cLabel fx:id\u003d\"doctorName\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$doctorName\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            \u003cTextArea fx:id\u003d\"content\" editable\u003d\"false\" styleClass\u003d\"text-field\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 26
    }
  },
  {
    "path": "src/main/resources/view/MedicalNotesPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \u003cLabel fx:id\u003d\"panelHeader\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \u003cListView fx:id\u003d\"medicalNotesListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 10
    }
  },
  {
    "path": "src/main/resources/view/PatientChartCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "\u003c?import javafx.scene.chart.LineChart?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "\u003c?import javafx.scene.chart.CategoryAxis?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "\u003c?import javafx.scene.chart.NumberAxis?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "\u003cScrollPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"636.0\" prefWidth\u003d\"902.0\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \u003cVBox xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        \u003cLabel fx:id\u003d\"cardHeader\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "          \u003cVBox prefHeight\u003d\"1083.0\" prefWidth\u003d\"919.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                \u003cLineChart fx:id\u003d\"bmiChart\" prefHeight\u003d\"361.0\" prefWidth\u003d\"307.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                    \u003cxAxis\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                        \u003cCategoryAxis side\u003d\"BOTTOM\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                    \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                    \u003cyAxis\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                        \u003cNumberAxis side\u003d\"LEFT\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                    \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                \u003c/LineChart\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                \u003cLineChart fx:id\u003d\"weightChart\" prefHeight\u003d\"361.0\" prefWidth\u003d\"307.0\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                      \u003cxAxis\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                          \u003cCategoryAxis side\u003d\"BOTTOM\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                      \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                      \u003cyAxis\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                          \u003cNumberAxis side\u003d\"LEFT\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                      \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                \u003c/LineChart\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                \u003cLineChart fx:id\u003d\"heightChart\" prefHeight\u003d\"361.0\" prefWidth\u003d\"307.0\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                      \u003cxAxis\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                          \u003cCategoryAxis side\u003d\"BOTTOM\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                      \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                      \u003cyAxis\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                          \u003cNumberAxis side\u003d\"LEFT\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                      \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                \u003c/LineChart\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "\u003c/ScrollPane\u003e"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 37,
      "foojingyi": 4
    }
  },
  {
    "path": "src/main/resources/view/PatientListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "      \u003cLabel fx:id\u003d\"ic\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$ic\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "      \u003cLabel fx:id\u003d\"dateOfBirth\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dateOfBirth\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "      \u003cLabel fx:id\u003d\"height\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$height\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "      \u003cLabel fx:id\u003d\"weight\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$weight\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "      \u003cLabel fx:id\u003d\"bmi\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$bmi\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "      \u003cLabel fx:id\u003d\"bloodType\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$bloodType\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 1,
      "wang-jun-hao": 2,
      "divakarmal": 1,
      "foojingyi": 1,
      "PrestonTYR": 1,
      "-": 36
    }
  },
  {
    "path": "src/main/resources/view/PatientListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "  \u003cTableView fx:id\u003d\"patientTableView\" stylesheets\u003d\"@TableView.css\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    \u003ccolumnResizePolicy\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "      \u003cTableView fx:constant\u003d\"CONSTRAINED_RESIZE_POLICY\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    \u003c/columnResizePolicy\u003e\u003c/TableView\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 7,
      "-": 4
    }
  },
  {
    "path": "src/main/resources/view/PatientProfile.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003cGridPane xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"250\" prefWidth\u003d\"1000\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        \u003cRowConstraints vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \u003cSplitPane dividerPositions\u003d\"0.5\" orientation\u003d\"VERTICAL\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        \u003citems\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            \u003cAnchorPane fx:id\u003d\"personalDetailsCard\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            \u003cAnchorPane fx:id\u003d\"medicalDetailsCard\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        \u003c/items\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \u003cSplitPane dividerPositions\u003d\"0.5\" GridPane.columnIndex\u003d\"1\" prefWidth\u003d\"2300.0\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        \u003citems\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            \u003cAnchorPane fx:id\u003d\"medicalNotesPanel\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            \u003cAnchorPane fx:id\u003d\"patientChartCard\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        \u003c/items\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 5,
      "foojingyi": 20,
      "PrestonTYR": 3
    }
  },
  {
    "path": "src/main/resources/view/PersonalDetailsRow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003cHBox id\u003d\"row\" fx:id\u003d\"row\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \u003cAnchorPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        \u003cLabel fx:id\u003d\"fieldName\" styleClass\u003d\"cell_small_label\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \u003cAnchorPane\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        \u003cLabel fx:id\u003d\"value\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 14
    }
  },
  {
    "path": "src/main/resources/view/ProfileDetailsCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \u003cLabel fx:id\u003d\"cardHeader\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \u003cListView fx:id\u003d\"detailsListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 3,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/TableView.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    -fx-background-color:#474747;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    -fx-background-radius : 30;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ".table-view .column-header-background{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    -fx-background-color: linear-gradient(#131313 0.0%, #424141 100.0%);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    -fx-background-radius : 30;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    -fx-size: 100;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    -fx-border-width: 0 0 5 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ".table-view .table-cell {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    -fx-alignment: CENTER_LEFT;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ".table-row{"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    -fx-background-radius: 30;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ".table-row-cell {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    -fx-cell-size: 85px;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    -fx-background-radius: 10;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ".table-row-cell:odd {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    -fx-background-color: #222222;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ".table-row-cell:odd {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    -fx-background-color: #000000;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 46
    }
  },
  {
    "path": "src/test/data/JsonMediBookStorageTest/invalidAndValidPatientMediBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "  \"patients\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    \"ic\": \"S7777777R\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    \"name\": \"Valid Patient\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"dateOfBirth\": \"25-10-1977\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    \"height\": \"168\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    \"weight\": \"60.1\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    \"bmi\": \"21.3\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    \"bloodType\": \"A+\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    \"ic\": \"S7777777R\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    \"name\": \"Patient With Invalid Phone Field\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"dateOfBirth\": \"25-10-1977\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"948asdf2424\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    \"height\": \"172\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    \"weight\": \"60.2\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    \"bmi\": \"20.3\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    \"bloodType\": \"B+\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 2,
      "wang-jun-hao": 4,
      "divakarmal": 7,
      "foojingyi": 2,
      "PrestonTYR": 2,
      "-": 8
    }
  },
  {
    "path": "src/test/data/JsonMediBookStorageTest/invalidPatientMediBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "  \"patients\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    \"ic\": \"S7777777R\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    \"name\": \"Patient with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"dateOfBirth\": \"25-10-1977\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    \"height\": \"170\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    \"weight\": \"55.9\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    \"bmi\": \"19.3\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    \"bloodType\": \"O+\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 1,
      "wang-jun-hao": 2,
      "divakarmal": 4,
      "foojingyi": 1,
      "PrestonTYR": 1,
      "-": 5
    }
  },
  {
    "path": "src/test/data/JsonMedicalNoteListStorageTest/emptyMedicalNotes/medicalnotes/S7329204G.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "  \"medical notes\": []"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 3
    }
  },
  {
    "path": "src/test/data/JsonMedicalNoteListStorageTest/invalidAndValidPatientMedicalNotes/medicalnotes/S7329204G.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "  \"medical notes\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    \"date\" : \"07-03-2020\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    \"doctor name\" : \"Dr Farmsworth\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    \"content\" : \"Good new everyone!\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    \"date\" : \"07-03-invalid\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    \"doctor name\" : \"Dr Zoidberg\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    \"content\" : \"Woop woop woop woop woop!\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 11
    }
  },
  {
    "path": "src/test/data/JsonMedicalNoteListStorageTest/invalidPatientMedicalNotes/medicalnotes/S7329204G.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "  \"medical notes\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    \"date\" : \"07-03-invalid\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    \"doctor name\" : \"Dr Zoidberg\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    \"content\" : \"Woop woop woop woop woop!\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 7
    }
  },
  {
    "path": "src/test/data/JsonMedicalNoteListStorageTest/notJsonFormatMedicalNotes/medicalnotes/S7329204G.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "not json format!"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 1
    }
  },
  {
    "path": "src/test/data/JsonSerializableMediBookTest/duplicatePatientMediBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "  \"patients\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"ic\" : \"S9777777R\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"dateOfBirth\": \"15-09-1997\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"alice@example.com\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    \"height\": \"174\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"weight\": \"48.5\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"bmi\": \"16.0\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"bloodType\": \"A+\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"allergies\" : [ \"cat fur (Fel d 1)\" ],"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"conditions\" : [ \"Migraine\" ],"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"treatments\" : [ \"Ibuprofen\" ],"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    \"record\" : {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "      \"heightRecord\": { },"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "      \"weightRecord\": { }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"ic\" : \"S9777777R\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"dateOfBirth\": \"15-09-1997\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"email\" : \"alice@example.com\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"address\" : \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    \"height\": \"174\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"weight\": \"48.5\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"bmi\": \"16.0\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"bloodType\": \"A+\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"allergies\" : [ \"cat fur (Fel d 1)\" ],"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"conditions\" : [ \"Migraine\" ],"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"treatments\" : [ \"Ibuprofen\" ],"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    \"record\" : {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "      \"heightRecord\": { },"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "      \"weightRecord\": { }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 9,
      "wang-jun-hao": 1,
      "divakarmal": 1,
      "foojingyi": 18,
      "-": 10
    }
  },
  {
    "path": "src/test/data/JsonSerializableMediBookTest/invalidPatientMediBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "  \"patients\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    \"ic\": \"S7777777R\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Hans Muster\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"dateOfBirth\": \"10-01-1977\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"invalid@email!3e\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    \"height\": \"171\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    \"weight\": \"60.1\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    \"bmi\": \"20.6\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    \"bloodType\": \"A+\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 1,
      "wang-jun-hao": 2,
      "divakarmal": 3,
      "foojingyi": 1,
      "PrestonTYR": 1,
      "-": 6
    }
  },
  {
    "path": "src/test/data/JsonSerializableMediBookTest/typicalPatientMediBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "  \"_comment\": \"MediBook save file which contains the same Patient values as in TypicalPatients#getTypicalMediBook()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "  \"patients\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    \"ic\" : \"S9777777R\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"dateOfBirth\": \"15-09-1997\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"alice@example.com\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    \"height\": \"174\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    \"weight\": \"48.5\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    \"bmi\": \"16.0\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    \"bloodType\": \"A+\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"allergies\" : [ \"cat fur (Fel d 1)\" ],"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"conditions\" : [ \"Migraine\" ],"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"treatments\" : [ \"Ibuprofen\" ],"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    \"record\" : {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "      \"heightRecord\": { },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "      \"weightRecord\": { }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    \"ic\" : \"S9234567A\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"dateOfBirth\": \"01-03-1992\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"98765432\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"johnd@example.com\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"311, Clementi Ave 2, #02-25\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    \"height\": \"170\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    \"weight\": \"63.5\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    \"bmi\": \"22.0\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    \"bloodType\": \"AB+\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"allergies\" : [ \"shellfish\", \"dust mites\" ],"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"conditions\" : [ \"knee sprain\" ],"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"treatments\" : [ \"Physiotherapy\" ],"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    \"record\" : {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "      \"heightRecord\": { },"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "      \"weightRecord\": { }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    \"ic\" : \"S9876543W\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"dateOfBirth\": \"16-01-1998\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"95352563\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"heinz@example.com\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"wall street\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    \"height\": \"162\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    \"weight\": \"80.8\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    \"bmi\": \"30.8\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    \"bloodType\": \"B+\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"allergies\" : [ \"peanut\" ],"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"conditions\" : [ \"fever\" ],"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"treatments\" : [ \"epinephrine\", \"Paracetamol\" ],"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    \"record\" : {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "      \"heightRecord\": { },"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "      \"weightRecord\": { }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    \"ic\" : \"T0054321P\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"dateOfBirth\": \"10-10-2000\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"87652533\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"cornelia@example.com\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"10th street\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    \"height\": \"183\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    \"weight\": \"70.3\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    \"bmi\": \"21.0\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    \"bloodType\": \"A-\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"allergies\" : [ \"potatoes\" ],"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"conditions\" : [ \"Type I diabetes\" ],"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"treatments\" : [ \"Insulin pump\" ],"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    \"record\" : {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "      \"heightRecord\": { },"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "      \"weightRecord\": { }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    \"ic\" : \"F7654321Q\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"dateOfBirth\": \"05-10-1976\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482224\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"werner@example.com\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"michegan ave\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    \"height\": \"177\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    \"weight\": \"43.5\","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    \"bmi\": \"13.9\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    \"bloodType\": \"B-\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"allergies\" : [ ],"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"conditions\" : [ ],"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"treatments\" : [ ],"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    \"record\" : {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "      \"heightRecord\": { },"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "      \"weightRecord\": { }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    \"ic\" : \"S7543210A\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"dateOfBirth\": \"02-07-1975\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482427\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"lydia@example.com\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"little tokyo\","
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    \"height\": \"168\","
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    \"weight\": \"50.5\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    \"bmi\": \"17.9\","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    \"bloodType\": \"O+\","
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"allergies\" : [ \"Penicillin\" ],"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"conditions\" : [ ],"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"treatments\" : [ ],"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    \"record\" : {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "      \"heightRecord\": { },"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "      \"weightRecord\": { }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    \"ic\" : \"T0232323I\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"George Best\","
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"dateOfBirth\": \"14-07-2002\","
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482442\","
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"anna@example.com\","
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"4th street\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    \"height\": \"169\","
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    \"weight\": \"69.2\","
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    \"bmi\": \"24.2\","
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    \"bloodType\": \"A+\","
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"allergies\" : [ ],"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"conditions\" : [ \"fever\" ],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    \"treatments\" : [ \"Paracetemol\" ],"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    \"record\" : {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "      \"heightRecord\": { },"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "      \"weightRecord\": { }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 35,
      "wang-jun-hao": 14,
      "divakarmal": 9,
      "foojingyi": 28,
      "PrestonTYR": 7,
      "-": 37
    }
  },
  {
    "path": "src/test/data/JsonSerializableMedicalNoteListTest/invalidPatientMedicalNotes.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "  \"medical notes\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    \"date\" : \"invalid date\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    \"doctor name\" : \"Strange\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    \"doctor mcr\" : \"MC8270P\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    \"content\" : \"Patient is in critical condition.\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    \"date\" : \"17-01-2020\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    \"doctor name\" : \"Who\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    \"doctor mcr\" : \"M87380P\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    \"content\" : \"Patient is recovering well.\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    \"date\" : \"23-01-2020\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    \"doctor name\" : \"Nick\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    \"doctor mcr\" : \"M29380X\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    \"content\" : \"Patient has fully recovered.\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 12,
      "wang-jun-hao": 6
    }
  },
  {
    "path": "src/test/data/JsonSerializableMedicalNoteListTest/typicalPatientMedicalNotes.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "  \"medical notes\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    \"date\" : \"01-01-2020\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    \"doctor name\" : \"Strange\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    \"doctor mcr\" : \"M52037V\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    \"content\" : \"Patient is in critical condition.\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    \"date\" : \"17-01-2020\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    \"doctor name\" : \"Who\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    \"doctor mcr\" : \"M62035Z\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    \"content\" : \"Patient is recovering well.\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    \"date\" : \"23-01-2020\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    \"doctor name\" : \"Nick\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    \"doctor mcr\" : \"M42037V\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    \"content\" : \"Patient has fully recovered.\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 12,
      "wang-jun-hao": 6
    }
  },
  {
    "path": "src/test/data/JsonSerializableUserAccountsListTest/invalidAccounts.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "  \"accounts\" : ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "      \"username\": \"user1\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "      \"password\": \"password1\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "      \"doctorName\": \"Doct@\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "      \"doctorMcr\": \"M1234512Q\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "      \"username\": \"user2\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "      \"password\": \"password2\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "      \"doctorName\": \"te#\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "      \"doctorMcr\": \"M6543SA\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "      \"username\": \"user3\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "      \"password\": \"password3\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "      \"doctorName\": \"a!!@\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "      \"doctorMcr\": \"MQEW3T\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PrestonTYR": 19
    }
  },
  {
    "path": "src/test/data/JsonSerializableUserAccountsListTest/typicalAccounts.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "  \"accounts\" : ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "      \"username\": \"user1\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "      \"password\": \"password1\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "      \"doctorName\": \"Doctor\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "      \"doctorMcr\": \"M12345Q\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "      \"username\": \"user2\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "      \"password\": \"password2\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "      \"doctorName\": \"test\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "      \"doctorMcr\": \"M65321A\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "      \"username\": \"user3\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "      \"password\": \"password3\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "      \"doctorName\": \"asdf\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "      \"doctorMcr\": \"M11111T\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PrestonTYR": 19
    }
  },
  {
    "path": "src/test/data/JsonUserAccountsListStorageTest/accounts.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "  \"accounts\" : ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "      \"username\": \"user1\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "      \"password\": \"password1\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "      \"doctorName\": \"Doctor\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "      \"doctorMcr\": \"M12345Q\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "      \"username\": \"user2\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "      \"password\": \"password2\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "      \"doctorName\": \"test\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "      \"doctorMcr\": \"M65321A\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "      \"username\": \"user3\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "      \"password\": \"password3\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "      \"doctorName\": \"asdf\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "      \"doctorMcr\": \"M11111T\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PrestonTYR": 19
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "  \"mediBookFilePath\" : \"medibook.json\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "  \"medicalNotesDirPath\" : \"data\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 2,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "  \"mediBookFilePath\" : \"medibook.json\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "  \"medicalNotesDirPath\" : \"data\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/medibook/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/medibook/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/medibook/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/medibook/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        final Index fifthPatientIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertTrue(fifthPatientIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertTrue(fifthPatientIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertTrue(fifthPatientIndex.equals(fifthPatientIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertFalse(fifthPatientIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertFalse(fifthPatientIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertFalse(fifthPatientIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 9,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/medibook/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/medibook/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/medibook/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/medibook/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/medibook/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/medibook/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 1,
      "divakarmal": 2,
      "-": 140
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.core.Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.BLOOD_TYPE_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.DOB_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.HEIGHT_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.IC_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.WEIGHT_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ModelManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ReadOnlyMediBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.UserPrefs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.storage.JsonMediBookStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.storage.JsonMedicalNoteListStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.storage.JsonUserAccountsListStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.storage.StorageManager;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        JsonMediBookStorage mediBookStorage \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                new JsonMediBookStorage(temporaryFolder.resolve(\"mediBook.json\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonMedicalNoteListStorage medicalNoteListStorage \u003d new JsonMedicalNoteListStorage(temporaryFolder);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        JsonUserAccountsListStorage userAccountStorage \u003d new JsonUserAccountsListStorage(temporaryFolder);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        StorageManager storage \u003d new StorageManager(mediBookStorage, userPrefsStorage, medicalNoteListStorage,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                userAccountStorage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // Setup LogicManager with JsonMediBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        JsonMediBookStorage mediBookStorage \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                new JsonMediBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionMediBook.json\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonMedicalNoteListStorage medicalNoteListStorage \u003d new JsonMedicalNoteListStorage(temporaryFolder);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        JsonUserAccountsListStorage userAccountStorage \u003d new JsonUserAccountsListStorage(temporaryFolder);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        StorageManager storage \u003d new StorageManager(mediBookStorage, userPrefsStorage, medicalNoteListStorage,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                userAccountStorage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + IC_DESC_AMY + NAME_DESC_AMY + DOB_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + HEIGHT_DESC_AMY + WEIGHT_DESC_AMY + BLOOD_TYPE_DESC_AMY;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        Patient expectedPatient \u003d new PatientBuilder(AMY).withAllergies().withConditions().withTreatments().build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        expectedModel.addPatient(expectedPatient);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_SAVE_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void getFilteredPatientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPatientList().remove(0));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getMediBook(), new UserPrefs());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private static class JsonMediBookIoExceptionThrowingStub extends JsonMediBookStorage {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        private JsonMediBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        public void saveMediBook(ReadOnlyMediBook mediBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 4,
      "divakarmal": 41,
      "foojingyi": 2,
      "PrestonTYR": 8,
      "-": 120
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/commands/AccessCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.showPatientAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.getTypicalMediBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "public class AccessCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalMediBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Patient patientToAccess \u003d model.getFilteredPatientList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        AccessCommand accessCommand \u003d new AccessCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                new CommandResult(String.format(AccessCommand.MESSAGE_ACCESS_PATIENT_SUCCESS, patientToAccess),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                        false, false, true, false);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getMediBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        expectedModel.accessPatient(patientToAccess);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertCommandSuccess(accessCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPatientList().size() + 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        AccessCommand accessCommand \u003d new AccessCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertCommandFailure(accessCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void execute_validIndexFilteredList_success() throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Patient patientToAccess \u003d model.getFilteredPatientList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        AccessCommand accessCommand \u003d new AccessCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                new CommandResult(String.format(AccessCommand.MESSAGE_ACCESS_PATIENT_SUCCESS, patientToAccess),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                        false, false, true, false);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getMediBook(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        expectedModel.accessPatient(patientToAccess);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertCommandSuccess(accessCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of medi book list"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getMediBook().getPatientList().size());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        AccessCommand accessCommand \u003d new AccessCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertCommandFailure(accessCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void execute_invalidOutOfBoundsIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPatientList().size() + 1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        AccessCommand accessCommand \u003d new AccessCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertCommandFailure(accessCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        AccessCommand accessFirstCommand \u003d new AccessCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        AccessCommand accessSecondCommand \u003d new AccessCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertTrue(accessFirstCommand.equals(accessFirstCommand));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        AccessCommand accessFirstCommandCopy \u003d new AccessCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertTrue(accessFirstCommand.equals(accessFirstCommandCopy));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertFalse(accessFirstCommand.equals(1));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertFalse(accessFirstCommand.equals(null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertFalse(accessFirstCommand.equals(accessSecondCommand));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private void showNoPatient(Model model) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        model.updateFilteredPatientList(p -\u003e false);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertTrue(model.getFilteredPatientList().isEmpty());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 12,
      "PrestonTYR": 106
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.getTypicalMediBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        model \u003d new ModelManager(getTypicalMediBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void execute_newPatient_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient validPatient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getMediBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        expectedModel.addPatient(validPatient);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPatient), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPatient), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void execute_duplicatePatient_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient patientInList \u003d model.getMediBook().getPatientList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertCommandFailure(new AddCommand(patientInList), model, AddCommand.MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 19,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.MediBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ReadOnlyMediBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.doctor.Doctor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.patient.Ic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void constructor_nullPatient_throwsNullPatientException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void execute_patientAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        ModelStubAcceptingPatientAdded modelStub \u003d new ModelStubAcceptingPatientAdded();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient validPatient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPatient).execute(modelStub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPatient), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertEquals(Arrays.asList(validPatient), modelStub.patientsAdded);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void execute_duplicatePatient_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient validPatient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPatient);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPatient(validPatient);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PATIENT, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient alice \u003d new PatientBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient bob \u003d new PatientBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        public Path getMediBookFilePath() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        public void setMediBookFilePath(Path mediBookFilePath) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        public void addPatient(Patient patient) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        public void setMediBook(ReadOnlyMediBook newData) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        public ReadOnlyMediBook getMediBook() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        public boolean hasPatient(Patient patient) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        public void deletePatient(Patient target) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        public void setPatient(Patient target, Patient editedPatient) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        public ObservableList\u003cPatient\u003e getFilteredPatientList() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        public void updateFilteredPatientList(Predicate\u003cPatient\u003e predicate) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        public void accessPatient(Patient patient) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        public Optional\u003cPatient\u003e getPatientToAccess() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        public void resetAccessedPatient() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        public void setDeletedPatient(Patient patient) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        public Optional\u003cPatient\u003e getDeletedPatient() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        public void resetDeletedPatient() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        public void setEditedPatient(Patient patient, Ic prevIc) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        public Optional\u003cPatient\u003e getEditedPatient() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        public Optional\u003cIc\u003e getEditedPatientPrevIc() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        public void resetEditedPatient() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        public boolean getShouldLoadMedicalNotes() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        public void setShouldLoadMedicalNotes(boolean b) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        public boolean getShouldDeleteAllMedicalNotes() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        public void setShouldDeleteAllMedicalNotes(boolean b) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        public void setActiveUser(Optional\u003cDoctor\u003e doctor) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        public Optional\u003cDoctor\u003e getActiveUser() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * A Model stub that contains a single patient."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private class ModelStubWithPatient extends ModelStub {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        private final Patient patient;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        ModelStubWithPatient(Patient patient) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            requireNonNull(patient);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            this.patient \u003d patient;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        public boolean hasPatient(Patient patient) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            requireNonNull(patient);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            return this.patient.isSamePatient(patient);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * A Model stub that always accept the patient being added."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private class ModelStubAcceptingPatientAdded extends ModelStub {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        final ArrayList\u003cPatient\u003e patientsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        public boolean hasPatient(Patient patient) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            requireNonNull(patient);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            return patientsAdded.stream().anyMatch(patient::isSamePatient);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        public void addPatient(Patient patient) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            requireNonNull(patient);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            patientsAdded.add(patient);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        public ReadOnlyMediBook getMediBook() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            return new MediBook();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 71,
      "divakarmal": 55,
      "PrestonTYR": 12,
      "-": 139
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/commands/AddNoteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.commands.AddNoteCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.getTypicalMediBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.MediBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.commonfields.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.commonfields.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.doctor.Doctor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.doctor.Mcr;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.medicalnote.Content;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNote;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for AddNoteCommand."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "public class AddNoteCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalMediBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void execute_noteOnListView_failure() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // set model to hold no optional patient"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        model.resetAccessedPatient();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        model.setActiveUser(Optional.of(new Doctor(new Name(\"John\"), new Mcr(\"M02830P\"))));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Date medicalNoteDate \u003d new Date(\"20-10-2019\", true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Content medicalNoteContent \u003d new Content(\"Patient is having fever.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        AddNoteCommand addNoteCommand \u003d new AddNoteCommand(medicalNoteDate, medicalNoteContent);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertCommandFailure(addNoteCommand, model, AddNoteCommand.MESSAGE_ADD_NOTE_ON_LIST);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void execute_duplicateNote_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Patient targetPatient \u003d model.getFilteredPatientList().get(0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        model.accessPatient(targetPatient);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        model.setActiveUser(Optional.of(new Doctor(new Name(\"John\"), new Mcr(\"MP2819J\"))));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Date duplicateDate \u003d new Date(\"19-02-2020\", true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Content duplicateContent \u003d new Content(\"Patient is good.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        AddNoteCommand addNoteCommand \u003d new AddNoteCommand(duplicateDate, duplicateContent);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertCommandFailure(addNoteCommand, model, AddNoteCommand.MESSAGE_DUPLICATE_NOTE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void execute_accessFirstPatientThenNote_successWithCorrectNoteAdded() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Patient targetPatient \u003d model.getFilteredPatientList().get(0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        model.accessPatient(targetPatient);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        model.setActiveUser(Optional.of(new Doctor(new Name(\"John\"), new Mcr(\"M02830P\"))));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Date date \u003d new Date(\"21-10-2019\", true);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Content content \u003d new Content(\"Patient is having fever.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        MedicalNote medicalNote \u003d new MedicalNote(new Date(\"21-10-2019\", true),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                new Doctor(new Name(\"John\"), new Mcr(\"M02830P\")),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                new Content(\"Patient is having fever.\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        AddNoteCommand addNoteCommand \u003d new AddNoteCommand(date, content);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Patient resultingPatient \u003d new PatientBuilder(targetPatient).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        resultingPatient.addMedicalNote(medicalNote);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUCCESS, medicalNote);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new MediBook(model.getMediBook()), new UserPrefs());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        expectedModel.setActiveUser(Optional.of(new Doctor(new Name(\"John\"), new Mcr(\"M02830P\"))));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        expectedModel.setPatient(targetPatient, resultingPatient);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        expectedModel.accessPatient(targetPatient);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        expectedModel.setShouldLoadMedicalNotes(false);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertCommandSuccess(addNoteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void execute_notDoctorAccount_throwsCommandException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Patient targetPatient \u003d model.getFilteredPatientList().get(0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        model.accessPatient(targetPatient);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        model.setActiveUser(Optional.empty());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Date date \u003d new Date(\"21-10-2019\", true);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Content content \u003d new Content(\"Patient is having fever.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        AddNoteCommand addNoteCommand \u003d new AddNoteCommand(date, content);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertCommandFailure(addNoteCommand, model, AddNoteCommand.MESSAGE_USER_CANNOT_ADD);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // same date and content -\u003e returns true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Date date \u003d new Date(\"20-10-2019\", true);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Content content \u003d new Content(\"Patient is having fever.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        AddNoteCommand addNoteCommand1 \u003d new AddNoteCommand(date, content);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        AddNoteCommand addNoteCommand2 \u003d new AddNoteCommand(date, content);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(addNoteCommand1.equals(addNoteCommand2));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Date differentDate \u003d new Date(\"21-10-2019\", true);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        AddNoteCommand differentAddNoteCommand \u003d new AddNoteCommand(differentDate, content);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(addNoteCommand1.equals(differentAddNoteCommand));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        //different content -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Content differentContent \u003d new Content(\"Patient is having chills.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        differentAddNoteCommand \u003d new AddNoteCommand(date, differentContent);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(addNoteCommand1.equals(null));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 84,
      "PrestonTYR": 47
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.getTypicalMediBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.MediBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void execute_emptyMediBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        expectedModel.setShouldDeleteAllMedicalNotes(true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void execute_nonEmptyMediBook_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalMediBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalMediBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        expectedModel.setMediBook(new MediBook());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        expectedModel.setShouldDeleteAllMedicalNotes(true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 2,
      "divakarmal": 12,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, false, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, false, false)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // different showProfile value -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, false, true, false)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // different showList value -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, false, false, true)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false, false, false).hashCode());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true, false, false).hashCode());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // different showProfile value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, false, true, false).hashCode());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // different showList value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, false, false, true).hashCode());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "PrestonTYR": 17,
      "-": 48
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_ALLERGY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_BLOOD_TYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_CONDITION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_IC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_MCR;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_TREATMENT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_WEIGHT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.index.Index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.MediBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.FieldContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.testutil.EditPatientDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static final String VALID_IC_AMY \u003d \"S9753124K\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static final String VALID_IC_BOB \u003d \"T0102030G\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public static final String VALID_DOB_AMY \u003d \"14-02-1997\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public static final String VALID_DOB_BOB \u003d \"11-11-2001\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static final String VALID_HEIGHT_AMY \u003d \"172\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static final String VALID_HEIGHT_BOB \u003d \"166\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String VALID_WEIGHT_AMY \u003d \"49.9\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String VALID_WEIGHT_BOB \u003d \"65.0\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String VALID_BMI_AMY \u003d \"16.9\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String VALID_BMI_BOB \u003d \"23.6\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String VALID_BLOOD_TYPE_AMY \u003d \"A+\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String VALID_BLOOD_TYPE_BOB \u003d \"B+\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public static final String VALID_ALLERGY_PENICILLIN \u003d \"Penicillin\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public static final String VALID_ALLERGY_SHELLFISH \u003d \"shellfish (mild)\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public static final String VALID_CONDITION_BACK \u003d \"back sprain\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public static final String VALID_CONDITION_DIABETES \u003d \"Type 1 Diabetes (T1D)\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public static final String VALID_TREATMENT_PHYSIOTHERAPY \u003d \"physiotherapy\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public static final String VALID_TREATMENT_PARACETAMOL \u003d \"Paracetamol (given 20-11-2019)\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String VALID_NON_FUTURE_DATE \u003d \"15-10-2020\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String VALID_FUTURE_DATE \u003d \"15-10-2030\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String VALID_DOCTOR_NAME \u003d \"John Doe\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String VALID_DOCTOR_MCR \u003d \"M09192U\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String VALID_CONTENT \u003d \"Patient is sick.\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static final String IC_DESC_AMY \u003d \" \" + PREFIX_IC + VALID_IC_AMY;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static final String IC_DESC_BOB \u003d \" \" + PREFIX_IC + VALID_IC_BOB;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String DOB_DESC_AMY \u003d \" \" + PREFIX_DATE + VALID_DOB_AMY;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String DOB_DESC_BOB \u003d \" \" + PREFIX_DATE + VALID_DOB_BOB;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static final String HEIGHT_DESC_AMY \u003d \" \" + PREFIX_HEIGHT + VALID_HEIGHT_AMY;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static final String HEIGHT_DESC_BOB \u003d \" \" + PREFIX_HEIGHT + VALID_HEIGHT_BOB;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String WEIGHT_DESC_AMY \u003d \" \" + PREFIX_WEIGHT + VALID_WEIGHT_AMY;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String WEIGHT_DESC_BOB \u003d \" \" + PREFIX_WEIGHT + VALID_WEIGHT_BOB;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String BLOOD_TYPE_DESC_AMY \u003d \" \" + PREFIX_BLOOD_TYPE + VALID_BLOOD_TYPE_AMY;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String BLOOD_TYPE_DESC_BOB \u003d \" \" + PREFIX_BLOOD_TYPE + VALID_BLOOD_TYPE_BOB;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public static final String ALLERGY_DESC_PENICILLIN \u003d \" \" + PREFIX_ALLERGY + VALID_ALLERGY_PENICILLIN;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public static final String ALLERGY_DESC_SHELLFISH \u003d \" \" + PREFIX_ALLERGY + VALID_ALLERGY_SHELLFISH;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public static final String CONDITION_DESC_BACK \u003d \" \" + PREFIX_CONDITION + VALID_CONDITION_BACK;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public static final String CONDITION_DESC_DIABETES \u003d \" \" + PREFIX_CONDITION + VALID_CONDITION_DIABETES;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public static final String TREATMENT_DESC_PARACETAMOL \u003d \" \" + PREFIX_TREATMENT + VALID_TREATMENT_PARACETAMOL;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public static final String TREATMENT_DESC_PHYSIOTHERAPY \u003d \" \" + PREFIX_TREATMENT + VALID_TREATMENT_PHYSIOTHERAPY;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String NOTE_NON_FUTURE_DATE_DESC \u003d \" \" + PREFIX_DATE + VALID_NON_FUTURE_DATE;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String NOTE_FUTURE_DATE_DESC \u003d \" \" + PREFIX_DATE + VALID_FUTURE_DATE;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String NOTE_DOCTOR_NAME_DESC \u003d \" \" + PREFIX_NAME + VALID_DOCTOR_NAME;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String NOTE_DOCTOR_MCR_DESC \u003d \" \" + PREFIX_MCR + VALID_DOCTOR_MCR;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String NOTE_CONTENT_DESC \u003d \" \" + PREFIX_CONTENT + VALID_CONTENT;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static final String INVALID_IC_DESC \u003d \" \" + PREFIX_IC + \"A222223HH\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String INVALID_DOB_DESC \u003d \" \" + PREFIX_DATE + \"31/12/95\"; // \u0027-\u0027 should be used instead of \u0027/\u0027"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static final String INVALID_HEIGHT_DESC \u003d \" \" + PREFIX_HEIGHT + \"17o\"; // \u0027o\u0027 not allowed in height"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    // 2 decimal places is not allowed in weight"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String INVALID_WEIGHT_DESC \u003d \" \" + PREFIX_WEIGHT + \"55.55\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String INVALID_BLOOD_TYPE_DESC \u003d \" \" + PREFIX_BLOOD_TYPE + \"C+\"; // \u0027C+\u0027 invalid blood type"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    // medical tags not allowed to have only non-alphanumeric characters"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public static final String INVALID_ALLERGY_DESC \u003d \" \" + PREFIX_ALLERGY + \"-\u003e.\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public static final String INVALID_CONDITION_DESC \u003d \" \" + PREFIX_CONDITION + \"/@!\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public static final String INVALID_TREATMENT_DESC \u003d \" \" + PREFIX_TREATMENT + \"[/*\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String INVALID_NOTE_DATE_DESC \u003d \" \" + PREFIX_DATE + \"2-3-2020\"; // incorrect date format"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    // \u0027*\u0027 not allowed in name"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String INVALID_NOTE_DOCTOR_NAME_DESC \u003d \" \" + PREFIX_NAME + \"A* doctor\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String INVALID_NOTE_DOCTOR_MCR_DESC \u003d \" \" + PREFIX_MCR + \"Z82730P\"; // incorrect mcr format"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String INVALID_NOTE_CONTENT_DESC \u003d \" \" + PREFIX_CONTENT + \"\"; // content cannot be empty"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final EditCommand.EditPatientDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final EditCommand.EditPatientDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        DESC_AMY \u003d new EditPatientDescriptorBuilder().withIc(VALID_IC_AMY).withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withDateOfBirth(VALID_DOB_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withAddress(VALID_ADDRESS_AMY).withTreatments(VALID_TREATMENT_PARACETAMOL).withHeight(VALID_HEIGHT_AMY)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withWeight(VALID_WEIGHT_AMY).withBloodType(VALID_BLOOD_TYPE_AMY)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withAllergies(VALID_ALLERGY_PENICILLIN).withConditions(VALID_CONDITION_DIABETES).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        DESC_BOB \u003d new EditPatientDescriptorBuilder().withIc(VALID_IC_BOB).withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withDateOfBirth(VALID_DOB_BOB).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).withHeight(VALID_HEIGHT_BOB).withWeight(VALID_WEIGHT_BOB)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withBloodType(VALID_BLOOD_TYPE_BOB).withAllergies(VALID_ALLERGY_PENICILLIN, VALID_ALLERGY_SHELLFISH)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withConditions(VALID_CONDITION_BACK, VALID_CONDITION_DIABETES)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withTreatments(VALID_TREATMENT_PHYSIOTHERAPY, VALID_TREATMENT_PARACETAMOL).build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * - the medi book, filtered patient list and selected patient in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        MediBook expectedMediBook \u003d new MediBook(actualModel.getMediBook());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        List\u003cPatient\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPatientList());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertEquals(expectedMediBook, actualModel.getMediBook());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPatientList());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the patient at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * {@code model}\u0027s medi book."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static void showPatientAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPatientList().size());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient patient \u003d model.getFilteredPatientList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        final String[] splitName \u003d patient.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        model.updateFilteredPatientList(new FieldContainsKeywordsPredicate(Arrays.asList(splitName[0]), PREFIX_NAME));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertEquals(1, model.getFilteredPatientList().size());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 6,
      "wang-jun-hao": 29,
      "divakarmal": 38,
      "foojingyi": 30,
      "PrestonTYR": 5,
      "-": 88
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.showPatientAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.getTypicalMediBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalMediBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Patient patientToDelete \u003d model.getFilteredPatientList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PATIENT_SUCCESS, patientToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getMediBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        expectedModel.deletePatient(patientToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        expectedModel.setDeletedPatient(patientToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPatientList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Patient patientToDelete \u003d model.getFilteredPatientList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PATIENT_SUCCESS, patientToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getMediBook(), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        expectedModel.deletePatient(patientToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        expectedModel.setDeletedPatient(patientToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        showNoPatient(expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of medi book list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getMediBook().getPatientList().size());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private void showNoPatient(Model model) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        model.updateFilteredPatientList(p -\u003e false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertTrue(model.getFilteredPatientList().isEmpty());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 2,
      "wang-jun-hao": 12,
      "divakarmal": 28,
      "-": 69
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/commands/DeleteNoteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.OUT_OF_RANGE_NOTE_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.VALID_NOTE_INDEX;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.getTypicalMediBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.commonfields.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.doctor.Doctor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.doctor.Mcr;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNote;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " * Contains integration tests (interaction with the Model, Logic) and unit tests for"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " * {@code DeleteNoteommand}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "public class DeleteNoteCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void execute_validIndex_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalMediBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(VALID_NOTE_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Patient targetPatient \u003d model.getFilteredPatientList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        DeleteNoteCommand deleteNoteCommand \u003d new DeleteNoteCommand(validIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        MedicalNote medicalNoteToDelete \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                targetPatient.getMedicalNoteAtIndex(validIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        model.accessPatient(targetPatient);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        model.setActiveUser(Optional.of(medicalNoteToDelete.doctor));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteNoteCommand.MESSAGE_DELETE_NOTE_SUCCESS, medicalNoteToDelete);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getMediBook(), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Patient targetPatientWithDeletedNote \u003d new PatientBuilder(targetPatient).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        targetPatientWithDeletedNote.deleteMedicalNoteAtIndex(validIndex.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        expectedModel.setPatient(targetPatient, targetPatientWithDeletedNote);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        expectedModel.accessPatient(targetPatientWithDeletedNote);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        expectedModel.setShouldLoadMedicalNotes(false);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertCommandSuccess(deleteNoteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void execute_outOfRangeIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalMediBook(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Index outOfRangeIndex \u003d Index.fromOneBased(OUT_OF_RANGE_NOTE_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Patient targetPatient \u003d model.getFilteredPatientList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        DeleteNoteCommand deleteNoteCommand \u003d new DeleteNoteCommand(outOfRangeIndex);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        model.accessPatient(targetPatient);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertCommandFailure(deleteNoteCommand, model, Messages.MESSAGE_INVALID_NOTE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void execute_notDoctorAccount_throwsCommandException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalMediBook(), new UserPrefs());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(VALID_NOTE_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Patient targetPatient \u003d model.getFilteredPatientList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        DeleteNoteCommand deleteNoteCommand \u003d new DeleteNoteCommand(validIndex);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        MedicalNote medicalNoteToDelete \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                targetPatient.getMedicalNoteAtIndex(validIndex.getZeroBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        model.accessPatient(targetPatient);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteNoteCommand.MESSAGE_DELETE_NOTE_SUCCESS, medicalNoteToDelete);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getMediBook(), new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Patient targetPatientWithDeletedNote \u003d new PatientBuilder(targetPatient).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        targetPatientWithDeletedNote.deleteMedicalNoteAtIndex(validIndex.getZeroBased());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        expectedModel.setPatient(targetPatient, targetPatientWithDeletedNote);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        expectedModel.accessPatient(targetPatientWithDeletedNote);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        expectedModel.setShouldLoadMedicalNotes(false);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertCommandFailure(deleteNoteCommand, model, DeleteNoteCommand.MESSAGE_USER_CANNOT_DELETE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void execute_wrongDoctorAccount_throwsCommandException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalMediBook(), new UserPrefs());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(VALID_NOTE_INDEX);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Patient targetPatient \u003d model.getFilteredPatientList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        DeleteNoteCommand deleteNoteCommand \u003d new DeleteNoteCommand(validIndex);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        MedicalNote medicalNoteToDelete \u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                targetPatient.getMedicalNoteAtIndex(validIndex.getZeroBased());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        model.accessPatient(targetPatient);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        model.setActiveUser(Optional.of(new Doctor(new Name(\"Tom\"), new Mcr(\"M41259K\"))));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteNoteCommand.MESSAGE_DELETE_NOTE_SUCCESS, medicalNoteToDelete);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getMediBook(), new UserPrefs());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Patient targetPatientWithDeletedNote \u003d new PatientBuilder(targetPatient).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        targetPatientWithDeletedNote.deleteMedicalNoteAtIndex(validIndex.getZeroBased());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        expectedModel.setPatient(targetPatient, targetPatientWithDeletedNote);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        expectedModel.accessPatient(targetPatientWithDeletedNote);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        expectedModel.setShouldLoadMedicalNotes(false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertCommandFailure(deleteNoteCommand, model, DeleteNoteCommand.MESSAGE_CANNOT_DELETE_OTHER_DOCTOR_NOTES);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        DeleteNoteCommand deleteFirstNoteCommand \u003d new DeleteNoteCommand(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        DeleteNoteCommand deleteSecondNoteCommand \u003d new DeleteNoteCommand(Index.fromOneBased(2));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(deleteFirstNoteCommand.equals(deleteFirstNoteCommand));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        DeleteNoteCommand deleteFirstNoteCommandCopy \u003d new DeleteNoteCommand(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(deleteFirstNoteCommand.equals(deleteFirstNoteCommandCopy));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(deleteFirstNoteCommand.equals(1));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(deleteFirstNoteCommand.equals(null));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(deleteFirstNoteCommand.equals(deleteSecondNoteCommand));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 88,
      "PrestonTYR": 60
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_BMI_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_HEIGHT_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_TREATMENT_PHYSIOTHERAPY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_WEIGHT_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.showPatientAtIndex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.getTypicalMediBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.Messages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.EditCommand.EditPatientDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.MediBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNoteList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Bmi;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Height;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Weight;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.testutil.EditPatientDescriptorBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalMediBook(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient editedPatient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        EditCommand.EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder(editedPatient).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Patient originalPatient \u003d model.getFilteredPatientList().get(0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new MediBook(model.getMediBook()), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        MedicalNoteList medicalNoteList \u003d originalPatient.getMedicalNoteList().makeCopy();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        editedPatient.setMedicalNoteList(medicalNoteList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        expectedModel.setPatient(originalPatient, editedPatient);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        expectedModel.setEditedPatient(editedPatient, originalPatient.getIc());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Index indexLastPatient \u003d Index.fromOneBased(model.getFilteredPatientList().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient lastPatient \u003d model.getFilteredPatientList().get(indexLastPatient.getZeroBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        PatientBuilder patientInList \u003d new PatientBuilder(lastPatient);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient editedPatient \u003d patientInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withTreatments(VALID_TREATMENT_PHYSIOTHERAPY).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTreatments(VALID_TREATMENT_PHYSIOTHERAPY).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPatient, descriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new MediBook(model.getMediBook()), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        expectedModel.setPatient(lastPatient, editedPatient);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void execute_weightFieldSpecifiedUnfilteredList_successWithCorrectUpdatedBmi() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Index indexLastPatient \u003d Index.fromOneBased(model.getFilteredPatientList().size());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Patient lastPatient \u003d model.getFilteredPatientList().get(indexLastPatient.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Height heightOfLastPatient \u003d lastPatient.getHeight().get();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Bmi expectedBmi \u003d new Bmi(new Weight(VALID_WEIGHT_BOB), heightOfLastPatient);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        PatientBuilder patientInList \u003d new PatientBuilder(lastPatient);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Patient editedPatient \u003d patientInList.withWeight(VALID_WEIGHT_BOB).withBmi(expectedBmi.value)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                .buildWithSpecifiedBmi();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withWeight(VALID_WEIGHT_BOB).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPatient, descriptor);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new MediBook(model.getMediBook()), new UserPrefs());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        expectedModel.setPatient(lastPatient, editedPatient);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void execute_heightFieldSpecifiedUnfilteredList_successWithCorrectUpdatedBmi() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Index indexLastPatient \u003d Index.fromOneBased(model.getFilteredPatientList().size());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Patient lastPatient \u003d model.getFilteredPatientList().get(indexLastPatient.getZeroBased());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Weight weightOfLastPatient \u003d lastPatient.getWeight().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Bmi expectedBmi \u003d new Bmi(weightOfLastPatient, new Height(VALID_HEIGHT_BOB));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        PatientBuilder patientInList \u003d new PatientBuilder(lastPatient);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Patient editedPatient \u003d patientInList.withHeight(VALID_HEIGHT_BOB).withBmi(expectedBmi.value)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                .buildWithSpecifiedBmi();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withHeight(VALID_HEIGHT_BOB).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPatient, descriptor);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new MediBook(model.getMediBook()), new UserPrefs());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        expectedModel.setPatient(lastPatient, editedPatient);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void execute_weightAndHeightFieldSpecifiedUnfilteredList_successWithCorrectUpdatedBmi() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Index indexLastPatient \u003d Index.fromOneBased(model.getFilteredPatientList().size());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Patient lastPatient \u003d model.getFilteredPatientList().get(indexLastPatient.getZeroBased());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        PatientBuilder patientInList \u003d new PatientBuilder(lastPatient);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Patient editedPatient \u003d patientInList.withHeight(VALID_HEIGHT_BOB).withWeight(VALID_WEIGHT_BOB)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                .withBmi(VALID_BMI_BOB).buildWithSpecifiedBmi();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withHeight(VALID_HEIGHT_BOB)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                .withWeight(VALID_WEIGHT_BOB).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPatient, descriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new MediBook(model.getMediBook()), new UserPrefs());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        expectedModel.setPatient(lastPatient, editedPatient);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST, new EditCommand.EditPatientDescriptor());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Patient editedPatient \u003d model.getFilteredPatientList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new MediBook(model.getMediBook()), new UserPrefs());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Patient patientInFilteredList \u003d model.getFilteredPatientList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient editedPatient \u003d new PatientBuilder(patientInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new MediBook(model.getMediBook()), new UserPrefs());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        expectedModel.setPatient(model.getFilteredPatientList().get(0), editedPatient);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void execute_duplicatePatientUnfilteredList_failure() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Patient firstPatient \u003d model.getFilteredPatientList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        EditCommand.EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder(firstPatient).build();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND, descriptor);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void execute_duplicatePatientFilteredList_failure() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // edit patient in filtered list into a duplicate in medi book"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Patient patientInList \u003d model.getMediBook().getPatientList().get(INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                new EditPatientDescriptorBuilder(patientInList).build());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void execute_invalidPatientIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPatientList().size() + 1);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        EditCommand.EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder()"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                .withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * but smaller than size of MediBook"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void execute_invalidPatientIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of medi book list"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getMediBook().getPatientList().size());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST, DESC_AMY);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        EditCommand.EditPatientDescriptor copyDescriptor \u003d new EditCommand.EditPatientDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST, copyDescriptor);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND, DESC_AMY)));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST, DESC_BOB)));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 3,
      "wang-jun-hao": 87,
      "divakarmal": 68,
      "foojingyi": 3,
      "PrestonTYR": 2,
      "-": 91
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/commands/EditNoteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.ALICE_MEDICAL_NOTE_1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.ALICE_MEDICAL_NOTE_2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.ALICE_NUM_OF_MEDICAL_NOTES;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.getTypicalMediBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.MediBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.commonfields.Date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.commonfields.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.doctor.Doctor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.doctor.Mcr;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.medicalnote.Content;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNote;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNoteList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " * Contains integration tests and unit tests for EditNoteCommand."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "public class EditNoteCommandTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalMediBook(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void execute_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Patient targetPatient \u003d model.getFilteredPatientList().get(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        model.accessPatient(targetPatient);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        model.setActiveUser(Optional.of(new Doctor(new Name(\"John\"), new Mcr(\"MP2819J\"))));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        EditNoteCommand.EditNoteDescriptor descriptor \u003d new EditNoteCommand.EditNoteDescriptor();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        descriptor.setDate(new Date(\"24-12-2018\", true));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        descriptor.setContent(new Content(\"Patient has high fever.\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        EditNoteCommand editNoteCommand \u003d new EditNoteCommand(INDEX_SECOND, descriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        MedicalNote editedNote \u003d new MedicalNote(new Date(\"24-12-2018\", true),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                model.getActiveUser().get(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                new Content(\"Patient has high fever.\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        String expectedMessage \u003d String.format(EditNoteCommand.MESSAGE_EDIT_NOTE_SUCCESS, editedNote);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new MediBook(model.getMediBook()), new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        expectedModel.setActiveUser(Optional.of(new Doctor(new Name(\"John\"), new Mcr(\"MP2819J\"))));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Patient expectedTargetPatient \u003d expectedModel.getFilteredPatientList().get(0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        expectedTargetPatient \u003d new PatientBuilder(expectedTargetPatient).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        LinkedList\u003cMedicalNote\u003e expectedMedicalNoteLinkedList \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                new LinkedList\u003c\u003e(Arrays.asList(editedNote, ALICE_MEDICAL_NOTE_2));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        expectedTargetPatient.setMedicalNoteList(new MedicalNoteList(expectedMedicalNoteLinkedList));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        expectedModel.accessPatient(expectedTargetPatient);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        expectedModel.setShouldLoadMedicalNotes(false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertCommandSuccess(editNoteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void execute_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Patient targetPatient \u003d model.getFilteredPatientList().get(0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        model.accessPatient(targetPatient);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        model.setActiveUser(Optional.of(new Doctor(new Name(\"John\"), new Mcr(\"MP2819J\"))));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        EditNoteCommand.EditNoteDescriptor descriptor \u003d new EditNoteCommand.EditNoteDescriptor();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        descriptor.setContent(new Content(\"Patient has high fever.\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        EditNoteCommand editNoteCommand \u003d new EditNoteCommand(INDEX_SECOND, descriptor);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        MedicalNote editedNote \u003d new MedicalNote(new Date(\"19-02-2020\", true),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                new Doctor(new Name(\"John\"), new Mcr(\"MP2819J\")),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                new Content(\"Patient has high fever.\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        String expectedMessage \u003d String.format(EditNoteCommand.MESSAGE_EDIT_NOTE_SUCCESS, editedNote);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new MediBook(model.getMediBook()), new UserPrefs());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        expectedModel.setActiveUser(Optional.of(new Doctor(new Name(\"John\"), new Mcr(\"MP2819J\"))));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Patient expectedTargetPatient \u003d expectedModel.getFilteredPatientList().get(0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        expectedTargetPatient \u003d new PatientBuilder(expectedTargetPatient).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        LinkedList\u003cMedicalNote\u003e expectedMedicalNoteLinkedList \u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                new LinkedList\u003c\u003e(Arrays.asList(editedNote, ALICE_MEDICAL_NOTE_2));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        expectedTargetPatient.setMedicalNoteList(new MedicalNoteList(expectedMedicalNoteLinkedList));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        expectedModel.accessPatient(expectedTargetPatient);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        expectedModel.setShouldLoadMedicalNotes(false);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertCommandSuccess(editNoteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void execute_noFieldSpecified_success() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Patient targetPatient \u003d model.getFilteredPatientList().get(0);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        model.accessPatient(targetPatient);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        model.setActiveUser(Optional.of(new Doctor(new Name(\"John\"), new Mcr(\"MP2819J\"))));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        EditNoteCommand.EditNoteDescriptor descriptor \u003d new EditNoteCommand.EditNoteDescriptor();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        EditNoteCommand editNoteCommand \u003d new EditNoteCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        MedicalNote editedNote \u003d ALICE_MEDICAL_NOTE_2;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        String expectedMessage \u003d String.format(EditNoteCommand.MESSAGE_EDIT_NOTE_SUCCESS, editedNote);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new MediBook(model.getMediBook()), new UserPrefs());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        expectedModel.setActiveUser(Optional.of(new Doctor(new Name(\"John\"), new Mcr(\"MP2819J\"))));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Patient expectedTargetPatient \u003d expectedModel.getFilteredPatientList().get(0);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        expectedTargetPatient \u003d new PatientBuilder(expectedTargetPatient).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        LinkedList\u003cMedicalNote\u003e expectedMedicalNoteLinkedList \u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                new LinkedList\u003c\u003e(Arrays.asList(editedNote, ALICE_MEDICAL_NOTE_1));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        expectedTargetPatient.setMedicalNoteList(new MedicalNoteList(expectedMedicalNoteLinkedList));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        expectedModel.accessPatient(expectedTargetPatient);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        expectedModel.setShouldLoadMedicalNotes(false);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertCommandSuccess(editNoteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void execute_duplicateMedicalNote_failure() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Patient targetPatient \u003d model.getFilteredPatientList().get(0);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        model.accessPatient(targetPatient);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        model.setActiveUser(Optional.of(new Doctor(new Name(\"John\"), new Mcr(\"MP2819J\"))));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        EditNoteCommand.EditNoteDescriptor descriptor \u003d new EditNoteCommand.EditNoteDescriptor();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        descriptor.setDate(new Date(\"25-08-2020\", true));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        descriptor.setContent(new Content(\"Patient is bad.\"));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        EditNoteCommand editNoteCommand \u003d new EditNoteCommand(INDEX_SECOND, descriptor);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertCommandFailure(editNoteCommand, model, EditNoteCommand.MESSAGE_DUPLICATE_NOTE);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void execute_notDoctorAccount_throwsCommandException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Patient targetPatient \u003d model.getFilteredPatientList().get(0);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        model.accessPatient(targetPatient);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        EditNoteCommand.EditNoteDescriptor descriptor \u003d new EditNoteCommand.EditNoteDescriptor();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        descriptor.setDate(new Date(\"12-02-2020\", true));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        descriptor.setContent(new Content(\"Patient is good.\"));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        EditNoteCommand editNoteCommand \u003d new EditNoteCommand(INDEX_SECOND, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertCommandFailure(editNoteCommand, model, EditNoteCommand.MESSAGE_USER_CANNOT_EDIT);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void execute_wrongDoctorAccount_throwsCommandException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Patient targetPatient \u003d model.getFilteredPatientList().get(0);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        model.accessPatient(targetPatient);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        model.setActiveUser(Optional.of(new Doctor(new Name(\"Tom\"), new Mcr(\"M41259K\"))));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        EditNoteCommand.EditNoteDescriptor descriptor \u003d new EditNoteCommand.EditNoteDescriptor();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        descriptor.setDate(new Date(\"12-02-2020\", true));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        descriptor.setContent(new Content(\"Patient is good.\"));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        EditNoteCommand editNoteCommand \u003d new EditNoteCommand(INDEX_SECOND, descriptor);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertCommandFailure(editNoteCommand, model, EditNoteCommand.MESSAGE_CANNOT_EDIT_OTHER_DOCTOR_NOTES);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void execute_invalidMedicalNoteIndex_failure() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Patient targetPatient \u003d model.getFilteredPatientList().get(0);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        model.accessPatient(targetPatient);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(ALICE_NUM_OF_MEDICAL_NOTES + 1);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        EditNoteCommand.EditNoteDescriptor descriptor \u003d new EditNoteCommand.EditNoteDescriptor();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        descriptor.setDate(new Date(\"25-08-2020\", true));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        EditNoteCommand editNoteCommand \u003d new EditNoteCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertCommandFailure(editNoteCommand, model, Messages.MESSAGE_INVALID_NOTE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        EditNoteCommand.EditNoteDescriptor descriptor \u003d new EditNoteCommand.EditNoteDescriptor();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        descriptor.setDate(new Date(\"25-08-2020\", true));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        final EditNoteCommand standardCommand \u003d new EditNoteCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        EditNoteCommand.EditNoteDescriptor descriptor2 \u003d new EditNoteCommand.EditNoteDescriptor();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        descriptor2.setDate(new Date(\"25-08-2020\", true));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        EditNoteCommand commandWithSameValues \u003d new EditNoteCommand(INDEX_FIRST, descriptor2);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(standardCommand.equals(new EditNoteCommand(INDEX_SECOND, descriptor)));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        EditNoteCommand.EditNoteDescriptor descriptor3 \u003d new EditNoteCommand.EditNoteDescriptor();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        descriptor.setDate(new Date(\"12-08-2020\", true));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(standardCommand.equals(new EditNoteCommand(INDEX_FIRST, descriptor3)));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 181,
      "PrestonTYR": 42
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/commands/EditPatientDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_ALLERGY_SHELLFISH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_BLOOD_TYPE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_CONDITION_BACK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_DOB_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_HEIGHT_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_IC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_TREATMENT_PHYSIOTHERAPY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_WEIGHT_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.EditCommand.EditPatientDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.testutil.EditPatientDescriptorBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public class EditPatientDescriptorTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        EditPatientDescriptor descriptorWithSameValues \u003d new EditCommand.EditPatientDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // different ic -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        EditCommand.EditPatientDescriptor editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                .withIc(VALID_IC_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // different date of birth -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withDateOfBirth(VALID_DOB_BOB).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // different height -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withHeight(VALID_HEIGHT_BOB).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // different weight -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withWeight(VALID_WEIGHT_BOB).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // different blood type -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withBloodType(VALID_BLOOD_TYPE_BOB).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // different allergies -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withAllergies(VALID_ALLERGY_SHELLFISH).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // different conditions -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withConditions(VALID_CONDITION_BACK).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // different treatments -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withTreatments(VALID_TREATMENT_PHYSIOTHERAPY).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 3,
      "wang-jun-hao": 3,
      "divakarmal": 30,
      "foojingyi": 16,
      "PrestonTYR": 3,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 5,
      "PrestonTYR": 2,
      "-": 14
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.core.Messages.MESSAGE_PATIENT_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_IC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.BENSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.CARL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.ELLE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.FIONA;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.getTypicalMediBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.FieldContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalMediBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalMediBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FieldContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                new FieldContainsKeywordsPredicate(Collections.singletonList(\"first\"), PREFIX_DATE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FieldContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new FieldContainsKeywordsPredicate(Collections.singletonList(\"second\"), PREFIX_IC);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void execute_zeroKeywords_noPatientFound() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PATIENT_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, false, false, false, true);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FieldContainsKeywordsPredicate predicate \u003d prepareNamePredicate(\" \");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        expectedModel.updateFilteredPatientList(predicate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertCommandSuccess(command, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPatientList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void execute_multipleKeywordsSingleField_multiplePatientsFound() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // name field"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PATIENT_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, false, false, false, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FieldContainsKeywordsPredicate predicate \u003d prepareNamePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        expectedModel.updateFilteredPatientList(predicate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertCommandSuccess(command, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPatientList());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // ic field"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        expectedMessage \u003d String.format(MESSAGE_PATIENT_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        expectedCommandResult \u003d new CommandResult(expectedMessage, false, false, false, true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d prepareIcPredicate(\"S9234567A F7654321Q\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        expectedModel.updateFilteredPatientList(predicate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertCommandSuccess(command, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(Arrays.asList(BENSON, ELLE), model.getFilteredPatientList());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void execute_multipleKeywordsMultipleFields_multiplePatientsFound() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // name field"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PATIENT_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, false, false, false, true);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FieldContainsKeywordsPredicate predicate1 \u003d prepareNamePredicate(\"Kurz Elle Kunz Pauline\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FieldContainsKeywordsPredicate predicate2 \u003d prepareIcPredicate(\"S\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FieldContainsKeywordsPredicate predicate3 \u003d prepareHeightPredicate(\"162 174\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FindCommand command \u003d new FindCommand(Arrays.asList(predicate1, predicate2, predicate3));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        expectedModel.updateFilteredPatientList(predicate1.and(predicate2).and(predicate3));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertCommandSuccess(command, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, CARL), model.getFilteredPatientList());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Parses {@code userInput} into a {@code FieldContainsKeywordsPredicate} for the height field."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private FieldContainsKeywordsPredicate prepareHeightPredicate(String userInput) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return new FieldContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")), PREFIX_HEIGHT);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Parses {@code userInput} into a {@code FieldContainsKeywordsPredicate} for the name field."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private FieldContainsKeywordsPredicate prepareNamePredicate(String userInput) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return new FieldContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")), PREFIX_NAME);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Parses {@code userInput} into a {@code FieldContainsKeywordsPredicate} for the ic field."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private FieldContainsKeywordsPredicate prepareIcPredicate(String userInput) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return new FieldContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")), PREFIX_IC);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 43,
      "wang-jun-hao": 2,
      "divakarmal": 26,
      "PrestonTYR": 8,
      "-": 50
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false, false, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 5,
      "PrestonTYR": 1,
      "-": 14
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.showPatientAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.getTypicalMediBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        model \u003d new ModelManager(getTypicalMediBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getMediBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        expectedModel.resetAccessedPatient();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(String.format(ListCommand.MESSAGE_SUCCESS),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                false, false, false, true);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        expectedModel.resetAccessedPatient();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(String.format(ListCommand.MESSAGE_SUCCESS),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                false, false, false, true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 2,
      "divakarmal": 9,
      "PrestonTYR": 8,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/parser/AccessCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import static seedu.medibook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import static seedu.medibook.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import static seedu.medibook.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.logic.commands.AccessCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "public class AccessCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private AccessCommandParser parser \u003d new AccessCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void parse_validArgs_returnsAccessCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertParseSuccess(parser, \"1\", new AccessCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, AccessCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 2,
      "PrestonTYR": 23
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.ALLERGY_DESC_PENICILLIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.ALLERGY_DESC_SHELLFISH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.BLOOD_TYPE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.BLOOD_TYPE_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.CONDITION_DESC_BACK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.CONDITION_DESC_DIABETES;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.DOB_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.DOB_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.HEIGHT_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.HEIGHT_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.IC_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.IC_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.INVALID_ALLERGY_DESC;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.INVALID_BLOOD_TYPE_DESC;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.INVALID_CONDITION_DESC;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.INVALID_DOB_DESC;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.INVALID_HEIGHT_DESC;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.INVALID_IC_DESC;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.INVALID_TREATMENT_DESC;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.INVALID_WEIGHT_DESC;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.TREATMENT_DESC_PARACETAMOL;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.TREATMENT_DESC_PHYSIOTHERAPY;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_ALLERGY_PENICILLIN;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_ALLERGY_SHELLFISH;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_CONDITION_BACK;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_CONDITION_DIABETES;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_DOB_BOB;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_IC_BOB;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_TREATMENT_PARACETAMOL;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_TREATMENT_PHYSIOTHERAPY;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.WEIGHT_DESC_AMY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.WEIGHT_DESC_BOB;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.BOB;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.commonfields.Name;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicaldetail.Tag;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Address;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.BloodType;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.DateOfBirth;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Email;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Height;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Ic;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Phone;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Weight;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        Patient expectedPatient \u003d new PatientBuilder(BOB).withAllergies(VALID_ALLERGY_PENICILLIN)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withConditions(VALID_CONDITION_BACK).withTreatments(VALID_TREATMENT_PARACETAMOL).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + IC_DESC_BOB + NAME_DESC_BOB + DOB_DESC_BOB"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                        + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                        + BLOOD_TYPE_DESC_BOB + ALLERGY_DESC_PENICILLIN + CONDITION_DESC_BACK"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                        + TREATMENT_DESC_PARACETAMOL,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // multiple ics - last ic accepted"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseSuccess(parser, IC_DESC_AMY + IC_DESC_BOB + NAME_DESC_BOB + DOB_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                        + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                        + BLOOD_TYPE_DESC_BOB + ALLERGY_DESC_PENICILLIN + CONDITION_DESC_BACK"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                        + TREATMENT_DESC_PARACETAMOL,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseSuccess(parser, IC_DESC_BOB + NAME_DESC_AMY + NAME_DESC_BOB + DOB_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                        + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                        + BLOOD_TYPE_DESC_BOB + ALLERGY_DESC_PENICILLIN + CONDITION_DESC_BACK"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                        + TREATMENT_DESC_PARACETAMOL,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // multiple dates of birth - last date of birth accepted"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseSuccess(parser, IC_DESC_BOB + NAME_DESC_BOB + DOB_DESC_AMY + DOB_DESC_BOB"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                        + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                        + BLOOD_TYPE_DESC_BOB + ALLERGY_DESC_PENICILLIN + CONDITION_DESC_BACK"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                        + TREATMENT_DESC_PARACETAMOL,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseSuccess(parser, IC_DESC_BOB + NAME_DESC_BOB + DOB_DESC_BOB + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                        + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                        + BLOOD_TYPE_DESC_BOB + ALLERGY_DESC_PENICILLIN + CONDITION_DESC_BACK"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                        + TREATMENT_DESC_PARACETAMOL,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseSuccess(parser, IC_DESC_BOB + NAME_DESC_BOB + DOB_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                        + EMAIL_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                        + BLOOD_TYPE_DESC_BOB + ALLERGY_DESC_PENICILLIN + CONDITION_DESC_BACK"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                        + TREATMENT_DESC_PARACETAMOL,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseSuccess(parser, IC_DESC_BOB + NAME_DESC_BOB + DOB_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                        + EMAIL_DESC_BOB + ADDRESS_DESC_AMY + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                        + BLOOD_TYPE_DESC_BOB + ALLERGY_DESC_PENICILLIN + CONDITION_DESC_BACK"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                        + TREATMENT_DESC_PARACETAMOL,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // multiple heights - last height accepted"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseSuccess(parser, IC_DESC_BOB + NAME_DESC_BOB + DOB_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                        + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + HEIGHT_DESC_AMY + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                        + BLOOD_TYPE_DESC_BOB + ALLERGY_DESC_PENICILLIN + CONDITION_DESC_BACK"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                        + TREATMENT_DESC_PARACETAMOL,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // multiple weights - last weight accepted"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseSuccess(parser, IC_DESC_BOB + NAME_DESC_BOB + DOB_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                        + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_AMY + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                        + BLOOD_TYPE_DESC_BOB + ALLERGY_DESC_PENICILLIN + CONDITION_DESC_BACK"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                        + TREATMENT_DESC_PARACETAMOL,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // multiple blood type - last blood type accepted"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertParseSuccess(parser, IC_DESC_BOB + NAME_DESC_BOB + DOB_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                        + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                        + BLOOD_TYPE_DESC_AMY + BLOOD_TYPE_DESC_BOB + ALLERGY_DESC_PENICILLIN + CONDITION_DESC_BACK"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                        + TREATMENT_DESC_PARACETAMOL,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // multiple allergies - all accepted"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        Patient expectedPatientMultipleAllergies \u003d new PatientBuilder(BOB)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .withAllergies(VALID_ALLERGY_PENICILLIN, VALID_ALLERGY_SHELLFISH)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .withConditions(VALID_CONDITION_BACK)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .withTreatments(VALID_TREATMENT_PARACETAMOL).build();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseSuccess(parser, IC_DESC_BOB + NAME_DESC_BOB + DOB_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + BLOOD_TYPE_DESC_BOB + ALLERGY_DESC_PENICILLIN + ALLERGY_DESC_SHELLFISH + CONDITION_DESC_BACK"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + TREATMENT_DESC_PARACETAMOL,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            new AddCommand(expectedPatientMultipleAllergies));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // multiple conditions - all accepted"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        Patient expectedPatientMultipleConditions \u003d new PatientBuilder(BOB)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withAllergies(VALID_ALLERGY_PENICILLIN)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withConditions(VALID_CONDITION_BACK, VALID_CONDITION_DIABETES)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withTreatments(VALID_TREATMENT_PARACETAMOL).build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseSuccess(parser, IC_DESC_BOB + NAME_DESC_BOB + DOB_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + BLOOD_TYPE_DESC_BOB + ALLERGY_DESC_PENICILLIN + CONDITION_DESC_BACK + CONDITION_DESC_DIABETES"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + TREATMENT_DESC_PARACETAMOL,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            new AddCommand(expectedPatientMultipleConditions));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // multiple treatments - all accepted"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        Patient expectedPatientMultipleTreatments \u003d new PatientBuilder(BOB)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withAllergies(VALID_ALLERGY_PENICILLIN)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withConditions(VALID_CONDITION_BACK)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withTreatments(VALID_TREATMENT_PARACETAMOL, VALID_TREATMENT_PHYSIOTHERAPY).build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseSuccess(parser, IC_DESC_BOB + NAME_DESC_BOB + DOB_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                        + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                        + BLOOD_TYPE_DESC_BOB + ALLERGY_DESC_PENICILLIN + CONDITION_DESC_BACK"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                        + TREATMENT_DESC_PHYSIOTHERAPY + TREATMENT_DESC_PARACETAMOL,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            new AddCommand(expectedPatientMultipleTreatments));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // zero allergies"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        Patient expectedPatient \u003d new PatientBuilder(AMY).withAllergies().build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseSuccess(parser, IC_DESC_AMY + NAME_DESC_AMY + DOB_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + ADDRESS_DESC_AMY + HEIGHT_DESC_AMY + WEIGHT_DESC_AMY + BLOOD_TYPE_DESC_AMY + CONDITION_DESC_DIABETES"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + TREATMENT_DESC_PARACETAMOL,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // zero conditions"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        expectedPatient \u003d new PatientBuilder(AMY).withConditions().build();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseSuccess(parser, IC_DESC_AMY + NAME_DESC_AMY + DOB_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + ADDRESS_DESC_AMY + HEIGHT_DESC_AMY + WEIGHT_DESC_AMY + BLOOD_TYPE_DESC_AMY + ALLERGY_DESC_PENICILLIN"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + TREATMENT_DESC_PARACETAMOL,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // zero treatments"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        expectedPatient \u003d new PatientBuilder(AMY).withTreatments().build();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseSuccess(parser, IC_DESC_AMY + NAME_DESC_AMY + DOB_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + ADDRESS_DESC_AMY + HEIGHT_DESC_AMY + WEIGHT_DESC_AMY + BLOOD_TYPE_DESC_AMY + ALLERGY_DESC_PENICILLIN"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + CONDITION_DESC_DIABETES,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // missing email"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        expectedPatient \u003d new PatientBuilder(AMY).withEmail(\"\").build();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertParseSuccess(parser, IC_DESC_AMY + NAME_DESC_AMY + DOB_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + ADDRESS_DESC_AMY + HEIGHT_DESC_AMY + WEIGHT_DESC_AMY + BLOOD_TYPE_DESC_AMY + ALLERGY_DESC_PENICILLIN"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + CONDITION_DESC_DIABETES + TREATMENT_DESC_PARACETAMOL,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // missing address"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        expectedPatient \u003d new PatientBuilder(AMY).withAddress(\"\").build();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertParseSuccess(parser, IC_DESC_AMY + NAME_DESC_AMY + DOB_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + EMAIL_DESC_AMY + HEIGHT_DESC_AMY + WEIGHT_DESC_AMY + BLOOD_TYPE_DESC_AMY + ALLERGY_DESC_PENICILLIN"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + CONDITION_DESC_DIABETES + TREATMENT_DESC_PARACETAMOL,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // missing height"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        expectedPatient \u003d new PatientBuilder(AMY).withHeight(\"\").build();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertParseSuccess(parser, IC_DESC_AMY + NAME_DESC_AMY + DOB_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + WEIGHT_DESC_AMY + BLOOD_TYPE_DESC_AMY + ALLERGY_DESC_PENICILLIN"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + CONDITION_DESC_DIABETES + TREATMENT_DESC_PARACETAMOL,"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // missing weight"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        expectedPatient \u003d new PatientBuilder(AMY).withWeight(\"\").build();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertParseSuccess(parser, IC_DESC_AMY + NAME_DESC_AMY + DOB_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + HEIGHT_DESC_AMY + BLOOD_TYPE_DESC_AMY + ALLERGY_DESC_PENICILLIN"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + CONDITION_DESC_DIABETES + TREATMENT_DESC_PARACETAMOL,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // missing bloodType"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        expectedPatient \u003d new PatientBuilder(AMY).withBloodType(\"\").build();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertParseSuccess(parser, IC_DESC_AMY + NAME_DESC_AMY + DOB_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + HEIGHT_DESC_AMY + WEIGHT_DESC_AMY + ALLERGY_DESC_PENICILLIN"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + CONDITION_DESC_DIABETES + TREATMENT_DESC_PARACETAMOL,"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // missing ic prefix"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseFailure(parser, VALID_IC_BOB + NAME_DESC_BOB + DOB_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + BLOOD_TYPE_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseFailure(parser, IC_DESC_BOB + VALID_NAME_BOB + DOB_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + BLOOD_TYPE_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // missing date of birth prefix"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseFailure(parser, IC_DESC_BOB + NAME_DESC_BOB + VALID_DOB_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + BLOOD_TYPE_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseFailure(parser, IC_DESC_BOB + NAME_DESC_BOB + DOB_DESC_BOB + VALID_PHONE_BOB"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + BLOOD_TYPE_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // invalid ic"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseFailure(parser, INVALID_IC_DESC + NAME_DESC_BOB + DOB_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + BLOOD_TYPE_DESC_BOB + ALLERGY_DESC_PENICILLIN + ALLERGY_DESC_SHELLFISH + CONDITION_DESC_BACK"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + CONDITION_DESC_DIABETES + TREATMENT_DESC_PHYSIOTHERAPY + TREATMENT_DESC_PARACETAMOL,"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                Ic.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseFailure(parser, IC_DESC_BOB + INVALID_NAME_DESC + DOB_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + BLOOD_TYPE_DESC_BOB + ALLERGY_DESC_PENICILLIN + ALLERGY_DESC_SHELLFISH + CONDITION_DESC_BACK"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + CONDITION_DESC_DIABETES + TREATMENT_DESC_PHYSIOTHERAPY + TREATMENT_DESC_PARACETAMOL,"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // invalid date of birth"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseFailure(parser, IC_DESC_BOB + NAME_DESC_BOB + INVALID_DOB_DESC + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + BLOOD_TYPE_DESC_BOB + ALLERGY_DESC_PENICILLIN + ALLERGY_DESC_SHELLFISH + CONDITION_DESC_BACK"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + CONDITION_DESC_DIABETES + TREATMENT_DESC_PHYSIOTHERAPY + TREATMENT_DESC_PARACETAMOL,"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                DateOfBirth.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseFailure(parser, IC_DESC_BOB + NAME_DESC_BOB + DOB_DESC_BOB + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + BLOOD_TYPE_DESC_BOB + ALLERGY_DESC_PENICILLIN + ALLERGY_DESC_SHELLFISH + CONDITION_DESC_BACK"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + CONDITION_DESC_DIABETES + TREATMENT_DESC_PHYSIOTHERAPY + TREATMENT_DESC_PARACETAMOL,"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseFailure(parser, IC_DESC_BOB + NAME_DESC_BOB + DOB_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + BLOOD_TYPE_DESC_BOB + ALLERGY_DESC_PENICILLIN + ALLERGY_DESC_SHELLFISH + CONDITION_DESC_BACK"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + CONDITION_DESC_DIABETES + TREATMENT_DESC_PHYSIOTHERAPY + TREATMENT_DESC_PARACETAMOL,"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseFailure(parser, IC_DESC_BOB + NAME_DESC_BOB + DOB_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + BLOOD_TYPE_DESC_BOB + ALLERGY_DESC_PENICILLIN + ALLERGY_DESC_SHELLFISH + CONDITION_DESC_BACK"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + CONDITION_DESC_DIABETES + TREATMENT_DESC_PHYSIOTHERAPY + TREATMENT_DESC_PARACETAMOL,"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // invalid height"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseFailure(parser, IC_DESC_BOB + NAME_DESC_BOB + DOB_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + INVALID_HEIGHT_DESC + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + BLOOD_TYPE_DESC_BOB + ALLERGY_DESC_PENICILLIN + ALLERGY_DESC_SHELLFISH + CONDITION_DESC_BACK"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + CONDITION_DESC_DIABETES + TREATMENT_DESC_PHYSIOTHERAPY + TREATMENT_DESC_PARACETAMOL,"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                Height.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // invalid weight"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseFailure(parser, IC_DESC_BOB + NAME_DESC_BOB + DOB_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + INVALID_WEIGHT_DESC"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + BLOOD_TYPE_DESC_BOB + ALLERGY_DESC_PENICILLIN + ALLERGY_DESC_SHELLFISH + CONDITION_DESC_BACK"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + CONDITION_DESC_DIABETES + TREATMENT_DESC_PHYSIOTHERAPY + TREATMENT_DESC_PARACETAMOL,"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                Weight.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // invalid blood type"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertParseFailure(parser, IC_DESC_BOB + NAME_DESC_BOB + DOB_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + INVALID_BLOOD_TYPE_DESC + ALLERGY_DESC_PENICILLIN + ALLERGY_DESC_SHELLFISH + CONDITION_DESC_BACK"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + CONDITION_DESC_DIABETES + TREATMENT_DESC_PHYSIOTHERAPY + TREATMENT_DESC_PARACETAMOL,"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                BloodType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // invalid allergy"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseFailure(parser, IC_DESC_BOB + NAME_DESC_BOB + DOB_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + BLOOD_TYPE_DESC_BOB + INVALID_ALLERGY_DESC + ALLERGY_DESC_SHELLFISH + CONDITION_DESC_BACK"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + CONDITION_DESC_DIABETES + TREATMENT_DESC_PHYSIOTHERAPY + TREATMENT_DESC_PARACETAMOL,"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // invalid condition"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseFailure(parser, IC_DESC_BOB + NAME_DESC_BOB + DOB_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + BLOOD_TYPE_DESC_BOB + ALLERGY_DESC_PENICILLIN + ALLERGY_DESC_SHELLFISH + INVALID_CONDITION_DESC"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + CONDITION_DESC_DIABETES + TREATMENT_DESC_PHYSIOTHERAPY + TREATMENT_DESC_PARACETAMOL,"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // invalid treatment"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseFailure(parser, IC_DESC_BOB + NAME_DESC_BOB + DOB_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + BLOOD_TYPE_DESC_BOB + ALLERGY_DESC_PENICILLIN + ALLERGY_DESC_SHELLFISH + CONDITION_DESC_BACK"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + CONDITION_DESC_DIABETES + INVALID_TREATMENT_DESC + TREATMENT_DESC_PARACETAMOL,"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseFailure(parser, IC_DESC_BOB + INVALID_NAME_DESC + DOB_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + BLOOD_TYPE_DESC_BOB,"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + IC_DESC_BOB + NAME_DESC_BOB + DOB_DESC_BOB"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + BLOOD_TYPE_DESC_BOB + ALLERGY_DESC_PENICILLIN + ALLERGY_DESC_SHELLFISH + CONDITION_DESC_BACK"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + CONDITION_DESC_DIABETES + TREATMENT_DESC_PHYSIOTHERAPY + TREATMENT_DESC_PARACETAMOL,"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 4,
      "wang-jun-hao": 13,
      "divakarmal": 68,
      "foojingyi": 177,
      "PrestonTYR": 56,
      "-": 50
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/parser/AddNoteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.INVALID_NOTE_DATE_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.NOTE_CONTENT_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.NOTE_FUTURE_DATE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.NOTE_NON_FUTURE_DATE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_CONTENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_NON_FUTURE_DATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.logic.commands.AddNoteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.commonfields.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.medicalnote.Content;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "class AddNoteCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private final AddNoteCommandParser parser \u003d new AddNoteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void parse_optionalNonFutureDateSpecified_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                NOTE_NON_FUTURE_DATE_DESC + NOTE_CONTENT_DESC,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                new AddNoteCommand(new Date(VALID_NON_FUTURE_DATE, true),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                        new Content(VALID_CONTENT)));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void parse_optionalFutureDateSpecified_failure() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                NOTE_FUTURE_DATE_DESC + NOTE_CONTENT_DESC,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                Date.MESSAGE_NON_FUTURE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void parse_compulsoryFieldsMissing_failure() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // missing content field"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertParseFailure(parser, NOTE_NON_FUTURE_DATE_DESC,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddNoteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void parse_optionalDateMissing_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertParseSuccess(parser, NOTE_CONTENT_DESC,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                new AddNoteCommand(new Date(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                        new Content(VALID_CONTENT)));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                INVALID_NOTE_DATE_DESC + NOTE_CONTENT_DESC,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 50,
      "PrestonTYR": 9
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: testing for prefixes not specified as a prefix */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 2,
      "divakarmal": 5,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/parser/DeleteNoteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.logic.commands.DeleteNoteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "public class DeleteNoteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private final DeleteNoteCommandParser parser \u003d new DeleteNoteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void parse_validArgs_returnsDeleteNoteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteNoteCommand(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteNoteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertParseFailure(parser, \"-1\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteNoteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 35
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.ALLERGY_DESC_PENICILLIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.ALLERGY_DESC_SHELLFISH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.BLOOD_TYPE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.BLOOD_TYPE_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.CONDITION_DESC_BACK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.CONDITION_DESC_DIABETES;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.DOB_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.DOB_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.HEIGHT_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.HEIGHT_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.IC_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.IC_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.INVALID_ALLERGY_DESC;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.INVALID_BLOOD_TYPE_DESC;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.INVALID_CONDITION_DESC;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.INVALID_DOB_DESC;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.INVALID_HEIGHT_DESC;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.INVALID_IC_DESC;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.INVALID_TREATMENT_DESC;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.INVALID_WEIGHT_DESC;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.TREATMENT_DESC_PARACETAMOL;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.TREATMENT_DESC_PHYSIOTHERAPY;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_ALLERGY_PENICILLIN;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_ALLERGY_SHELLFISH;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_BLOOD_TYPE_AMY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_BLOOD_TYPE_BOB;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_CONDITION_BACK;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_CONDITION_DIABETES;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_DOB_AMY;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_DOB_BOB;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_HEIGHT_AMY;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_HEIGHT_BOB;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_IC_AMY;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_IC_BOB;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_TREATMENT_PARACETAMOL;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_TREATMENT_PHYSIOTHERAPY;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_WEIGHT_AMY;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_WEIGHT_BOB;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.WEIGHT_DESC_AMY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.WEIGHT_DESC_BOB;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_ALLERGY;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_CONDITION;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_TREATMENT;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.index.Index;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.EditCommand.EditPatientDescriptor;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.commonfields.Name;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicaldetail.Tag;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Address;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.BloodType;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.DateOfBirth;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Email;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Height;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Ic;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Phone;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Weight;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.testutil.EditPatientDescriptorBuilder;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private static final String ALLERGY_EMPTY \u003d \" \" + PREFIX_ALLERGY;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private static final String CONDITION_EMPTY \u003d \" \" + PREFIX_CONDITION;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private static final String TREATMENT_EMPTY \u003d \" \" + PREFIX_TREATMENT;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertParseFailure(parser, \"1 l/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_IC_DESC, Ic.MESSAGE_CONSTRAINTS); // invalid ic"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // invalid date of birth"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DOB_DESC, DateOfBirth.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_HEIGHT_DESC, Height.MESSAGE_CONSTRAINTS); // invalid height"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_WEIGHT_DESC, Weight.MESSAGE_CONSTRAINTS); // invalid weight"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // invalid blood type"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_BLOOD_TYPE_DESC, BloodType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ALLERGY_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid allergy"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_CONDITION_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid condition"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TREATMENT_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid treatment"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // while parsing {@code PREFIX_ALLERGY} alone will reset the allergies of the {@code Patient} being edited,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // parsing it together with a valid allergy results in error"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseFailure(parser, \"1\" + ALLERGY_DESC_PENICILLIN + ALLERGY_DESC_SHELLFISH"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + ALLERGY_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseFailure(parser, \"1\" + ALLERGY_DESC_PENICILLIN + ALLERGY_EMPTY"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + ALLERGY_DESC_SHELLFISH, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseFailure(parser, \"1\" + ALLERGY_EMPTY + ALLERGY_DESC_PENICILLIN"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + ALLERGY_DESC_SHELLFISH, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // while parsing {@code PREFIX_CONDITION} alone will reset the conditions of the {@code Patient} being edited,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // parsing it together with a valid condition results in error"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseFailure(parser, \"1\" + CONDITION_DESC_BACK + CONDITION_DESC_DIABETES"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + CONDITION_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseFailure(parser, \"1\" + CONDITION_DESC_BACK + CONDITION_EMPTY"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + CONDITION_DESC_DIABETES, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseFailure(parser, \"1\" + CONDITION_EMPTY + CONDITION_DESC_BACK"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + CONDITION_DESC_DIABETES, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // while parsing {@code PREFIX_TREATMENT} alone will reset the treatments of the {@code Patient} being edited,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // parsing it together with a valid treatment results in error"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseFailure(parser, \"1\" + TREATMENT_DESC_PARACETAMOL + TREATMENT_DESC_PHYSIOTHERAPY"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + TREATMENT_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseFailure(parser, \"1\" + TREATMENT_DESC_PARACETAMOL + TREATMENT_EMPTY"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + TREATMENT_DESC_PHYSIOTHERAPY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseFailure(parser, \"1\" + TREATMENT_EMPTY + TREATMENT_DESC_PARACETAMOL"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + TREATMENT_DESC_PHYSIOTHERAPY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                        + VALID_HEIGHT_AMY,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + IC_DESC_AMY + PHONE_DESC_BOB + TREATMENT_DESC_PHYSIOTHERAPY"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + DOB_DESC_AMY + EMAIL_DESC_AMY + ALLERGY_DESC_SHELLFISH + ADDRESS_DESC_AMY + HEIGHT_DESC_AMY"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + WEIGHT_DESC_AMY + CONDITION_DESC_BACK + BLOOD_TYPE_DESC_AMY + NAME_DESC_AMY + ALLERGY_DESC_PENICILLIN"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + CONDITION_DESC_DIABETES + TREATMENT_DESC_PARACETAMOL;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withIc(VALID_IC_AMY)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withName(VALID_NAME_AMY).withDateOfBirth(VALID_DOB_AMY).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withHeight(VALID_HEIGHT_AMY)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                .withWeight(VALID_WEIGHT_AMY).withBloodType(VALID_BLOOD_TYPE_AMY)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withAllergies(VALID_ALLERGY_SHELLFISH, VALID_ALLERGY_PENICILLIN)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withConditions(VALID_CONDITION_BACK, VALID_CONDITION_DIABETES)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withTreatments(VALID_TREATMENT_PHYSIOTHERAPY, VALID_TREATMENT_PARACETAMOL).build();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // ic"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + IC_DESC_AMY;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withIc(VALID_IC_AMY).build();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // date of birth"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DOB_DESC_AMY;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withDateOfBirth(VALID_DOB_AMY).build();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // height"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + HEIGHT_DESC_AMY;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withHeight(VALID_HEIGHT_AMY).build();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // weight"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + WEIGHT_DESC_AMY;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withWeight(VALID_WEIGHT_AMY).build();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // blood type"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + BLOOD_TYPE_DESC_AMY;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withBloodType(VALID_BLOOD_TYPE_AMY).build();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // allergies"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ALLERGY_DESC_PENICILLIN;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withAllergies(VALID_ALLERGY_PENICILLIN).build();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // conditions"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CONDITION_DESC_BACK;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withConditions(VALID_CONDITION_BACK).build();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // treatments"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TREATMENT_DESC_PARACETAMOL;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withTreatments(VALID_TREATMENT_PARACETAMOL).build();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + IC_DESC_AMY + DOB_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + EMAIL_DESC_AMY + HEIGHT_DESC_AMY + WEIGHT_DESC_AMY + BLOOD_TYPE_DESC_AMY + TREATMENT_DESC_PARACETAMOL"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TREATMENT_DESC_PARACETAMOL + IC_DESC_BOB"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + PHONE_DESC_BOB + CONDITION_DESC_BACK + ALLERGY_DESC_SHELLFISH + CONDITION_DESC_DIABETES"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + DOB_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                + BLOOD_TYPE_DESC_BOB + ALLERGY_DESC_SHELLFISH + TREATMENT_DESC_PHYSIOTHERAPY + ALLERGY_DESC_PENICILLIN;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withIc(VALID_IC_BOB)"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withDateOfBirth(VALID_DOB_BOB).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).withHeight(VALID_HEIGHT_BOB).withWeight(VALID_WEIGHT_BOB)"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withBloodType(VALID_BLOOD_TYPE_BOB).withAllergies(VALID_ALLERGY_PENICILLIN, VALID_ALLERGY_SHELLFISH)"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withConditions(VALID_CONDITION_BACK, VALID_CONDITION_DIABETES)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withTreatments(VALID_TREATMENT_PARACETAMOL, VALID_TREATMENT_PHYSIOTHERAPY).build();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DOB_DESC_BOB + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                + PHONE_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB + BLOOD_TYPE_DESC_BOB;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withDateOfBirth(VALID_DOB_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withHeight(VALID_HEIGHT_BOB)"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                .withWeight(VALID_WEIGHT_BOB).withBloodType(VALID_BLOOD_TYPE_BOB).build();"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void parse_resetMedicalDetails_success() {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // allergies"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + ALLERGY_EMPTY;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withAllergies().build();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // conditions"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CONDITION_EMPTY;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withConditions().build();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // treatments"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TREATMENT_EMPTY;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withTreatments().build();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 9,
      "wang-jun-hao": 17,
      "divakarmal": 83,
      "foojingyi": 109,
      "PrestonTYR": 12,
      "-": 124
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/parser/EditNoteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.INVALID_NOTE_CONTENT_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.INVALID_NOTE_DATE_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.NOTE_CONTENT_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.NOTE_NON_FUTURE_DATE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.logic.commands.EditNoteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.commonfields.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.medicalnote.Content;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "public class EditNoteCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditNoteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private final EditNoteCommandParser parser \u003d new EditNoteCommandParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertParseFailure(parser, NOTE_CONTENT_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertParseFailure(parser, \"1\", EditNoteCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NOTE_NON_FUTURE_DATE_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertParseFailure(parser, \"0\" + NOTE_NON_FUTURE_DATE_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertParseFailure(parser, \"1 l/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NOTE_DATE_DESC, Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // invalid content"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NOTE_CONTENT_DESC, Content.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // invalid date followed by valid content"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NOTE_DATE_DESC + NOTE_CONTENT_DESC, Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // valid date followed by invalid content"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertParseFailure(parser, \"1\" + NOTE_NON_FUTURE_DATE_DESC + INVALID_NOTE_CONTENT_DESC,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                Content.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // multiple invalid values but only the first is captured"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NOTE_DATE_DESC + INVALID_NOTE_CONTENT_DESC, Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NOTE_NON_FUTURE_DATE_DESC + NOTE_CONTENT_DESC;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        EditNoteCommand.EditNoteDescriptor descriptor \u003d new EditNoteCommand.EditNoteDescriptor();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        descriptor.setDate(new Date(\"15-10-2020\", true));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        descriptor.setContent(new Content(\"Patient is sick.\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        EditNoteCommand expectedCommand \u003d new EditNoteCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NOTE_NON_FUTURE_DATE_DESC;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        EditNoteCommand.EditNoteDescriptor descriptor \u003d new EditNoteCommand.EditNoteDescriptor();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        descriptor.setDate(new Date(\"15-10-2020\", true));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        EditNoteCommand expectedCommand \u003d new EditNoteCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // date"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NOTE_NON_FUTURE_DATE_DESC;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        EditNoteCommand.EditNoteDescriptor descriptor \u003d new EditNoteCommand.EditNoteDescriptor();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        descriptor.setDate(new Date(\"15-10-2020\", true));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        EditNoteCommand expectedCommand \u003d new EditNoteCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // content"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + NOTE_CONTENT_DESC;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        descriptor \u003d new EditNoteCommand.EditNoteDescriptor();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        descriptor.setContent(new Content(\"Patient is sick.\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        expectedCommand \u003d new EditNoteCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + \" \""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                + PREFIX_DATE + \"20-10-2008\" + NOTE_NON_FUTURE_DATE_DESC"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                + \" \" + PREFIX_CONTENT + \"Patient is bad.\" + NOTE_CONTENT_DESC;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        EditNoteCommand.EditNoteDescriptor descriptor \u003d new EditNoteCommand.EditNoteDescriptor();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        descriptor.setDate(new Date(\"15-10-2020\", true));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        descriptor.setContent(new Content(\"Patient is sick.\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        EditNoteCommand expectedCommand \u003d new EditNoteCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_NOTE_DATE_DESC + NOTE_NON_FUTURE_DATE_DESC;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        EditNoteCommand.EditNoteDescriptor descriptor \u003d new EditNoteCommand.EditNoteDescriptor();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        descriptor.setDate(new Date(\"15-10-2020\", true));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        EditNoteCommand expectedCommand \u003d new EditNoteCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INVALID_NOTE_DATE_DESC + NOTE_NON_FUTURE_DATE_DESC"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + NOTE_CONTENT_DESC;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        descriptor \u003d new EditNoteCommand.EditNoteDescriptor();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        descriptor.setDate(new Date(\"15-10-2020\", true));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        descriptor.setContent(new Content(\"Patient is sick.\"));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        expectedCommand \u003d new EditNoteCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 149,
      "PrestonTYR": 17
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_BLOOD_TYPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_IC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_WEIGHT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.FieldContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final String SINGLE_WHITESPACE \u003d \" \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] nameKeywords \u003d new String[]{ \"Alice\", \"Bob\" };"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] icKeywords \u003d new String[]{ \"T0232323I\", \"S9234567A\" };"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] dobKeywords \u003d new String[]{ \"14-07-2002\", \"01-03-1992\" };"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] phoneKeywords \u003d new String[]{ \"94351253\", \"95352563\" };"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] addressKeywords \u003d new String[]{ \"Clementi\", \"Changi\" };"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] emailKeywords \u003d new String[]{ \"foo@bar.com\", \"bar@foo.com\" };"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] heightKeywords \u003d new String[]{ \"178\", \"159\" };"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] weightKeywords \u003d new String[]{ \"70.2\", \"54.9\" };"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] bloodTypeKeywords \u003d new String[]{ \"A+\", \"B+\" };"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String nameArg \u003d generateArgument(PREFIX_NAME, nameKeywords);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String icArg \u003d generateArgument(PREFIX_IC, icKeywords);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        String dobArg \u003d generateArgument(PREFIX_DATE, dobKeywords);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String phoneArg \u003d generateArgument(PREFIX_PHONE, phoneKeywords);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String addressArg \u003d generateArgument(PREFIX_ADDRESS, addressKeywords);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String emailArg \u003d generateArgument(PREFIX_EMAIL, emailKeywords);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String heightArg \u003d generateArgument(PREFIX_HEIGHT, heightKeywords);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String weightArg \u003d generateArgument(PREFIX_WEIGHT, weightKeywords);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String bloodTypeArg \u003d generateArgument(PREFIX_BLOOD_TYPE, bloodTypeKeywords);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] nameKeywordsAlt \u003d new String[]{ \"Charlie\", \"Donald\" };"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] icKeywordsAlt \u003d new String[]{ \"G1812399T\", \"S8892300F\" };"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] dobKeywordsAlt \u003d new String[]{ \"07-08-1977\", \"19-01-1990\" };"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] phoneKeywordsAlt \u003d new String[]{ \"82314003\", \"64308920\" };"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] addressKeywordsAlt \u003d new String[]{ \"Woodlands\", \"Punggol\" };"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] emailKeywordsAlt \u003d new String[]{ \"testing@example.org\", \"exaple@testing.org\" };"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] heightKeywordsAlt \u003d new String[]{ \"171\", \"167\" };"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] weightKeywordsAlt \u003d new String[]{ \"66.6\", \"63.9\" };"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] bloodTypeKeywordsAlt \u003d new String[]{ \"AB-\", \"B-\" };"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String nameArgAlt \u003d generateArgument(PREFIX_NAME, nameKeywordsAlt);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String icArgAlt \u003d generateArgument(PREFIX_IC, icKeywordsAlt);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        String dobArgAlt \u003d generateArgument(PREFIX_DATE, dobKeywordsAlt);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String phoneArgAlt \u003d generateArgument(PREFIX_PHONE, phoneKeywordsAlt);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String addressArgAlt \u003d generateArgument(PREFIX_ADDRESS, addressKeywordsAlt);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String emailArgAlt \u003d generateArgument(PREFIX_EMAIL, emailKeywordsAlt);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String heightArgAlt \u003d generateArgument(PREFIX_HEIGHT, heightKeywordsAlt);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String weightArgAlt \u003d generateArgument(PREFIX_WEIGHT, weightKeywordsAlt);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String bloodTypeArgAlt \u003d generateArgument(PREFIX_BLOOD_TYPE, bloodTypeKeywordsAlt);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Predicate\u003cPatient\u003e namePred \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new FieldContainsKeywordsPredicate(Arrays.asList(nameKeywords), PREFIX_NAME);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Predicate\u003cPatient\u003e icPred \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new FieldContainsKeywordsPredicate(Arrays.asList(icKeywords), PREFIX_IC);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Predicate\u003cPatient\u003e dobPred \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                new FieldContainsKeywordsPredicate(Arrays.asList(dobKeywords), PREFIX_DATE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Predicate\u003cPatient\u003e phonePred \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new FieldContainsKeywordsPredicate(Arrays.asList(phoneKeywords), PREFIX_PHONE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Predicate\u003cPatient\u003e addressPred \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new FieldContainsKeywordsPredicate(Arrays.asList(addressKeywords), PREFIX_ADDRESS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Predicate\u003cPatient\u003e emailPred \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new FieldContainsKeywordsPredicate(Arrays.asList(emailKeywords), PREFIX_EMAIL);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Predicate\u003cPatient\u003e heightPred \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new FieldContainsKeywordsPredicate(Arrays.asList(heightKeywords), PREFIX_HEIGHT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Predicate\u003cPatient\u003e weightPred \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new FieldContainsKeywordsPredicate(Arrays.asList(weightKeywords), PREFIX_WEIGHT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Predicate\u003cPatient\u003e bloodTypePred \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new FieldContainsKeywordsPredicate(Arrays.asList(bloodTypeKeywords), PREFIX_BLOOD_TYPE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        List\u003cPredicate\u003cPatient\u003e\u003e predicates \u003d Arrays.asList(namePred, icPred, dobPred, phonePred, addressPred,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                emailPred, heightPred, weightPred, bloodTypePred);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FindCommand expectedFindCommand \u003d new FindCommand(predicates);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + nameArg + icArg + dobArg + phoneArg + addressArg"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                + emailArg + heightArg + weightArg + bloodTypeArg,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                expectedFindCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // calling with arguments in different order returns the same FindCommand"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertParseSuccess(parser, phoneArg + icArg + dobArg + nameArg + bloodTypeArg + emailArg"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                         + addressArg + heightArg + weightArg,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                expectedFindCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // multiple whitespaces between, before and after keywords"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String nameArgWithWhitespaces \u003d \"  \\t \" + nameArg.replaceAll(\" \", \" \\n \\t \");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String icArgWithWhitespaces \u003d \"  \" + icArg.replaceAll(\" \", \" \\n   \\r \\t \") + \"  \\t \";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String dobArgWithWhitespaces \u003d dobArg.replaceAll(\" \", \" \\n \\r   \");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String phoneArgWithWhitespaces \u003d phoneArg.replaceAll(\" \", \"  \\r  \\t  \");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertParseSuccess(parser, nameArgWithWhitespaces + icArgWithWhitespaces + dobArgWithWhitespaces"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                + phoneArgWithWhitespaces + addressArg + emailArg + heightArg + weightArg + bloodTypeArg,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                expectedFindCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertParseSuccess(parser, nameArgAlt + nameArg + icArg + dobArg + phoneArg + addressArg"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                        + emailArg + heightArg + weightArg + bloodTypeArg,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                expectedFindCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // multiple ics - last ic accepted"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertParseSuccess(parser, nameArg + icArgAlt + icArg + dobArg + phoneArg + addressArg"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                        + emailArg + heightArg + weightArg + bloodTypeArg,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                expectedFindCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // multiple dates of birth - last date of birth accepted"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertParseSuccess(parser, nameArg + icArg + dobArgAlt + dobArg + phoneArg + addressArg"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                        + emailArg + heightArg + weightArg + bloodTypeArg,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                expectedFindCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertParseSuccess(parser, nameArg + icArg + dobArg + phoneArgAlt + phoneArg + addressArg"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                        + emailArg + heightArg + weightArg + bloodTypeArg,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                expectedFindCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // multiple address - last address accepted"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertParseSuccess(parser, nameArg + icArg + dobArg + phoneArg + addressArgAlt + addressArg"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                        + emailArg + heightArg + weightArg + bloodTypeArg,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                expectedFindCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // multiple emails - last emails accepted"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertParseSuccess(parser, nameArg + icArg + dobArg + phoneArg + addressArg"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                        + emailArgAlt + emailArg + heightArg + weightArg + bloodTypeArg,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                expectedFindCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // multiple heights - last heights accepted"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertParseSuccess(parser, nameArg + icArg + dobArg + phoneArg + addressArg"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                        + emailArg + heightArgAlt + heightArg + weightArg + bloodTypeArg,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                expectedFindCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // multiple weights - last weights accepted"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertParseSuccess(parser, nameArg + icArg + dobArg + phoneArg + addressArg"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                        + emailArg + heightArg + weightArgAlt + weightArg + bloodTypeArg,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                expectedFindCommand);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // multiple blood types - last blood types accepted"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertParseSuccess(parser, nameArg + icArg + dobArg + phoneArg + addressArg"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                        + emailArg + heightArg + weightArg + bloodTypeArgAlt + bloodTypeArg,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                expectedFindCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void parse_fieldsMissing_failure() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // whitespace as argument"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertParseFailure(parser, \"       \", expectedMessage);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // no prefixes provided"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertParseFailure(parser, \"Alice\", expectedMessage);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_AMY, expectedMessage);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private String generateArgument(Prefix prefix, String... keywords) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return SINGLE_WHITESPACE + prefix + String.join(\" \", keywords);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 146,
      "wang-jun-hao": 4,
      "divakarmal": 20,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/parser/MediBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.logic.commands.AccessCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.logic.commands.AddNoteCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.logic.commands.DeleteNoteCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.logic.commands.EditNoteCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.commonfields.Date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.medicalnote.Content;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.FieldContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.testutil.EditPatientDescriptorBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.testutil.PatientUtil;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public class MediBookParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private final MediBookParser parser \u003d new MediBookParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient patient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PatientUtil.getAddCommand(patient));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertEquals(new AddCommand(patient), command);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST), command);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void parseCommand_access() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        AccessCommand command \u003d (AccessCommand) parser.parseCommand("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                AccessCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertEquals(new AccessCommand(INDEX_FIRST), command);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient patient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        EditCommand.EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder(patient).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                + INDEX_FIRST.getOneBased() + \" \" + PatientUtil.getEditPatientDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST, descriptor), command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                        + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(new FindCommand(new FieldContainsKeywordsPredicate(keywords, PREFIX_NAME)), command);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void parseCommand_addnote() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Date date \u003d new Date(\"19-02-2020\", true);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Content content \u003d new Content(\"Patient is good.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        AddNoteCommand command \u003d (AddNoteCommand) parser.parseCommand(AddNoteCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                + PREFIX_DATE + \"19-02-2020 \" + PREFIX_CONTENT + \"Patient is good.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertEquals(new AddNoteCommand(date, content), command);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void parseCommand_deletenote() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        DeleteNoteCommand command \u003d (DeleteNoteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                DeleteNoteCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertEquals(new DeleteNoteCommand(INDEX_FIRST), command);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void parseCommand_editnote() throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        EditNoteCommand.EditNoteDescriptor descriptor \u003d new EditNoteCommand.EditNoteDescriptor();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        descriptor.setDate(new Date(\"19-02-2020\", true));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        descriptor.setContent(new Content(\"Patient is good.\"));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        EditNoteCommand command \u003d (EditNoteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                EditNoteCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased() + \" \""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                        + PREFIX_DATE + \"19-02-2020 \""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                        + PREFIX_CONTENT + \"Patient is good.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertEquals(new EditNoteCommand(INDEX_FIRST, descriptor), command);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 3,
      "wang-jun-hao": 40,
      "divakarmal": 26,
      "PrestonTYR": 11,
      "-": 68
    }
  },
  {
    "path": "src/test/java/seedu/medibook/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.commonfields.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicaldetail.Allergy;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicaldetail.Condition;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicaldetail.Treatment;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Address;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.BloodType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.DateOfBirth;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Height;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Ic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Weight;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private static final String INVALID_IC \u003d \"S99999w9Q\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private static final String INVALID_DOB \u003d \"23/09/11\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final String INVALID_HEIGHT \u003d \"18o\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private static final String INVALID_WEIGHT \u003d \"20.15\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private static final String INVALID_BLOOD_TYPE \u003d \"C+\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private static final String INVALID_ALLERGY \u003d \"[];\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private static final String INVALID_CONDITION \u003d \"*^£\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private static final String INVALID_TREATMENT \u003d \"/+\u003d\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private static final String VALID_IC \u003d \"S9999999R\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private static final String VALID_DOB \u003d \"13-04-1999\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private static final String VALID_PHONE \u003d \"1234567\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final String VALID_HEIGHT \u003d \"178\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private static final String VALID_WEIGHT \u003d \"65.0\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private static final String VALID_BLOOD_TYPE \u003d \"O+\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private static final String VALID_ALLERGY_1 \u003d \"peanuts\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private static final String VALID_ALLERGY_2 \u003d \"pollen\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private static final String VALID_CONDITION_1 \u003d \"asthma\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private static final String VALID_CONDITION_2 \u003d \"ear infection\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private static final String VALID_TREATMENT_1 \u003d \"Ibuprofen\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private static final String VALID_TREATMENT_2 \u003d \"Cephalexin (capsule)\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void parseIc_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseIc((String) null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void parseIc_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIc(INVALID_IC));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void parseIc_validValueWithoutWhitespace_returnsIc() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Ic expectedIc \u003d new Ic(VALID_IC);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertEquals(expectedIc, ParserUtil.parseIc(VALID_IC));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void parseIc_validValueWithWhitespace_returnsTrimmedIc() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        String icWithWhitespace \u003d WHITESPACE + VALID_IC + WHITESPACE;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Ic expectedIc \u003d new Ic(VALID_IC);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertEquals(expectedIc, ParserUtil.parseIc(icWithWhitespace));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void parseDateOfBirth_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDateOfBirth((String) null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void parseDateOfBirth_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDateOfBirth(INVALID_DOB));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void parseDateOfBirth_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        DateOfBirth expectedDateOfBirth \u003d new DateOfBirth(VALID_DOB);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertEquals(expectedDateOfBirth, ParserUtil.parseDateOfBirth(VALID_DOB));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void parseDateOfBirth_validValueWithWhitespace_returnsTrimmedDateOfBirth() throws Exception {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        String dateOfBirthWithWhitespace \u003d WHITESPACE + VALID_DOB + WHITESPACE;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        DateOfBirth expectedDateOfBirth \u003d new DateOfBirth(VALID_DOB);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertEquals(expectedDateOfBirth, ParserUtil.parseDateOfBirth(dateOfBirthWithWhitespace));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(Optional.of(INVALID_ADDRESS)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(Optional.of(VALID_ADDRESS)).get());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(Optional.of(addressWithWhitespace)).get());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(Optional.of(INVALID_EMAIL)));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(Optional.of(VALID_EMAIL)).get());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(Optional.of(emailWithWhitespace)).get());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void parseHeight_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseHeight(Optional.of(INVALID_HEIGHT)));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void parseHeight_validValueWithoutWhitespace_returnsHeight() throws Exception {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Height expectedHeight \u003d new Height(VALID_HEIGHT);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertEquals(expectedHeight, ParserUtil.parseHeight(Optional.of(VALID_HEIGHT)).get());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void parseHeight_validValueWithWhitespace_returnsTrimmedHeight() throws Exception {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String heightWithWhitespace \u003d WHITESPACE + VALID_HEIGHT + WHITESPACE;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Height expectedHeight \u003d new Height(VALID_HEIGHT);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertEquals(expectedHeight, ParserUtil.parseHeight(Optional.of(heightWithWhitespace)).get());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void parseWeight_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseWeight(Optional.of(INVALID_WEIGHT)));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void parseWeight_validValueWithoutWhitespace_returnsWeight() throws Exception {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Weight expectedWeight \u003d new Weight(VALID_WEIGHT);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertEquals(expectedWeight, ParserUtil.parseWeight(Optional.of(VALID_WEIGHT)).get());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void parseWeight_validValueWithWhitespace_returnsTrimmedWeight() throws Exception {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        String weightWithWhitespace \u003d WHITESPACE + VALID_WEIGHT + WHITESPACE;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Weight expectedWeight \u003d new Weight(VALID_WEIGHT);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertEquals(expectedWeight, ParserUtil.parseWeight(Optional.of(weightWithWhitespace)).get());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void parseBloodType_null_returnsEmptyOptional() throws Exception {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Optional\u003cBloodType\u003e expectedBloodType \u003d Optional.empty();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertEquals(expectedBloodType, ParserUtil.parseBloodType(Optional.ofNullable(null)));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void parseBloodType_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseBloodType(Optional.of(INVALID_BLOOD_TYPE)));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void parseBloodType_validValueWithoutWhitespace_returnsBloodType() throws Exception {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        BloodType expectedBloodType \u003d new BloodType(VALID_BLOOD_TYPE);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertEquals(expectedBloodType, ParserUtil.parseBloodType(Optional.of(VALID_BLOOD_TYPE)).get());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void parseBloodType_validValueWithWhitespace_returnsTrimmedBloodType() throws Exception {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        String bloodTypeWithWhitespace \u003d WHITESPACE + VALID_BLOOD_TYPE + WHITESPACE;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        BloodType expectedBloodType \u003d new BloodType(VALID_BLOOD_TYPE);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertEquals(expectedBloodType, ParserUtil.parseBloodType(Optional.of(bloodTypeWithWhitespace)).get());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void parseAllergy_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAllergy(null));"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void parseCondition_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCondition(null));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void parseTreatment_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTreatment(null));"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void parseAllergy_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAllergy(INVALID_ALLERGY));"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void parseCondition_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCondition(INVALID_CONDITION));"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void parseTreatment_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTreatment(INVALID_TREATMENT));"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void parseAllergy_validValueWithoutWhitespace_returnsAllergy() throws Exception {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        Allergy expectedAllergy \u003d new Allergy(VALID_ALLERGY_1);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertEquals(expectedAllergy, ParserUtil.parseAllergy(VALID_ALLERGY_1));"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void parseCondition_validValueWithoutWhitespace_returnsCondition() throws Exception {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        Condition expectedCondition \u003d new Condition(VALID_CONDITION_1);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertEquals(expectedCondition, ParserUtil.parseCondition(VALID_CONDITION_1));"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void parseTreatment_validValueWithoutWhitespace_returnsTreatment() throws Exception {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        Treatment expectedTreatment \u003d new Treatment(VALID_TREATMENT_1);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertEquals(expectedTreatment, ParserUtil.parseTreatment(VALID_TREATMENT_1));"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void parseAllergy_validValueWithWhitespace_returnsTrimmedAllergy() throws Exception {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        String allergyWithWhitespace \u003d WHITESPACE + VALID_ALLERGY_1 + WHITESPACE;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        Allergy expectedTag \u003d new Allergy(VALID_ALLERGY_1);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseAllergy(allergyWithWhitespace));"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void parseCondition_validValueWithWhitespace_returnsTrimmedCondition() throws Exception {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        String conditionWithWhitespace \u003d WHITESPACE + VALID_CONDITION_1 + WHITESPACE;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        Condition expectedTag \u003d new Condition(VALID_CONDITION_1);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseCondition(conditionWithWhitespace));"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void parseTreatment_validValueWithWhitespace_returnsTrimmedTreatment() throws Exception {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        String treatmentWithWhitespace \u003d WHITESPACE + VALID_TREATMENT_1 + WHITESPACE;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        Treatment expectedTag \u003d new Treatment(VALID_TREATMENT_1);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTreatment(treatmentWithWhitespace));"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void parseAllergies_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAllergies(null));"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void parseConditions_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseConditions(null));"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void parseTreatments_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTreatments(null));"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void parseAllergies_collectionWithInvalidAllergies_throwsParseException() {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAllergies("
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            Arrays.asList(VALID_ALLERGY_1, INVALID_ALLERGY)));"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void parseConditions_collectionWithInvalidConditions_throwsParseException() {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseConditions("
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            Arrays.asList(VALID_CONDITION_1, INVALID_CONDITION)));"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void parseTreatments_collectionWithInvalidTreatments_throwsParseException() {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTreatments("
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                Arrays.asList(VALID_TREATMENT_1, INVALID_TREATMENT)));"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void parseAllergies_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertTrue(ParserUtil.parseAllergies(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void parseConditions_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertTrue(ParserUtil.parseConditions(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void parseTreatments_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertTrue(ParserUtil.parseTreatments(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void parseAllergies_collectionWithValidAllergies_returnsAllergySet() throws Exception {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        Set\u003cAllergy\u003e actualAllergySet \u003d ParserUtil.parseAllergies("
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            Arrays.asList(VALID_ALLERGY_1, VALID_ALLERGY_2));"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        Set\u003cAllergy\u003e expectedAllergySet \u003d new HashSet\u003cAllergy\u003e("
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            Arrays.asList(new Allergy(VALID_ALLERGY_1), new Allergy(VALID_ALLERGY_2)));"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertEquals(expectedAllergySet, actualAllergySet);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void parseConditions_collectionWithValidConditions_returnsConditionSet() throws Exception {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        Set\u003cCondition\u003e actualConditionSet \u003d ParserUtil.parseConditions("
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            Arrays.asList(VALID_CONDITION_1, VALID_CONDITION_2));"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        Set\u003cCondition\u003e expectedConditionSet \u003d new HashSet\u003cCondition\u003e("
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            Arrays.asList(new Condition(VALID_CONDITION_1), new Condition(VALID_CONDITION_2)));"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertEquals(expectedConditionSet, actualConditionSet);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void parseTreatments_collectionWithValidTreatments_returnsTreatmentSet() throws Exception {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        Set\u003cTreatment\u003e actualTreatmentSet \u003d ParserUtil.parseTreatments("
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                Arrays.asList(VALID_TREATMENT_1, VALID_TREATMENT_2));"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        Set\u003cTreatment\u003e expectedTreatmentSet \u003d new HashSet\u003cTreatment\u003e("
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                Arrays.asList(new Treatment(VALID_TREATMENT_1), new Treatment(VALID_TREATMENT_2)));"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertEquals(expectedTreatmentSet, actualTreatmentSet);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 17,
      "wang-jun-hao": 24,
      "divakarmal": 32,
      "foojingyi": 159,
      "PrestonTYR": 44,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/medibook/model/AccountTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "package seedu.medibook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.commonfields.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.doctor.Doctor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.doctor.Mcr;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "public class AccountTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    void equals() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Account account1 \u003d new Account(\"user\", \"pass\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                new Doctor(new Name(\"Brandon\"), new Mcr(\"MP2037X\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Account account2 \u003d new Account(\"user\", \"pass\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                new Doctor(new Name(\"Brandon\"), new Mcr(\"MP2037X\")));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertTrue(account1.equals(account2));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PrestonTYR": 21
    }
  },
  {
    "path": "src/test/java/seedu/medibook/model/DateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "package seedu.medibook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.commonfields.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "class DateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Date(null, true));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Date(null, false));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void constructor_validNonFutureDate_successWithCorrectPublicValues() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Date nonFutureDate \u003d new Date(\"19-02-2020\", true);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertEquals(\"19-02-2020\", nonFutureDate.inputValue);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertEquals(\"19 Feb 2020\", nonFutureDate.outputValue);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void constructor_validFutureDate_successWithCorrectPublicValues() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Date futureDate \u003d new Date(\"19-02-2021\", false);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertEquals(\"19-02-2021\", futureDate.inputValue);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertEquals(\"19 Feb 2021\", futureDate.outputValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void constructor_validFutureDateWithNonFutureAsTrue_failure() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Date(\"19-02-2021\", true));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void constructor_invalidDate_failure() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Date(\"19/02/2021\", false));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Date(\"19022021\", false));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Date(\"19 Feb 2021\", false));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Date(\"19/02/2020\", true));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Date(\"19022020\", true));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Date(\"19 Feb 2020\", true));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(Date.isValidDate(null)); // null input"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(Date.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(Date.isValidDate(\"21/03/89\")); // wrong format with /"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(Date.isValidDate(\"23-04-00\")); // wrong year format"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(Date.isValidDate(\"2 Feb 1996\")); // wrong format with letters"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // valid date of birth"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(Date.isValidDate(\"14-09-3000\")); // future date"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(Date.isValidDate(\"23-03-2000\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(Date.isValidDate(\"01-07-1995\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(Date.isValidDate(\"31-12-1995\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void compareTo() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // same date"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Date date1 \u003d new Date(\"19-02-2020\", true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Date date2 \u003d new Date(\"19-02-2020\", false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(date1.compareTo(date2) \u003d\u003d 0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // earlier date"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Date date3 \u003d new Date(\"30-12-2018\", false);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(date3.compareTo(date1) \u003c 0);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // later date"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(date1.compareTo(date3) \u003e 0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 78
    }
  },
  {
    "path": "src/test/java/seedu/medibook/model/MediBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_HEIGHT_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_TREATMENT_PHYSIOTHERAPY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.getTypicalMediBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.exceptions.DuplicatePatientException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public class MediBookTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private final MediBook mediBook \u003d new MediBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertEquals(Collections.emptyList(), mediBook.getPatientList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e mediBook.resetData(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void resetData_withValidReadOnlyMediBook_replacesData() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        MediBook newData \u003d getTypicalMediBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        mediBook.resetData(newData);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertEquals(newData, mediBook);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void resetData_withDuplicatePatients_throwsDuplicatePatientException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // Two patients with the same identity fields"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withTreatments(VALID_TREATMENT_PHYSIOTHERAPY).withHeight(VALID_HEIGHT_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        List\u003cPatient\u003e newPatients \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        MediBookStub newData \u003d new MediBookStub(newPatients);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(DuplicatePatientException.class, () -\u003e mediBook.resetData(newData));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void hasPatient_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e mediBook.hasPatient(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void hasPatient_patientNotInMediBook_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertFalse(mediBook.hasPatient(ALICE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void hasPatient_patientInMediBook_returnsTrue() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        mediBook.addPatient(ALICE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertTrue(mediBook.hasPatient(ALICE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void hasPatient_patientWithSameIdentityFieldsInMediBook_returnsTrue() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        mediBook.addPatient(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withTreatments(VALID_TREATMENT_PHYSIOTHERAPY).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertTrue(mediBook.hasPatient(editedAlice));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void getPatientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e mediBook.getPatientList().remove(0));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * A stub ReadOnlyMediBook whose patients list can violate interface constraints."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private static class MediBookStub implements ReadOnlyMediBook {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        private final ObservableList\u003cPatient\u003e patients \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        MediBookStub(Collection\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            this.patients.setAll(patients);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        public ObservableList\u003cPatient\u003e getPatientList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            return patients;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 41,
      "foojingyi": 5,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/medibook/model/ModelContextTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package seedu.medibook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.patient.Ic;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class ModelContextTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void testAccessedPatientMethods_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Context context \u003d new ModelContext();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Patient patient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(context.getPatientToAccess().isEmpty());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        context.accessPatient(patient);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(patient, context.getPatientToAccess().get());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        context.resetAccessedPatient();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(context.getPatientToAccess().isEmpty());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void accessPatient_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Context context \u003d new ModelContext();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e context.accessPatient(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void testDeletedPatientMethods_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Context context \u003d new ModelContext();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Patient patient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(context.getDeletedPatient().isEmpty());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        context.setDeletedPatient(patient);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(patient, context.getDeletedPatient().get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        context.resetDeletedPatient();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(context.getDeletedPatient().isEmpty());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void setDeletedPatient_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Context context \u003d new ModelContext();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e context.setDeletedPatient(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void testEditedPatientMethods_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Context context \u003d new ModelContext();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Patient patient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(context.getEditedPatient().isEmpty());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(context.getEditedPatientPrevIc().isEmpty());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Ic expectedIc \u003d new Ic(\"T2193732R\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        context.setEditedPatient(patient, expectedIc);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(patient, context.getEditedPatient().get());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(expectedIc, context.getEditedPatientPrevIc().get());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        context.resetEditedPatient();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(context.getEditedPatient().isEmpty());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(context.getEditedPatientPrevIc().isEmpty());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void setEditedPatient_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Context context \u003d new ModelContext();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e context.setEditedPatient(null, new Ic(\"S4554453A\")));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void setEditedPatient_nullPrevIc_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Context context \u003d new ModelContext();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e context.setEditedPatient(new PatientBuilder().build(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void getAndSetShouldLoadMedicalNotes_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Context context \u003d new ModelContext();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        context.setShouldLoadMedicalNotes(false);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(context.getShouldLoadMedicalNotes());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        context.setShouldLoadMedicalNotes(true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(context.getShouldLoadMedicalNotes());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void getAndSetShouldDeleteAllMedicalNotes_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Context context \u003d new ModelContext();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        context.setShouldDeleteAllMedicalNotes(true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(context.getShouldDeleteAllMedicalNotes());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        context.setShouldDeleteAllMedicalNotes(false);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(context.getShouldDeleteAllMedicalNotes());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void equals_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Context context1 \u003d new ModelContext();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Context context2 \u003d new ModelContext();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(context1, context2);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        context1.setDeletedPatient(new PatientBuilder().build());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        context1.setShouldDeleteAllMedicalNotes(true);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertNotEquals(context1, context2);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        context2.setDeletedPatient(new PatientBuilder().build());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        context2.setShouldDeleteAllMedicalNotes(true);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(context1, context2);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        context2.setEditedPatient(new PatientBuilder().build(), new Ic(\"S8324242F\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertNotEquals(context1, context2);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 126
    }
  },
  {
    "path": "src/test/java/seedu/medibook/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.model.Model.PREDICATE_SHOW_ALL_PATIENTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.BENSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.FieldContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.testutil.MediBookBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertEquals(new MediBook(), new MediBook(modelManager.getMediBook()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        userPrefs.setMediBookFilePath(Paths.get(\"medibook/book/file/path\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        userPrefs.setMediBookFilePath(Paths.get(\"new/medibook/book/file/path\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void setMediBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setMediBookFilePath(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void setMediBookFilePath_validPath_setsMediBookFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Path path \u003d Paths.get(\"medibook/book/file/path\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        modelManager.setMediBookFilePath(path);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertEquals(path, modelManager.getMediBookFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void hasPatient_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPatient(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void hasPatient_patientNotInMediBook_returnsFalse() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertFalse(modelManager.hasPatient(ALICE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void hasPatient_patientInMediBook_returnsTrue() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        modelManager.addPatient(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertTrue(modelManager.hasPatient(ALICE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void getFilteredPatientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPatientList().remove(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        MediBook mediBook \u003d new MediBookBuilder().withPatient(ALICE).withPatient(BENSON).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        MediBook differentMediBook \u003d new MediBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        modelManager \u003d new ModelManager(mediBook, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(mediBook, userPrefs);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // different mediBook -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentMediBook, userPrefs)));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        modelManager.updateFilteredPatientList("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new FieldContainsKeywordsPredicate(Arrays.asList(keywords), PREFIX_NAME));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(mediBook, userPrefs)));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        modelManager.updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        differentUserPrefs.setMediBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(mediBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 2,
      "divakarmal": 37,
      "-": 95
    }
  },
  {
    "path": "src/test/java/seedu/medibook/model/UserAccountsListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "package seedu.medibook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.commonfields.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.doctor.Doctor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.doctor.Mcr;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "public class UserAccountsListTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private UserAccountsList testUserAccountsList \u003d new UserAccountsList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void check_invalidInput_returnEmptyOptional() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Account testAccount \u003d new Account(\"user\", \"pass\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                new Doctor(new Name(\"Brandon\"), new Mcr(\"MP2037X\")));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        testUserAccountsList.addAccount(testAccount);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertEquals(Optional.empty(), testUserAccountsList.check(\"user2\", \"pass\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertEquals(Optional.empty(), testUserAccountsList.check(\"user\", \"pass2\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void check_validInput_successWithCorrectAccount() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Account testAccount \u003d new Account(\"user\", \"pass\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                new Doctor(new Name(\"Brandon\"), new Mcr(\"MP2037X\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        testUserAccountsList.addAccount(testAccount);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertEquals(Optional.of(testAccount), testUserAccountsList.check(\"user\", \"pass\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PrestonTYR": 33
    }
  },
  {
    "path": "src/test/java/seedu/medibook/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void setMediBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setMediBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void setMedicalNotesDirPath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setMedicalNotesDirPath(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 4,
      "divakarmal": 4,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/medibook/model/doctor/DoctorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "package seedu.medibook.model.doctor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.commonfields.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "class DoctorTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void constructor_nullName_exceptionThrown() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Doctor(null, new Mcr(\"M09298K\")));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void constructor_nullNcr_exceptionThrown() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Doctor(new Name(\"Bethany\"), null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    void equals() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Doctor doctor1 \u003d new Doctor(new Name(\"Brandon\"), new Mcr(\"MP2037X\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Doctor doctor2 \u003d new Doctor(new Name(\"Brandon\"), new Mcr(\"MP2037X\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(doctor1.equals(doctor2));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 28
    }
  },
  {
    "path": "src/test/java/seedu/medibook/model/doctor/McrTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "package seedu.medibook.model.doctor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "public class McrTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Mcr(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void constructor_invalidIc_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        String invalidMcr \u003d \"M2837098P\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Mcr(invalidMcr));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void isValidMcr() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // invalid mcr"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(Mcr.isValidMcr(\"\")); // empty string"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(Mcr.isValidMcr(\"M9P\")); // less than 7 characters"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(Mcr.isValidMcr(\"A08273X\")); // first character is not \u0027m\u0027 or \u0027M\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(Mcr.isValidMcr(\"M8F927P\")); // letter where digit should be"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(Mcr.isValidMcr(\"M928631\")); // last character is not a letter"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(Mcr.isValidMcr(\"M_1111a\")); // second character is not a letter or digit"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(Mcr.isValidMcr(\"M$1111a\")); // second character is not a letter or digit"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(Mcr.isValidMcr(\"M#1111a\")); // second character is not a letter or digit"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(Mcr.isValidMcr(\"M 1111a\")); // second character is not a letter or digit"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(Mcr.isValidMcr(\"M-1111a\")); // second character is not a letter or digit"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // valid mcr"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(Mcr.isValidMcr(\"m28370p\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(Mcr.isValidMcr(\"M99999x\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(Mcr.isValidMcr(\"mP2838x\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(Mcr.isValidMcr(\"MP2838x\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(Mcr.isValidMcr(\"MP2838X\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 43
    }
  },
  {
    "path": "src/test/java/seedu/medibook/model/medicaldetail/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package seedu.medibook.model.medicaldetail;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // invalid tag name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertFalse(Tag.isValidTagName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertFalse(Tag.isValidTagName(\"[/- \")); // no alphanumeric characters"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // valid tag name"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertTrue(Tag.isValidTagName(\"Diabetes (Type I)\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertTrue(Tag.isValidTagName(\"Peanuts/Nuts in general\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertTrue(Tag.isValidTagName(\"Paracetamol\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "foojingyi": 12,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/medibook/model/medicalnote/ContentTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "package seedu.medibook.model.medicalnote;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "class ContentTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Content(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void constructor_emptyString_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        String invalidContent \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Content(invalidContent));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    void isValidContent() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // valid content string"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(Content.isValidContent(\"Patient is good.\")); // alphabets only"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(Content.isValidContent(\"Patient turned up with 39.0C fever.\")); // alphanumeric"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(Content.isValidContent(\"012345\")); // numbers only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // invalid content string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(Content.isValidContent(\"\")); // empty string"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // null content string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Content.isValidContent(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    void equals() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertEquals(new Content(\"Patient is good.\"), new Content(\"Patient is good.\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 42
    }
  },
  {
    "path": "src/test/java/seedu/medibook/model/medicalnote/MedicalNoteComparatorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "package seedu.medibook.model.medicalnote;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.commonfields.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.commonfields.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.doctor.Doctor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.doctor.Mcr;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "class MedicalNoteComparatorTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private final MedicalNoteComparator comparator \u003d new MedicalNoteComparator();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private final MedicalNote medicalNote1 \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new MedicalNote(new Date(\"19-02-2020\", true),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                    new Doctor(new Name(\"John\"), new Mcr(\"M16906X\")),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                    new Content(\"Patient is sick.\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private final MedicalNote medicalNote2 \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new MedicalNote(new Date(\"19-02-2020\", true),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                    new Doctor(new Name(\"John\"), new Mcr(\"M16906X\")),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                    new Content(\"Patient is sick.\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private final MedicalNote medicalNote3 \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new MedicalNote(new Date(\"19-02-2020\", true),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                    new Doctor(new Name(\"Mary\"), new Mcr(\"MQ7260X\")),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                    new Content(\"Patient is healthy.\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private final MedicalNote medicalNote4 \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new MedicalNote(new Date(\"30-12-2019\", true),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                    new Doctor(new Name(\"John\"), new Mcr(\"M16906X\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                    new Content(\"Patient is sick.\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private final MedicalNote medicalNote5 \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new MedicalNote(new Date(\"30-12-2019\", true),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                    new Doctor(new Name(\"Mary\"), new Mcr(\"MQ7260X\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                    new Content(\"Patient is healthy.\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    void compare_sameDateSameFields_zero() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(comparator.compare(medicalNote1, medicalNote2) \u003d\u003d 0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    void compare_sameDateDiffFields_zero() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(comparator.compare(medicalNote1, medicalNote3) \u003d\u003d 0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    void compare_earlierDateSameFields_positive() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(comparator.compare(medicalNote4, medicalNote1) \u003e 0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    void compare_earlierDateDiffFields_positive() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(comparator.compare(medicalNote5, medicalNote1) \u003e 0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    void compare_laterDateSameFields_negative() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(comparator.compare(medicalNote1, medicalNote4) \u003c 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    void compare_laterDateDiffFields_negative() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(comparator.compare(medicalNote1, medicalNote5) \u003c 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 66
    }
  },
  {
    "path": "src/test/java/seedu/medibook/model/medicalnote/MedicalNoteListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "package seedu.medibook.model.medicalnote;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.commonfields.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.commonfields.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.doctor.Doctor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.doctor.Mcr;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "class MedicalNoteListTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private final MedicalNote medicalNote1 \u003d new MedicalNote(new Date(\"20-10-2019\", true),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new Doctor(new Name(\"John\"), new Mcr(\"M52739B\")), new Content(\"Patient is awesome.\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private final MedicalNote medicalNote2 \u003d new MedicalNote(new Date(\"25-10-2019\", true),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new Doctor(new Name(\"Gary\"), new Mcr(\"M12009B\")), new Content(\"Patient is bad.\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private final MedicalNote medicalNote3 \u003d new MedicalNote(new Date(\"22-09-2020\", true),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new Doctor(new Name(\"Alonso\"), new Mcr(\"M28060B\")), new Content(\"Patient is bad.\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    void add_emptyMedicalNoteList_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        MedicalNoteList emptyMedicalNoteList \u003d new MedicalNoteList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        emptyMedicalNoteList.add(medicalNote1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        MedicalNoteList expectedMedicalNoteList \u003d new MedicalNoteList(new LinkedList\u003c\u003e(Arrays.asList(medicalNote1)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertEquals(expectedMedicalNoteList, emptyMedicalNoteList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    void add_nonEmptyMedicalNoteList_successWithCorrectOrder() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        MedicalNoteList partiallyFilledMedicalNoteList \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                new MedicalNoteList(new LinkedList\u003c\u003e(Arrays.asList(medicalNote1)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        partiallyFilledMedicalNoteList.add(medicalNote2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        MedicalNoteList expectedMedicalNoteList \u003d new MedicalNoteList("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                new LinkedList\u003c\u003e(Arrays.asList(medicalNote2, medicalNote1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertEquals(expectedMedicalNoteList, partiallyFilledMedicalNoteList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertEquals(Arrays.asList(medicalNote2, medicalNote1), partiallyFilledMedicalNoteList.getMedicalNoteList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    void makeCopy() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        MedicalNoteList testList \u003d new MedicalNoteList(new LinkedList\u003c\u003e(Arrays.asList(medicalNote1)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        MedicalNoteList copiedList \u003d testList.makeCopy();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertEquals(testList, copiedList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(copiedList !\u003d testList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    void deleteMedicalNoteAtIndex_validIndex_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        MedicalNoteList medicalNoteList \u003d new MedicalNoteList("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                new LinkedList\u003c\u003e(Arrays.asList(medicalNote1, medicalNote2)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        MedicalNoteList expectedMedicalNoteList \u003d new MedicalNoteList("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                new LinkedList\u003c\u003e(Arrays.asList(medicalNote2)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        medicalNoteList.deleteMedicalNoteAtIndex(1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertEquals(expectedMedicalNoteList, medicalNoteList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    void getMedicalNoteAtIndex_validIndex_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        MedicalNoteList medicalNoteList \u003d new MedicalNoteList("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                new LinkedList\u003c\u003e(Arrays.asList(medicalNote1, medicalNote2)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        MedicalNote expectedMedicalNote \u003d medicalNote1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        MedicalNote actualMedicalNote \u003d medicalNoteList.getMedicalNoteAtIndex(1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertEquals(expectedMedicalNote, actualMedicalNote);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void alreadyHasMedicalNote_duplicateNote_true() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        MedicalNoteList medicalNoteList \u003d new MedicalNoteList("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                new LinkedList\u003c\u003e(Arrays.asList(medicalNote1, medicalNote2)));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(medicalNoteList.alreadyHasMedicalNote("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                new MedicalNote(new Date(\"20-10-2019\", true),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                        new Doctor(new Name(\"John\"), new Mcr(\"M52739B\")), new Content(\"Patient is awesome.\"))));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void alreadyHasMedicalNote_newNote_false() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        MedicalNoteList medicalNoteList \u003d new MedicalNoteList("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                new LinkedList\u003c\u003e(Arrays.asList(medicalNote1, medicalNote2)));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(medicalNoteList.alreadyHasMedicalNote(medicalNote3));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 92
    }
  },
  {
    "path": "src/test/java/seedu/medibook/model/medicalnote/MedicalNoteTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.medicalnote;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.commonfields.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.commonfields.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.doctor.Doctor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.doctor.Mcr;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "class MedicalNoteTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // when date is null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new MedicalNote(null, new Doctor(new Name(\"Lydia Yu\"), new Mcr(\"M12121B\")),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                    new Content(\"Patient is asymptomatic.\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // when doctorName is null"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new MedicalNote(new Date(\"15-04-2020\", true), null,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                    new Content(\"Patient is asymptomatic.\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // when content is null"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new MedicalNote(new Date(\"15-04-2020\", true),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                    new Doctor(new Name(\"Lydia Yu\"), new Mcr(\"M12121B\")), null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        String invalidDate \u003d \"15/04/20\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new MedicalNote(new Date(invalidDate, true),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                    new Doctor(new Name(\"Lydia Yu\"), new Mcr(\"M12121B\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                    new Content(\"Patient is asymptomatic.\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void constructor_invalidDoctorName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        String invalidDoctorName \u003d \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new MedicalNote(new Date(\"15-04-2020\", true),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                    new Doctor(new Name(invalidDoctorName), new Mcr(\"M72369X\")),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                    new Content(\"Patient is asymptomatic.\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        });"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void constructor_invalidDoctorMcr_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        String invalidDoctorName \u003d \"\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new MedicalNote(new Date(\"15-04-2020\", true),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                    new Doctor(new Name(\"Lydia Yu\"), new Mcr(\"P7212369X\")),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                    new Content(\"Patient is asymptomatic.\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void constructor_invalidContent_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        String invalidContent \u003d \"\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new MedicalNote(new Date(\"15-04-2020\", true),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                    new Doctor(new Name(\"Lydia Yu\"), new Mcr(\"M72369X\")),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                    new Content(invalidContent));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 30,
      "divakarmal": 2,
      "foojingyi": 40
    }
  },
  {
    "path": "src/test/java/seedu/medibook/model/patient/AddressTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/medibook/model/patient/BloodTypeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public class BloodTypeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new BloodType(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void constructor_invalidBloodType_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        String invalidBloodType \u003d \"E-\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new BloodType(invalidBloodType));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void isValidBloodType() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // invalid blood type"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertFalse(BloodType.isValidBloodType(null)); // null input"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertFalse(BloodType.isValidBloodType(\"\")); // empty string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertFalse(BloodType.isValidBloodType(\"5\")); // numeric blood type"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertFalse(BloodType.isValidBloodType(\"C+\")); // invalid blood type"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertFalse(BloodType.isValidBloodType(\"A\")); // invalid blood type"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // valid blood type"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertTrue(BloodType.isValidBloodType(\"B+\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertTrue(BloodType.isValidBloodType(\"A+\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertTrue(BloodType.isValidBloodType(\"AB-\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 36
    }
  },
  {
    "path": "src/test/java/seedu/medibook/model/patient/BmiTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_HEIGHT_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_HEIGHT_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_WEIGHT_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_WEIGHT_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "public class BmiTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void constructor_nullWeight_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Bmi(null, new Height(VALID_HEIGHT_BOB)));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void constructor_nullHeight_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Bmi(new Weight(VALID_WEIGHT_BOB), null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void constructor_nullWeightAndNullHeight_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Bmi(null, null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void constructor_validWeightAndValidHeight_correctBmiValue() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertEquals(\"23.6\", new Bmi(new Weight(VALID_WEIGHT_BOB), new Height(VALID_HEIGHT_BOB)).value);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertEquals(\"16.9\", new Bmi(new Weight(VALID_WEIGHT_AMY), new Height(VALID_HEIGHT_AMY)).value);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Bmi(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void constructor_invalidBmi_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        String invalidBmi \u003d \"-20.5\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Bmi(invalidBmi));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void isValidBmi() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // invalid bmi"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(Bmi.isValidBmi(null)); // null input"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(Bmi.isValidBmi(\"\")); // empty string"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(Bmi.isValidBmi(\"-10.5\")); // negative bmi"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(Bmi.isValidBmi(\"20.49\")); // 2 decimal point bmi"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(Bmi.isValidBmi(\"30.y\")); // non-numeric character"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // valid bmi"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(Bmi.isValidBmi(\"20.9\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(Bmi.isValidBmi(\"30.0\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(Bmi.isValidBmi(\"19.2\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 56,
      "divakarmal": 6
    }
  },
  {
    "path": "src/test/java/seedu/medibook/model/patient/DateOfBirthTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "class DateOfBirthTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DateOfBirth(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void constructor_invalidDateOfBirth_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        String invalidDateOfBirth \u003d \"13/12/1989\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new DateOfBirth(invalidDateOfBirth));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void isValidDateOfBirth() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // invalid date of birth"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertFalse(DateOfBirth.isValidDateOfBirth(null)); // null input"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertFalse(DateOfBirth.isValidDateOfBirth(\"\")); // empty string"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertFalse(DateOfBirth.isValidDateOfBirth(\"21/03/89\")); // wrong format with /"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertFalse(DateOfBirth.isValidDateOfBirth(\"23-04-00\")); // wrong year format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertFalse(DateOfBirth.isValidDateOfBirth(\"2 Feb 1996\")); // wrong format with letters"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertFalse(DateOfBirth.isValidDateOfBirth(\"14-09-3000\")); // future date"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // valid date of birth"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertTrue(DateOfBirth.isValidDateOfBirth(\"23-03-2000\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertTrue(DateOfBirth.isValidDateOfBirth(\"01-07-1995\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertTrue(DateOfBirth.isValidDateOfBirth(\"31-12-1995\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 1,
      "divakarmal": 2,
      "foojingyi": 33
    }
  },
  {
    "path": "src/test/java/seedu/medibook/model/patient/EmailTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 2,
      "-": 59
    }
  },
  {
    "path": "src/test/java/seedu/medibook/model/patient/FieldContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_BLOOD_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_IC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_WEIGHT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class FieldContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\", \"third\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FieldContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new FieldContainsKeywordsPredicate(firstPredicateKeywordList, PREFIX_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FieldContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new FieldContainsKeywordsPredicate(secondPredicateKeywordList, PREFIX_IC);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // same keywords, prefix -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FieldContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new FieldContainsKeywordsPredicate(firstPredicateKeywordList, PREFIX_NAME);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // different keywords, prefix -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // different keywords, same prefix -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FieldContainsKeywordsPredicate thirdPredicate \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new FieldContainsKeywordsPredicate(secondPredicateKeywordList, PREFIX_NAME);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(firstPredicate.equals(thirdPredicate));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // same keywords, different prefix -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        firstPredicateCopy \u003d new FieldContainsKeywordsPredicate(firstPredicateKeywordList, PREFIX_DATE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // same keywords, different prefix (test with different prefix) -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        firstPredicateCopy \u003d new FieldContainsKeywordsPredicate(firstPredicateKeywordList, PREFIX_PHONE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void test_containsOneKeyword_returnsTrue() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // name field"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FieldContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new FieldContainsKeywordsPredicate(Collections.singletonList(\"Alice\"), PREFIX_NAME);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // ic field"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.singletonList(\"S9123456Z\"), PREFIX_IC);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withIc(\"S9123456Z\").build()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // date of birth field"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.singletonList(\"08-09-2010\"), PREFIX_DATE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withDateOfBirth(\"08-09-2010\").build()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // phone field"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.singletonList(\"81234567\"), PREFIX_PHONE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withPhone(\"81234567\").build()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // address field"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.singletonList(\"Clementi\"), PREFIX_ADDRESS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withAddress(\"311, Clementi Ave 2, #02-25\").build()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // email field"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.singletonList(\"cornelia@example.com\"), PREFIX_EMAIL);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withEmail(\"cornelia@example.com\").build()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // height field"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.singletonList(\"168\"), PREFIX_HEIGHT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withHeight(\"168\").build()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // weight field"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.singletonList(\"66.6\"), PREFIX_WEIGHT);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withWeight(\"66.6\").build()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // blood type field"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.singletonList(\"AB+\"), PREFIX_BLOOD_TYPE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withBloodType(\"AB+\").build()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void test_containsKeywordAsSubstring_returnsTrue() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // name field"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FieldContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new FieldContainsKeywordsPredicate(Collections.singletonList(\"lic\"), PREFIX_NAME);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // ic field"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.singletonList(\"3456Z\"), PREFIX_IC);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withIc(\"S9123456Z\").build()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // date of birth field"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.singletonList(\"2010\"), PREFIX_DATE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withDateOfBirth(\"08-09-2010\").build()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // phone field"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.singletonList(\"8123\"), PREFIX_PHONE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withPhone(\"81234567\").build()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // address field"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.singletonList(\"Clement\"), PREFIX_ADDRESS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withAddress(\"311, Clementi Ave 2, #02-25\").build()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // email field"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.singletonList(\"@example.com\"), PREFIX_EMAIL);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withEmail(\"cornelia@example.com\").build()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // height field"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.singletonList(\"16\"), PREFIX_HEIGHT);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withHeight(\"168\").build()));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // weight field"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.singletonList(\"6.6\"), PREFIX_WEIGHT);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withWeight(\"66.6\").build()));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // blood type field"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.singletonList(\"+\"), PREFIX_BLOOD_TYPE);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withBloodType(\"AB+\").build()));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void test_containsMultipleKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // name field"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FieldContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            new FieldContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Zach\"), PREFIX_NAME);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"311\", \"Street\"), PREFIX_ADDRESS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withAddress(\"311, Clementi Ave 2, #02-25\").build()));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // no tests for other fields since the other fields are not separated by spaces"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void test_matchesOneKeyword_returnsTrue() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // name field"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FieldContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"), PREFIX_NAME);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // ic field"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"S9123456Z\", \"S9876543C\"), PREFIX_IC);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withIc(\"S9876543C\").build()));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // date of birth field"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"15-03-2002\", \"08-09-2010\"), PREFIX_DATE);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withDateOfBirth(\"15-03-2002\").build()));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // phone field"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"81234567\", \"66669876\"), PREFIX_PHONE);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withPhone(\"66669876\").build()));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // address field"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"Clementi\", \"Hougang\"), PREFIX_ADDRESS);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withAddress(\"311, Clementi Ave 2, #02-25\").build()));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // email field"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"cornelia@example.com\", \"johnd@example.com\"),"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                PREFIX_EMAIL);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withEmail(\"cornelia@example.com\").build()));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // height field"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"168\", \"177\"), PREFIX_HEIGHT);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withHeight(\"177\").build()));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // weight field"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"66.6\", \"80.4\"), PREFIX_WEIGHT);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withWeight(\"66.6\").build()));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // blood type field"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"B+\", \"AB+\"), PREFIX_BLOOD_TYPE);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withBloodType(\"B+\").build()));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void test_mixedCaseKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // name field"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FieldContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"), PREFIX_NAME);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // ic field"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.singletonList(\"s9876543c\"), PREFIX_IC);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withIc(\"S9876543C\").build()));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // address field"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"clemENTI\"), PREFIX_ADDRESS);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withAddress(\"311, Clementi Ave 2, #02-25\").build()));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // email field"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"CoRnElIa@ExAmPlE.cOm\"),"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                PREFIX_EMAIL);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withEmail(\"cornelia@example.com\").build()));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // blood type field"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.singletonList(\"b+\"), PREFIX_BLOOD_TYPE);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withBloodType(\"B+\").build()));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // no tests for dob, phone, height, weight fields since these fields are numeric."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void test_zeroKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // name field"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FieldContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new FieldContainsKeywordsPredicate(Collections.emptyList(), PREFIX_NAME);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // ic field"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.emptyList(), PREFIX_IC);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withIc(\"S9876543C\").build()));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // date of birth field"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.emptyList(), PREFIX_DATE);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withDateOfBirth(\"15-03-2002\").build()));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // phone field"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.emptyList(), PREFIX_PHONE);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withPhone(\"66669876\").build()));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // address field"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.emptyList(), PREFIX_ADDRESS);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withAddress(\"311, Clementi Ave 2, #02-25\").build()));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // email field"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.emptyList(),"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                PREFIX_EMAIL);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withEmail(\"cornelia@example.com\").build()));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // height field"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.emptyList(), PREFIX_HEIGHT);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withHeight(\"177\").build()));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // weight field"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.emptyList(), PREFIX_WEIGHT);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withWeight(\"66.6\").build()));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // blood type field"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Collections.emptyList(), PREFIX_BLOOD_TYPE);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withBloodType(\"B+\").build()));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void test_nonMatchingKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FieldContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"Carol\"), PREFIX_NAME);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // ic field"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"S9123456Z\", \"S9876543C\"), PREFIX_IC);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withIc(\"S8642024G\").build()));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // date of birth field"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"15-03-2002\", \"08-09-2010\"), PREFIX_DATE);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withDateOfBirth(\"13-04-1985\").build()));"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // phone field"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"81234567\", \"66669876\"), PREFIX_PHONE);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withPhone(\"94210412\").build()));"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // address field"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"Orchard\", \"Bedok\"), PREFIX_ADDRESS);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withAddress(\"618, Newton Street 52, #01-21\").build()));"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // email field"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\".edu\", \".org\"),"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                PREFIX_EMAIL);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withEmail(\"test@foobar.com\").build()));"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // height field"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"159\", \"169\"), PREFIX_HEIGHT);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withHeight(\"172\").build()));"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // weight field"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"77.7\", \"53.2\"), PREFIX_WEIGHT);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withWeight(\"68.9\").build()));"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // blood type field"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"A-\", \"B-\"), PREFIX_BLOOD_TYPE);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withBloodType(\"A+\").build()));"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void test_keywordMatchesOtherFields_returnsFalse() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // keywords match all fields except name"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FieldContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new FieldContainsKeywordsPredicate(Arrays.asList(\"S9999999R\", \"1234567\", \"alice@email.com\", \"Main\","
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                    \"Street\", \"171\", \"61.2\", \"A+\", \"12-08-1999\"), PREFIX_NAME);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withIc(\"S9999999R\").withName(\"Alice\").withPhone(\"1234567\")"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withHeight(\"171\").withWeight(\"61.2\")"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .withBloodType(\"A+\").withDateOfBirth(\"12-08-1999\").build()));"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // keywords match all fields except ic"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                new FieldContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"1234567\", \"alice@email.com\", \"Main\","
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                        \"Street\", \"171\", \"61.2\", \"A+\", \"12-08-1999\"), PREFIX_IC);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withIc(\"S9999999R\").withName(\"Alice\").withPhone(\"1234567\")"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withHeight(\"171\").withWeight(\"61.2\")"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .withBloodType(\"A+\").withDateOfBirth(\"12-08-1999\").build()));"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // keywords match all fields except date of birth"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                new FieldContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"S9999999R\", \"1234567\", \"alice@email.com\","
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                        \"Main\", \"Street\", \"171\", \"61.2\", \"A+\"), PREFIX_DATE);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withIc(\"S9999999R\").withName(\"Alice\").withPhone(\"1234567\")"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withHeight(\"171\").withWeight(\"61.2\")"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .withBloodType(\"A+\").withDateOfBirth(\"12-08-1999\").build()));"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // keywords match all fields except phone"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new FieldContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"S9999999R\", \"alice@email.com\", \"Main\","
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                        \"Street\", \"171\", \"61.2\", \"A+\", \"12-08-1999\"), PREFIX_PHONE);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withIc(\"S9999999R\").withName(\"Alice\").withPhone(\"1234567\")"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withHeight(\"171\").withWeight(\"61.2\")"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .withBloodType(\"A+\").withDateOfBirth(\"12-08-1999\").build()));"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // keywords match all fields except address"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                new FieldContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"S9999999R\", \"1234567\", \"alice@email.com\","
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                        \"171\", \"61.2\", \"A+\", \"12-08-1999\"), PREFIX_ADDRESS);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withIc(\"S9999999R\").withName(\"Alice\").withPhone(\"1234567\")"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withHeight(\"171\").withWeight(\"61.2\")"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .withBloodType(\"A+\").withDateOfBirth(\"12-08-1999\").build()));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // keywords match all fields except email"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                new FieldContainsKeywordsPredicate(Arrays.asList(\"Alicia\", \"S9999999R\", \"1234567\","
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                        \"Main\", \"Street\", \"171\", \"61.2\", \"A+\", \"12-08-1999\"), PREFIX_EMAIL);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withIc(\"S9999999R\").withName(\"Alicia\").withPhone(\"1234567\")"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withHeight(\"171\").withWeight(\"61.2\")"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .withBloodType(\"A+\").withDateOfBirth(\"12-08-1999\").build()));"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // keywords match all fields except height"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                new FieldContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"S9999999R\", \"1234567\", \"alice@email.com\","
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                        \"Main\", \"Street\", \"61.2\", \"A+\", \"12-08-1999\"), PREFIX_HEIGHT);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withIc(\"S9999999R\").withName(\"Alice\").withPhone(\"1234567\")"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withHeight(\"171\").withWeight(\"61.2\")"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .withBloodType(\"A+\").withDateOfBirth(\"12-08-1999\").build()));"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // keywords match all fields except weight"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                new FieldContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"S9999999R\", \"1234567\", \"alice@email.com\","
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                        \"Main\", \"Street\", \"171\", \"A+\", \"12-08-1999\"), PREFIX_WEIGHT);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withIc(\"S9999999R\").withName(\"Alice\").withPhone(\"1234567\")"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withHeight(\"171\").withWeight(\"61.2\")"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .withBloodType(\"A+\").withDateOfBirth(\"12-08-1999\").build()));"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // keywords match all fields except blood type"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        predicate \u003d"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                new FieldContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"S9999999R\", \"1234567\", \"alice@email.com\","
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                        \"Main\", \"Street\", \"171\", \"61.2\", \"12-08-1999\"), PREFIX_BLOOD_TYPE);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withIc(\"S9999999R\").withName(\"Alice\").withPhone(\"1234567\")"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withHeight(\"171\").withWeight(\"61.2\")"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .withBloodType(\"A+\").withDateOfBirth(\"12-08-1999\").build()));"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 341,
      "wang-jun-hao": 25,
      "divakarmal": 18
    }
  },
  {
    "path": "src/test/java/seedu/medibook/model/patient/HeightTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class HeightTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Height(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void constructor_invalidHeight_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String invalidHeight \u003d \" 160\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Height(invalidHeight));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void isValidHeight() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // invalid height"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(Height.isValidHeight(null)); // null input"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(Height.isValidHeight(\"\")); // empty string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(Height.isValidHeight(\"-10\")); // negative height"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(Height.isValidHeight(\"300\")); // height larger than 299cm"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(Height.isValidHeight(\"17i\")); // non-numeric character"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // valid height"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(Height.isValidHeight(\"50\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(Height.isValidHeight(\"195\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(Height.isValidHeight(\"169\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 34,
      "divakarmal": 2
    }
  },
  {
    "path": "src/test/java/seedu/medibook/model/patient/IcTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "public class IcTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Ic(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void constructor_invalidIc_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        String invalidIc \u003d \"S9922eq3W\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Ic(invalidIc));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void isValidIc() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // invalid ic"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertFalse(Ic.isValidIc(\"\")); // empty string"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertFalse(Ic.isValidIc(\"S123456H\")); // less than 7 digit number"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertFalse(Ic.isValidIc(\"A0213487Y\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertFalse(Ic.isValidIc(\"S12345g6Y\")); // letters where digits should be"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertFalse(Ic.isValidIc(\"ST1234567A\")); // more than 1 letter at the start"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertFalse(Ic.isValidIc(\"S1234567AA\")); // more than 1 letter at the end"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // valid ic"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertTrue(Ic.isValidIc(\"S1234567Y\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertTrue(Ic.isValidIc(\"T0012345Q\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertTrue(Ic.isValidIc(\"F6565653R\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 2,
      "PrestonTYR": 35
    }
  },
  {
    "path": "src/test/java/seedu/medibook/model/patient/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.commonfields.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 2,
      "divakarmal": 2,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/medibook/model/patient/PatientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_ALLERGY_PENICILLIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_ALLERGY_SHELLFISH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_BLOOD_TYPE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_CONDITION_BACK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_CONDITION_DIABETES;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_DOB_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_HEIGHT_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_IC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_TREATMENT_PHYSIOTHERAPY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_WEIGHT_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.ALICE_MEDICAL_NOTE_1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.ALICE_MEDICAL_NOTE_2;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.ALICE_NUM_OF_MEDICAL_NOTES;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.BENSON_MEDICAL_NOTE_1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.BENSON_MEDICAL_NOTE_2;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public class PatientTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient patient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e patient.getAllergies().remove(0));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e patient.getConditions().remove(0));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e patient.getTreatments().remove(0));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void isSamePatient() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertTrue(ALICE.isSamePatient(ALICE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertFalse(ALICE.isSamePatient(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        //different ic -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withIc(VALID_IC_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertFalse(ALICE.isSamePatient(editedAlice));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // same ic, same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withDateOfBirth(VALID_DOB_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).withHeight(VALID_HEIGHT_BOB).withWeight(VALID_WEIGHT_BOB)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withBloodType(VALID_BLOOD_TYPE_BOB).withAllergies(VALID_ALLERGY_SHELLFISH)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withConditions(VALID_CONDITION_BACK).withTreatments(VALID_TREATMENT_PHYSIOTHERAPY).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertTrue(ALICE.isSamePatient(editedAlice));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // same ic, same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withDateOfBirth(VALID_DOB_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).withHeight(VALID_HEIGHT_BOB).withWeight(VALID_WEIGHT_BOB)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withBloodType(VALID_BLOOD_TYPE_BOB).withAllergies(VALID_ALLERGY_SHELLFISH)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withConditions(VALID_CONDITION_BACK).withTreatments(VALID_TREATMENT_PHYSIOTHERAPY).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertTrue(ALICE.isSamePatient(editedAlice));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // same ic, same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withDateOfBirth(VALID_DOB_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                .withHeight(VALID_HEIGHT_BOB).withWeight(VALID_WEIGHT_BOB).withBloodType(VALID_BLOOD_TYPE_BOB)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withAllergies(VALID_ALLERGY_SHELLFISH).withConditions(VALID_CONDITION_BACK)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withTreatments(VALID_TREATMENT_PHYSIOTHERAPY).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertTrue(ALICE.isSamePatient(editedAlice));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // same ic, same name, same date of birth, same height, same weight, same address, different phone,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // different email -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertTrue(ALICE.isSamePatient(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // same ic, different name, different phone, different email -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertTrue(ALICE.isSamePatient(editedAlice));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient aliceCopy \u003d new PatientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        // different ic -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withIc(VALID_IC_BOB).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // different date of birth -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withDateOfBirth(VALID_DOB_BOB).build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // different height -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withHeight(VALID_HEIGHT_BOB).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // different weight -\u003e returns false"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withWeight(VALID_WEIGHT_BOB).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // different blood type -\u003e returns false"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withBloodType(VALID_BLOOD_TYPE_BOB).build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // different allergies -\u003e returns false"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withAllergies(VALID_ALLERGY_PENICILLIN).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // different conditions -\u003e returns false"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withConditions(VALID_CONDITION_DIABETES).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        // different treatments -\u003e returns false"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withTreatments(VALID_TREATMENT_PHYSIOTHERAPY).build();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // different medical note list -\u003e returns false"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        editedAlice.addMedicalNote(BENSON_MEDICAL_NOTE_1);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void alreadyHasMedicalNote_duplicatedNote_true() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Patient alice \u003d new PatientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(alice.alreadyHasMedicalNote(ALICE_MEDICAL_NOTE_1));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(alice.alreadyHasMedicalNote(ALICE_MEDICAL_NOTE_2));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void alreadyHasMedicalNote_newNote_false() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Patient alice \u003d new PatientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(alice.alreadyHasMedicalNote(BENSON_MEDICAL_NOTE_1));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(alice.alreadyHasMedicalNote(BENSON_MEDICAL_NOTE_2));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void getNumOfMedicalNotes() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Patient alice \u003d new PatientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(alice.getNumOfMedicalNotes() \u003d\u003d ALICE_NUM_OF_MEDICAL_NOTES);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 3,
      "wang-jun-hao": 33,
      "divakarmal": 47,
      "foojingyi": 30,
      "PrestonTYR": 12,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/medibook/model/patient/PhoneTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"912345\")); // less than 7 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"1234567890123456\")); // more than than 15 numbers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"7654321\")); // exactly 7 numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"123456789012345\")); // exactly 15 numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 4,
      "divakarmal": 2,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/medibook/model/patient/RecordTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.commonfields.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class RecordTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final HashMap\u003cDate, Height\u003e RECORD_HEIGHT \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final HashMap\u003cDate, Weight\u003e RECORD_WEIGHT \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void constructor_nullHeightRecord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Record(null, RECORD_WEIGHT));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void constructor_nullWeightRecord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Record(RECORD_HEIGHT, null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Record record1 \u003d new Record();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Record record2 \u003d new Record();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(record2, record1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        record1.addHeightRecord(new Height(\"179\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        record1.addWeightRecord(new Weight(\"76.8\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertNotEquals(record2, record1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        record2.addHeightRecord(new Height(\"179\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        record2.addWeightRecord(new Weight(\"76.8\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(record1, record2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 41
    }
  },
  {
    "path": "src/test/java/seedu/medibook/model/patient/UniquePatientListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_ALLERGY_SHELLFISH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_BLOOD_TYPE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_CONDITION_DIABETES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_HEIGHT_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_TREATMENT_PHYSIOTHERAPY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_WEIGHT_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.exceptions.DuplicatePatientException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.exceptions.PatientNotFoundException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public class UniquePatientListTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private final UniquePatientList uniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void contains_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.contains(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void contains_patientNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertFalse(uniquePatientList.contains(ALICE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void contains_patientInList_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertTrue(uniquePatientList.contains(ALICE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void contains_patientWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withName(VALID_NAME_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).withHeight(VALID_HEIGHT_BOB).withWeight(VALID_WEIGHT_BOB)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withBloodType(VALID_BLOOD_TYPE_BOB).withAllergies(VALID_ALLERGY_SHELLFISH)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withConditions(VALID_CONDITION_DIABETES).withTreatments(VALID_TREATMENT_PHYSIOTHERAPY).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertTrue(uniquePatientList.contains(editedAlice));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void add_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.add(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void add_duplicatePatient_throwsDuplicatePatientException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(DuplicatePatientException.class, () -\u003e uniquePatientList.add(ALICE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void setPatient_nullTargetPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setPatient(null, ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void setPatient_nullEditedPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setPatient(ALICE, null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void setPatient_targetPatientNotInList_throwsPatientNotFoundException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(PatientNotFoundException.class, () -\u003e uniquePatientList.setPatient(ALICE, ALICE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void setPatient_editedPatientIsSamePatient_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        uniquePatientList.setPatient(ALICE, ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        expectedUniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void setPatient_editedPatientHasSameIdentity_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withName(VALID_NAME_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).withHeight(VALID_HEIGHT_BOB).withWeight(VALID_WEIGHT_BOB)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withBloodType(VALID_BLOOD_TYPE_BOB).withAllergies(VALID_ALLERGY_SHELLFISH)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                .withConditions(VALID_CONDITION_DIABETES).withTreatments(VALID_TREATMENT_PHYSIOTHERAPY).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        uniquePatientList.setPatient(ALICE, editedAlice);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        expectedUniquePatientList.add(editedAlice);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void setPatient_editedPatientHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        uniquePatientList.setPatient(ALICE, BOB);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        expectedUniquePatientList.add(BOB);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void setPatient_editedPatientHasNonUniqueIdentity_throwsDuplicatePatientException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        uniquePatientList.add(BOB);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(DuplicatePatientException.class, () -\u003e uniquePatientList.setPatient(ALICE, BOB));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void remove_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.remove(null));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void remove_patientDoesNotExist_throwsPatientNotFoundException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(PatientNotFoundException.class, () -\u003e uniquePatientList.remove(ALICE));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void remove_existingPatient_removesPatient() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        uniquePatientList.remove(ALICE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void setPatients_nullUniquePatientList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setPatients((UniquePatientList) null));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void setPatient_uniquePatientList_replacesOwnListWithProvidedUniquePatientList() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        expectedUniquePatientList.add(BOB);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        uniquePatientList.setPatients(expectedUniquePatientList);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void setPatient_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setPatients((List\u003cPatient\u003e) null));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void setPatients_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        List\u003cPatient\u003e patientList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        uniquePatientList.setPatients(patientList);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        expectedUniquePatientList.add(BOB);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void setPatients_listWithDuplicatePatients_throwsDuplicatePatientException() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        List\u003cPatient\u003e listWithDuplicatePatients \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(DuplicatePatientException.class, () -\u003e uniquePatientList.setPatients(listWithDuplicatePatients));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            -\u003e uniquePatientList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 174,
      "foojingyi": 7
    }
  },
  {
    "path": "src/test/java/seedu/medibook/model/patient/WeightTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "public class WeightTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Weight(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void constructor_invalidWeight_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        String invalidWeight \u003d \"55.55\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Weight(invalidWeight));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void isValidWeight() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // invalid weight"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(Weight.isValidWeight(null)); // null input"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(Weight.isValidWeight(\"\")); // empty string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(Weight.isValidWeight(\"-10.5\")); // negative weight"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(Weight.isValidWeight(\"40.49\")); // 2 decimal point weight"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertFalse(Weight.isValidWeight(\"70.y\")); // non-numeric character"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // valid weight"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(Weight.isValidWeight(\"50.5\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(Weight.isValidWeight(\"195.0\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertTrue(Weight.isValidWeight(\"88.8\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 34,
      "divakarmal": 2
    }
  },
  {
    "path": "src/test/java/seedu/medibook/storage/JsonAdaptedAccountTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "public class JsonAdaptedAccountTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private static final String INVALID_DOCTORNAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private static final String INVALID_DOCTORMCR \u003d \"M12DD2Q\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private static final String VALID_USERNAME \u003d \"user\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private static final String VALID_PASSWORD \u003d \"pass\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private static final String VALID_DOCTORNAME \u003d \"Capital Tan\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private static final String VALID_DOCTORMCR \u003d \"M99999x\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void toModelType_nullDoctorName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        JsonAdaptedAccount account \u003d new JsonAdaptedAccount(VALID_USERNAME, VALID_PASSWORD,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                null, VALID_DOCTORMCR);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        String expectedMessage \u003d JsonAdaptedAccount.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, account::toModelType);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void toModelType_invalidDoctorName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        JsonAdaptedAccount account \u003d new JsonAdaptedAccount(VALID_USERNAME, VALID_PASSWORD,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                INVALID_DOCTORNAME, VALID_DOCTORMCR);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        String expectedMessage \u003d JsonAdaptedAccount.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, account::toModelType);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void toModelType_nullDoctorMcr_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        JsonAdaptedAccount account \u003d new JsonAdaptedAccount(VALID_USERNAME, VALID_PASSWORD,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                VALID_DOCTORNAME, null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        String expectedMessage \u003d JsonAdaptedAccount.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, account::toModelType);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void toModelType_invalidDoctorMcr_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        JsonAdaptedAccount account \u003d new JsonAdaptedAccount(VALID_USERNAME, VALID_PASSWORD,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                VALID_DOCTORNAME, INVALID_DOCTORMCR);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        String expectedMessage \u003d JsonAdaptedAccount.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, account::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PrestonTYR": 50
    }
  },
  {
    "path": "src/test/java/seedu/medibook/storage/JsonAdaptedMedicalNoteTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.model.commonfields.Date.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static seedu.medibook.storage.JsonAdaptedMedicalNote.ERROR_MESSAGE_NULL_FIELD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static seedu.medibook.testutil.TypicalMedicalNotes.VALID_MEDICAL_NOTE1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.commonfields.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.doctor.Mcr;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.medicalnote.Content;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNote;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class JsonAdaptedMedicalNoteTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void toModelType_validMedicalNotesDetails_returnsMedicalNote() throws Exception {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        MedicalNote medicalNote \u003d VALID_MEDICAL_NOTE1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonAdaptedMedicalNote patient \u003d new JsonAdaptedMedicalNote(medicalNote);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(medicalNote, patient.toModelType());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void toModelType_invalidDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonAdaptedMedicalNote patient \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                new JsonAdaptedMedicalNote(\"30-30-2020\", \"Dr Watson\", \"M84197F\", \"Patient is feeling well\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String expectedMessage \u003d MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void toModelType_nullDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonAdaptedMedicalNote patient \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                new JsonAdaptedMedicalNote(null, \"Dr Watson\", \"M84197F\", \"Patient is feeling well\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String expectedMessage \u003d ERROR_MESSAGE_NULL_FIELD;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void toModelType_nullDoctorName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonAdaptedMedicalNote patient \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                new JsonAdaptedMedicalNote(\"20-05-2020\", null, \"M84197F\", \"Patient is feeling well\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String expectedMessage \u003d ERROR_MESSAGE_NULL_FIELD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void toModelType_invalidDoctorName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonAdaptedMedicalNote patient \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                new JsonAdaptedMedicalNote(\"20-05-2020\", \"A* Doctor\", \"M84197F\", \"Patient is feeling well\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void toModelType_nullDoctorMcr_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        JsonAdaptedMedicalNote patient \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                new JsonAdaptedMedicalNote(\"20-05-2020\", \"Dr Watson\", null, \"Patient is feeling well\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        String expectedMessage \u003d ERROR_MESSAGE_NULL_FIELD;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void toModelType_invalidDoctorMcr_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        JsonAdaptedMedicalNote patient \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                new JsonAdaptedMedicalNote(\"20-05-2020\", \"Dr Watson\", \"X84197F\", \"Patient is feeling well\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        String expectedMessage \u003d Mcr.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void toModelType_nullContent_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonAdaptedMedicalNote patient \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                new JsonAdaptedMedicalNote(\"20-05-2020\", \"Dr Watson\", \"M84197F\", null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String expectedMessage \u003d ERROR_MESSAGE_NULL_FIELD;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void toModelType_invalidContent_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonAdaptedMedicalNote patient \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                new JsonAdaptedMedicalNote(\"20-05-2020\", \"Dr Watson\", \"M84197F\", \"\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        String expectedMessage \u003d Content.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 61,
      "wang-jun-hao": 28
    }
  },
  {
    "path": "src/test/java/seedu/medibook/storage/JsonAdaptedPatientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static seedu.medibook.model.patient.Patient.OPTIONAL_FIELD_EMPTY_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.storage.JsonAdaptedPatient.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.BENSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.commonfields.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNoteList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.BloodType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Bmi;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.DateOfBirth;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Height;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Ic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.patient.Record;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Weight;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public class JsonAdaptedPatientTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private static final String INVALID_IC \u003d \"A12345R7H\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private static final String INVALID_DOB \u003d \"31/12/95\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final String INVALID_HEIGHT \u003d \"17S\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private static final String INVALID_WEIGHT \u003d \"10.12\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private static final String INVALID_BMI \u003d \"10.12\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private static final String INVALID_BLOOD_TYPE \u003d \"D+\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private static final String INVALID_ALLERGY \u003d \"[];\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private static final String INVALID_CONDITION \u003d \"*^£\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private static final String INVALID_TREATMENT \u003d \"/+\u003d\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final String EMPTY_OPTIONAL_FIELD \u003d OPTIONAL_FIELD_EMPTY_MESSAGE;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private static final String VALID_IC \u003d BENSON.getIc().toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private static final String VALID_DOB \u003d BENSON.getDateOfBirth().getInputString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getStringEmail();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getStringAddress();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private static final String VALID_HEIGHT \u003d BENSON.getStringHeight();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private static final String VALID_WEIGHT \u003d BENSON.getStringWeight();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private static final String VALID_BMI \u003d BENSON.getStringBmi();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private static final String VALID_BLOOD_TYPE \u003d BENSON.getStringBloodType();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final JsonAdaptedRecord VALID_RECORD \u003d new JsonAdaptedRecord(BENSON.getRecord());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private static final List\u003cJsonAdaptedAllergy\u003e VALID_ALLERGIES \u003d BENSON.getAllergies().stream()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .map(JsonAdaptedAllergy::new)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private static final List\u003cJsonAdaptedCondition\u003e VALID_CONDITIONS \u003d BENSON.getConditions().stream()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .map(JsonAdaptedCondition::new)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private static final List\u003cJsonAdaptedTreatment\u003e VALID_TREATMENTS \u003d BENSON.getTreatments().stream()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .map(JsonAdaptedTreatment::new)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /* Medical note list data of patient should not be loaded at point of program start-up, hence expected"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    behaviour is that all these patients have an empty medical note list instead of the one initialised and loaded"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    in TypicalPatients.java for other testing purposes."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private static final MedicalNoteList emptyMedicalNoteList \u003d new MedicalNoteList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void toModelType_validPatientDetails_returnsPatient() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(BENSON);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Patient expectedBensonWithEmptyMedicalNoteList \u003d new PatientBuilder(BENSON).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        expectedBensonWithEmptyMedicalNoteList.setMedicalNoteList(emptyMedicalNoteList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertEquals(expectedBensonWithEmptyMedicalNoteList, patient.toModelType());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void toModelType_invalidIc_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(INVALID_IC, VALID_NAME, VALID_DOB, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                VALID_ADDRESS, VALID_HEIGHT, VALID_WEIGHT, VALID_BMI, VALID_BLOOD_TYPE, VALID_RECORD, VALID_ALLERGIES,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                VALID_CONDITIONS, VALID_TREATMENTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        String expectedMessage \u003d Ic.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void toModelType_nullIc_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(null, VALID_NAME, VALID_DOB, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                VALID_ADDRESS, VALID_HEIGHT, VALID_WEIGHT, VALID_BMI, VALID_BLOOD_TYPE, VALID_RECORD, VALID_ALLERGIES,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                VALID_CONDITIONS, VALID_TREATMENTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Ic.class.getSimpleName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_IC, INVALID_NAME, VALID_DOB, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                VALID_ADDRESS, VALID_HEIGHT, VALID_WEIGHT, VALID_BMI, VALID_BLOOD_TYPE, VALID_RECORD, VALID_ALLERGIES,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                VALID_CONDITIONS, VALID_TREATMENTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_IC, null, VALID_DOB, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                VALID_ADDRESS, VALID_HEIGHT, VALID_WEIGHT, VALID_BMI, VALID_BLOOD_TYPE, VALID_RECORD, VALID_ALLERGIES,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                VALID_CONDITIONS, VALID_TREATMENTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void toModelType_invalidDateOfBirth_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_IC, VALID_NAME, INVALID_DOB, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                VALID_ADDRESS, VALID_HEIGHT, VALID_WEIGHT, VALID_BMI, VALID_BLOOD_TYPE, VALID_RECORD, VALID_ALLERGIES,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                VALID_CONDITIONS, VALID_TREATMENTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        String expectedMessage \u003d DateOfBirth.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void toModelType_nullDateOfBirth_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_IC, VALID_NAME, null, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                VALID_ADDRESS, VALID_HEIGHT, VALID_WEIGHT, VALID_BMI, VALID_BLOOD_TYPE, VALID_RECORD, VALID_ALLERGIES,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                VALID_CONDITIONS, VALID_TREATMENTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, DateOfBirth.class.getSimpleName());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_IC, VALID_NAME, VALID_DOB, INVALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                VALID_ADDRESS, VALID_HEIGHT, VALID_WEIGHT, VALID_BMI, VALID_BLOOD_TYPE, VALID_RECORD, VALID_ALLERGIES,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                VALID_CONDITIONS, VALID_TREATMENTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_IC, VALID_NAME, VALID_DOB, null, VALID_EMAIL,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                VALID_ADDRESS, VALID_HEIGHT, VALID_WEIGHT, VALID_BMI, VALID_BLOOD_TYPE, VALID_RECORD, VALID_ALLERGIES,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                VALID_CONDITIONS, VALID_TREATMENTS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void toModelType_emptyEmail_returnPatientWithEmptyEmailField() throws IllegalValueException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonAdaptedPatient jsonAdaptedPatient \u003d new JsonAdaptedPatient(VALID_IC, VALID_NAME, VALID_DOB, VALID_PHONE,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                EMPTY_OPTIONAL_FIELD, VALID_ADDRESS, VALID_HEIGHT, VALID_WEIGHT, VALID_BMI, VALID_BLOOD_TYPE,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                VALID_RECORD, VALID_ALLERGIES, VALID_CONDITIONS, VALID_TREATMENTS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Patient patient \u003d jsonAdaptedPatient.toModelType();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(patient.getEmail().isEmpty());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_IC, VALID_NAME, VALID_DOB, VALID_PHONE, INVALID_EMAIL,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                VALID_ADDRESS, VALID_HEIGHT, VALID_WEIGHT, VALID_BMI, VALID_BLOOD_TYPE, VALID_RECORD, VALID_ALLERGIES,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                VALID_CONDITIONS, VALID_TREATMENTS);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_IC, VALID_NAME, VALID_DOB, VALID_PHONE, null,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                VALID_ADDRESS, VALID_HEIGHT, VALID_WEIGHT, VALID_BMI, VALID_BLOOD_TYPE, VALID_RECORD, VALID_ALLERGIES,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                VALID_CONDITIONS, VALID_TREATMENTS);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void toModelType_emptyAddress_returnPatientWithEmptyAddressField() throws IllegalValueException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonAdaptedPatient jsonAdaptedPatient \u003d new JsonAdaptedPatient(VALID_IC, VALID_NAME, VALID_DOB, VALID_PHONE,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                VALID_EMAIL, EMPTY_OPTIONAL_FIELD, VALID_HEIGHT, VALID_WEIGHT, VALID_BMI, VALID_BLOOD_TYPE,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                VALID_RECORD, VALID_ALLERGIES, VALID_CONDITIONS, VALID_TREATMENTS);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Patient patient \u003d jsonAdaptedPatient.toModelType();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(patient.getAddress().isEmpty());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_IC, VALID_NAME, VALID_DOB, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                INVALID_ADDRESS, VALID_HEIGHT, VALID_WEIGHT, VALID_BMI, VALID_BLOOD_TYPE, VALID_RECORD, VALID_ALLERGIES,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                VALID_CONDITIONS, VALID_TREATMENTS);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_IC, VALID_NAME, VALID_DOB, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                null, VALID_HEIGHT, VALID_WEIGHT, VALID_BMI, VALID_BLOOD_TYPE, VALID_RECORD, VALID_ALLERGIES,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                VALID_CONDITIONS, VALID_TREATMENTS);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void toModelType_emptyHeight_returnPatientWithEmptyHeightField() throws IllegalValueException {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonAdaptedPatient jsonAdaptedPatient \u003d new JsonAdaptedPatient(VALID_IC, VALID_NAME, VALID_DOB, VALID_PHONE,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                VALID_EMAIL, VALID_ADDRESS, EMPTY_OPTIONAL_FIELD, VALID_WEIGHT, VALID_BMI, VALID_BLOOD_TYPE,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                VALID_RECORD, VALID_ALLERGIES, VALID_CONDITIONS, VALID_TREATMENTS);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Patient patient \u003d jsonAdaptedPatient.toModelType();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(patient.getHeight().isEmpty());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void toModelType_invalidHeight_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_IC, VALID_NAME, VALID_DOB, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                VALID_ADDRESS, INVALID_HEIGHT, VALID_WEIGHT, VALID_BMI, VALID_BLOOD_TYPE, VALID_RECORD, VALID_ALLERGIES,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                VALID_CONDITIONS, VALID_TREATMENTS);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String expectedMessage \u003d Height.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void toModelType_nullHeight_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_IC, VALID_NAME, VALID_DOB, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                VALID_ADDRESS, null, VALID_WEIGHT, VALID_BMI, VALID_BLOOD_TYPE, VALID_RECORD, VALID_ALLERGIES,"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                VALID_CONDITIONS, VALID_TREATMENTS);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Height.class.getSimpleName());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void toModelType_emptyWeight_returnPatientWithEmptyWeightField() throws IllegalValueException {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonAdaptedPatient jsonAdaptedPatient \u003d new JsonAdaptedPatient(VALID_IC, VALID_NAME, VALID_DOB, VALID_PHONE,"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                VALID_EMAIL, VALID_ADDRESS, VALID_HEIGHT, EMPTY_OPTIONAL_FIELD, VALID_BMI, VALID_BLOOD_TYPE,"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                VALID_RECORD, VALID_ALLERGIES, VALID_CONDITIONS, VALID_TREATMENTS);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Patient patient \u003d jsonAdaptedPatient.toModelType();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(patient.getWeight().isEmpty());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void toModelType_invalidWeight_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_IC, VALID_NAME, VALID_DOB, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                VALID_ADDRESS, VALID_HEIGHT, INVALID_WEIGHT, VALID_BMI, VALID_BLOOD_TYPE, VALID_RECORD, VALID_ALLERGIES,"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                VALID_CONDITIONS, VALID_TREATMENTS);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        String expectedMessage \u003d Weight.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void toModelType_nullWeight_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_IC, VALID_NAME, VALID_DOB, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                VALID_ADDRESS, VALID_HEIGHT, null, VALID_BMI, VALID_BLOOD_TYPE, VALID_RECORD, VALID_ALLERGIES,"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                VALID_CONDITIONS, VALID_TREATMENTS);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Weight.class.getSimpleName());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void toModelType_emptyBmi_returnPatientWithEmptyBmiField() throws IllegalValueException {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonAdaptedPatient jsonAdaptedPatient \u003d new JsonAdaptedPatient(VALID_IC, VALID_NAME, VALID_DOB, VALID_PHONE,"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                VALID_EMAIL, VALID_ADDRESS, VALID_HEIGHT, VALID_WEIGHT, EMPTY_OPTIONAL_FIELD, VALID_BLOOD_TYPE,"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                VALID_RECORD, VALID_ALLERGIES, VALID_CONDITIONS, VALID_TREATMENTS);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Patient patient \u003d jsonAdaptedPatient.toModelType();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(patient.getBmi().isEmpty());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public void toModelType_invalidBmi_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_IC, VALID_NAME, VALID_DOB, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                VALID_ADDRESS, VALID_HEIGHT, VALID_WEIGHT, INVALID_BMI, VALID_BLOOD_TYPE, VALID_RECORD, VALID_ALLERGIES,"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                VALID_CONDITIONS, VALID_TREATMENTS);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        String expectedMessage \u003d Bmi.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void toModelType_nullBmi_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_IC, VALID_NAME, VALID_DOB, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                VALID_ADDRESS, VALID_HEIGHT, VALID_WEIGHT, null, VALID_BLOOD_TYPE, VALID_RECORD, VALID_ALLERGIES,"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                VALID_CONDITIONS, VALID_TREATMENTS);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Bmi.class.getSimpleName());"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void toModelType_emptyBloodType_returnPatientWithEmptyBloodTypeField() throws IllegalValueException {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonAdaptedPatient jsonAdaptedPatient \u003d new JsonAdaptedPatient(VALID_IC, VALID_NAME, VALID_DOB, VALID_PHONE,"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                VALID_EMAIL, VALID_ADDRESS, VALID_HEIGHT, VALID_WEIGHT, VALID_BMI, EMPTY_OPTIONAL_FIELD,"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                VALID_RECORD, VALID_ALLERGIES, VALID_CONDITIONS, VALID_TREATMENTS);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Patient patient \u003d jsonAdaptedPatient.toModelType();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(patient.getBloodType().isEmpty());"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void toModelType_invalidBloodType_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_IC, VALID_NAME, VALID_DOB, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                VALID_ADDRESS, VALID_HEIGHT, VALID_WEIGHT, VALID_BMI, INVALID_BLOOD_TYPE, VALID_RECORD, VALID_ALLERGIES,"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                VALID_CONDITIONS, VALID_TREATMENTS);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        String expectedMessage \u003d BloodType.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void toModelType_nullBloodType_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_IC, VALID_NAME, VALID_DOB, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                VALID_ADDRESS, VALID_HEIGHT, VALID_WEIGHT, VALID_BMI, null, VALID_RECORD, VALID_ALLERGIES,"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                VALID_CONDITIONS, VALID_TREATMENTS);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, BloodType.class.getSimpleName());"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void toModelType_invalidAllergies_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        List\u003cJsonAdaptedAllergy\u003e invalidAllergies \u003d new ArrayList\u003c\u003e(VALID_ALLERGIES);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        invalidAllergies.add(new JsonAdaptedAllergy(INVALID_ALLERGY));"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_IC, VALID_NAME, VALID_DOB, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            VALID_ADDRESS, VALID_HEIGHT, VALID_WEIGHT, VALID_BMI, VALID_BLOOD_TYPE, VALID_RECORD, invalidAllergies,"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            VALID_CONDITIONS, VALID_TREATMENTS);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertThrows(IllegalValueException.class, patient::toModelType);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void toModelType_invalidConditions_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        List\u003cJsonAdaptedCondition\u003e invalidConditions \u003d new ArrayList\u003c\u003e(VALID_CONDITIONS);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        invalidConditions.add(new JsonAdaptedCondition(INVALID_CONDITION));"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_IC, VALID_NAME, VALID_DOB, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            VALID_ADDRESS, VALID_HEIGHT, VALID_WEIGHT, VALID_BMI, VALID_BLOOD_TYPE, VALID_RECORD, VALID_ALLERGIES,"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            invalidConditions, VALID_TREATMENTS);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertThrows(IllegalValueException.class, patient::toModelType);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void toModelType_invalidTreatments_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        List\u003cJsonAdaptedTreatment\u003e invalidTreatments \u003d new ArrayList\u003c\u003e(VALID_TREATMENTS);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        invalidTreatments.add(new JsonAdaptedTreatment(INVALID_TREATMENT));"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_IC, VALID_NAME, VALID_DOB, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                VALID_ADDRESS, VALID_HEIGHT, VALID_WEIGHT, VALID_BMI, VALID_BLOOD_TYPE, VALID_RECORD, VALID_ALLERGIES,"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                VALID_CONDITIONS, invalidTreatments);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(IllegalValueException.class, patient::toModelType);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void toModelType_nullRecord_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_IC, VALID_NAME, VALID_DOB, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                VALID_ADDRESS, VALID_HEIGHT, VALID_WEIGHT, VALID_BMI, VALID_BLOOD_TYPE, null, VALID_ALLERGIES,"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                VALID_CONDITIONS, VALID_TREATMENTS);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Record.class.getSimpleName());"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 110,
      "wang-jun-hao": 26,
      "divakarmal": 58,
      "foojingyi": 95,
      "PrestonTYR": 12,
      "-": 55
    }
  },
  {
    "path": "src/test/java/seedu/medibook/storage/JsonAdaptedRecordTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static seedu.medibook.storage.JsonAdaptedRecord.MISSING_HEIGHT_RECORD_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static seedu.medibook.storage.JsonAdaptedRecord.MISSING_WEIGHT_RECORD_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.commonfields.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.patient.Height;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.patient.Record;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.patient.Weight;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class JsonAdaptedRecordTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final String VALID_DATE \u003d \"09-07-1990\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final String VALID_HEIGHT \u003d \"167\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final String VALID_WEIGHT \u003d \"67.7\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final String INVALID_DATE \u003d \"32-07-1990\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final String INVALID_HEIGHT \u003d \"i67\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final String INVALID_WEIGHT \u003d \"6o.7\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final HashMap\u003cString, String\u003e VALID_RECORD_HEIGHT \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final HashMap\u003cString, String\u003e VALID_RECORD_WEIGHT \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final HashMap\u003cString, String\u003e INVALID_RECORD_HEIGHT \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final HashMap\u003cString, String\u003e INVALID_RECORD_WEIGHT \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        INVALID_RECORD_HEIGHT.put(INVALID_DATE, INVALID_HEIGHT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        INVALID_RECORD_WEIGHT.put(VALID_DATE, INVALID_WEIGHT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        VALID_RECORD_HEIGHT.put(VALID_DATE, VALID_HEIGHT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        VALID_RECORD_WEIGHT.put(VALID_DATE, VALID_WEIGHT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void toModelType_validRecords_returnsRecord() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonAdaptedRecord record \u003d new JsonAdaptedRecord(VALID_RECORD_HEIGHT, VALID_RECORD_WEIGHT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        HashMap\u003cDate, Height\u003e heightRecord \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        HashMap\u003cDate, Weight\u003e weightRecord \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        heightRecord.put(new Date(VALID_DATE, true), new Height(VALID_HEIGHT));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        weightRecord.put(new Date(VALID_DATE, true), new Weight(VALID_WEIGHT));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Record expected \u003d new Record(heightRecord, weightRecord);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(expected, record.toModelType());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void toModelType_invalidHeightRecord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonAdaptedRecord record \u003d new JsonAdaptedRecord(INVALID_RECORD_HEIGHT, VALID_RECORD_WEIGHT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(IllegalArgumentException.class, Date.MESSAGE_CONSTRAINTS, record::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void toModelType_nullHeightRecord_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonAdaptedRecord record \u003d new JsonAdaptedRecord(null, VALID_RECORD_WEIGHT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(IllegalValueException.class, MISSING_HEIGHT_RECORD_MESSAGE, record::toModelType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void toModelType_invalidWeightRecord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonAdaptedRecord record \u003d new JsonAdaptedRecord(VALID_RECORD_HEIGHT, INVALID_RECORD_WEIGHT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(IllegalArgumentException.class, Weight.MESSAGE_CONSTRAINTS, record::toModelType);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void toModelType_nullWeightRecord_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonAdaptedRecord record \u003d new JsonAdaptedRecord(VALID_RECORD_HEIGHT, null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(IllegalValueException.class, MISSING_WEIGHT_RECORD_MESSAGE, record::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 72
    }
  },
  {
    "path": "src/test/java/seedu/medibook/storage/JsonMediBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.getTypicalMediBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.getTypicalMediBookWithAllEmptyMedicalNoteList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.MediBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ReadOnlyMediBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNoteList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public class JsonMediBookStorageTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonMediBookStorageTest\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void readMediBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readMediBook(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private java.util.Optional\u003cReadOnlyMediBook\u003e readMediBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return new JsonMediBookStorage(Paths.get(filePath)).readMediBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertFalse(readMediBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readMediBook(\"notJsonFormatMediBook.json\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void readMediBook_invalidPatientMediBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readMediBook(\"invalidPatientMediBook.json\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void readMediBook_invalidAndValidPatientMediBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readMediBook(\"invalidAndValidPatientMediBook.json\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void readAndSaveMediBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempMediBook.json\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        MediBook original \u003d getTypicalMediBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        // This is the expected MediBook when program loads."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        MediBook originalWithAllEmptyMedicalNoteList \u003d getTypicalMediBookWithAllEmptyMedicalNoteList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        JsonMediBookStorage jsonMediBookStorage \u003d new JsonMediBookStorage(filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        jsonMediBookStorage.saveMediBook(original, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        ReadOnlyMediBook readBack \u003d jsonMediBookStorage.readMediBook(filePath).get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertEquals(originalWithAllEmptyMedicalNoteList, new MediBook(readBack));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        original.addPatient(HOON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        originalWithAllEmptyMedicalNoteList.addPatient(HOON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        original.removePatient(ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Patient copyOfAliceWithEmptyMedicalNoteList \u003d new PatientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        copyOfAliceWithEmptyMedicalNoteList.setMedicalNoteList(new MedicalNoteList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        originalWithAllEmptyMedicalNoteList.removePatient(copyOfAliceWithEmptyMedicalNoteList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        jsonMediBookStorage.saveMediBook(original, filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        readBack \u003d jsonMediBookStorage.readMediBook(filePath).get();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertEquals(originalWithAllEmptyMedicalNoteList, new MediBook(readBack));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        original.addPatient(IDA);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        originalWithAllEmptyMedicalNoteList.addPatient(IDA);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        jsonMediBookStorage.saveMediBook(original); // file path not specified"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        readBack \u003d jsonMediBookStorage.readMediBook().get(); // file path not specified"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertEquals(originalWithAllEmptyMedicalNoteList, new MediBook(readBack));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void saveMediBook_nullMediBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveMediBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Saves {@code mediBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private void saveMediBook(ReadOnlyMediBook mediBook, String filePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            new JsonMediBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                    .saveMediBook(mediBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void saveMediBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveMediBook(new MediBook(), null));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 17,
      "divakarmal": 107
    }
  },
  {
    "path": "src/test/java/seedu/medibook/storage/JsonMedicalNoteListStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static seedu.medibook.storage.JsonMedicalNoteListStorage.NAME_DIR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static seedu.medibook.storage.JsonMedicalNoteListStorage.NAME_EXTENSION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static seedu.medibook.testutil.TypicalMedicalNotes.VALID_MEDICAL_NOTE1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static seedu.medibook.testutil.TypicalMedicalNotes.VALID_MEDICAL_NOTE2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static seedu.medibook.testutil.TypicalMedicalNotes.getTypicalMedicalNoteList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.commons.util.FileUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNoteList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.medicalnote.ReadOnlyMedicalNoteList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.patient.Ic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class JsonMedicalNoteListStorageTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"JsonMedicalNoteListStorageTest\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final Ic IC \u003d new Ic(\"S7329204G\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void readMedicalNoteList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readMedicalNoteList(null, IC));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private Optional\u003cReadOnlyMedicalNoteList\u003e readMedicalNoteList(String filePath, Ic ic) throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return new JsonMedicalNoteListStorage(addToTestDataPathIfNotNull(filePath))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .readMedicalNoteList(addToTestDataPathIfNotNull(filePath), ic);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(readMedicalNoteList(\"NonExistentFile.json\", IC).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readMedicalNoteList(\"notJsonFormatMedicalNotes\", IC));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void readMedicalNoteList_invalidPatientMedicalNotes_throwDataConversionException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readMedicalNoteList(\"invalidPatientMedicalNotes\", IC));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void readMedicalNoteList_invalidAndValidPatientMedicalNotes_throwDataConversionException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                readMedicalNoteList(\"invalidAndValidPatientMedicalNotes\", IC));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void readAndSaveMedicalNoteList_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempMedicalNotes\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        MedicalNoteList original \u003d getTypicalMedicalNoteList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonMedicalNoteListStorage jsonMedicalNoteListStorage \u003d new JsonMedicalNoteListStorage(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        jsonMedicalNoteListStorage.saveMedicalNoteList(original, filePath, IC);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        ReadOnlyMedicalNoteList readBack \u003d jsonMedicalNoteListStorage.readMedicalNoteList(filePath, IC).get();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(original, new MedicalNoteList(readBack.getMedicalNoteList()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        original.add(VALID_MEDICAL_NOTE1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        jsonMedicalNoteListStorage.saveMedicalNoteList(original, filePath, IC);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        readBack \u003d jsonMedicalNoteListStorage.readMedicalNoteList(filePath, IC).get();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(original, new MedicalNoteList(readBack.getMedicalNoteList()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        original.add(VALID_MEDICAL_NOTE2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        jsonMedicalNoteListStorage.saveMedicalNoteList(original, IC); // file path not specified"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        readBack \u003d jsonMedicalNoteListStorage.readMedicalNoteList(IC).get(); // file path not specified"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(original, new MedicalNoteList(readBack.getMedicalNoteList()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void saveMedicalNoteList_nullMMedicalNoteList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveMedicalNoteList(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Saves {@code medicalNoteList} at the specified {@code filePath}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private void saveMedicalNoteList(ReadOnlyMedicalNoteList medicalNoteList, String filePath) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            new JsonMedicalNoteListStorage(addToTestDataPathIfNotNull(filePath))"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                    .saveMedicalNoteList(medicalNoteList, addToTestDataPathIfNotNull(filePath), IC);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void saveMedicalNoteList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveMedicalNoteList(new MedicalNoteList(), null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void saveAndDeleteMedicalNoteList_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempMedicalNotes\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        MedicalNoteList original \u003d getTypicalMedicalNoteList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonMedicalNoteListStorage jsonMedicalNoteListStorage \u003d new JsonMedicalNoteListStorage(filePath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // Save in new file and check if file exists"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        jsonMedicalNoteListStorage.saveMedicalNoteList(original, filePath, IC);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(FileUtil.isFileExists(filePath.resolve(NAME_DIR).resolve(IC + NAME_EXTENSION)));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // Delete the new file created"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        jsonMedicalNoteListStorage.deleteMedicalNoteList(IC);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(FileUtil.isFileExists(filePath.resolve(NAME_DIR).resolve(IC + NAME_EXTENSION)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void saveAndDeleteAllMedicalNoteList_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempMedicalNotes\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        MedicalNoteList original \u003d getTypicalMedicalNoteList();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonMedicalNoteListStorage jsonMedicalNoteListStorage \u003d new JsonMedicalNoteListStorage(filePath);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // Save in new file and check if file exists"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Ic ic1 \u003d new Ic(\"T6837664L\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        jsonMedicalNoteListStorage.saveMedicalNoteList(original, filePath, ic1);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(FileUtil.isFileExists(filePath.resolve(NAME_DIR).resolve(ic1 + NAME_EXTENSION)));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Ic ic2 \u003d new Ic(\"S9674263W\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        jsonMedicalNoteListStorage.saveMedicalNoteList(original, filePath, ic2);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(FileUtil.isFileExists(filePath.resolve(NAME_DIR).resolve(ic2 + NAME_EXTENSION)));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Ic ic3 \u003d new Ic(\"S6848336I\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        jsonMedicalNoteListStorage.saveMedicalNoteList(original, filePath, ic3);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(FileUtil.isFileExists(filePath.resolve(NAME_DIR).resolve(ic3 + NAME_EXTENSION)));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // Delete the new files created"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        jsonMedicalNoteListStorage.deleteAllMedicalNoteList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(FileUtil.isFileExists(filePath.resolve(NAME_DIR).resolve(ic1 + NAME_EXTENSION)));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(FileUtil.isFileExists(filePath.resolve(NAME_DIR).resolve(ic2 + NAME_EXTENSION)));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(FileUtil.isFileExists(filePath.resolve(NAME_DIR).resolve(ic3 + NAME_EXTENSION)));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void saveAndRenameMedicalNoteList_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempMedicalNotes\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        MedicalNoteList original \u003d getTypicalMedicalNoteList();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonMedicalNoteListStorage jsonMedicalNoteListStorage \u003d new JsonMedicalNoteListStorage(filePath);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // Save in new file and check if file exists"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        jsonMedicalNoteListStorage.saveMedicalNoteList(original, filePath, IC);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Path pathToOldFile \u003d filePath.resolve(NAME_DIR).resolve(IC + NAME_EXTENSION);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(FileUtil.isFileExists(pathToOldFile));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // Rename the file that was created"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Ic newIc \u003d new Ic(\"T3240942K\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        jsonMedicalNoteListStorage.renameMedicalNoteList(IC, newIc);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(FileUtil.isFileExists(pathToOldFile));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Path pathToNewFile \u003d filePath.resolve(NAME_DIR).resolve(newIc + NAME_EXTENSION);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(FileUtil.isFileExists(pathToNewFile));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 178
    }
  },
  {
    "path": "src/test/java/seedu/medibook/storage/JsonSerializableMediBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.MediBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.testutil.TypicalPatients;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public class JsonSerializableMediBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableMediBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private static final Path TYPICAL_PATIENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPatientMediBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private static final Path INVALID_PATIENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPatientMediBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private static final Path DUPLICATE_PATIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePatientMediBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void toModelType_typicalPatientsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        JsonSerializableMediBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PATIENTS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                JsonSerializableMediBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        MediBook mediBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        MediBook typicalPatientsMediBookWithAllEmptyMedicalNoteList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                TypicalPatients.getTypicalMediBookWithAllEmptyMedicalNoteList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertEquals(mediBookFromFile, typicalPatientsMediBookWithAllEmptyMedicalNoteList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void toModelType_invalidPatientFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        JsonSerializableMediBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PATIENTS_FILE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                JsonSerializableMediBook.class).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void toModelType_duplicatePatients_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        JsonSerializableMediBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PATIENT_FILE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "                JsonSerializableMediBook.class).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableMediBook.MESSAGE_DUPLICATE_PATIENT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 3,
      "divakarmal": 22,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/medibook/storage/JsonSerializableMedicalNoteListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNoteList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.testutil.TypicalMedicalNotes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class JsonSerializableMedicalNoteListTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableMedicalNoteListTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final Path TYPICAL_PATIENTS_MEDICAL_NOTES \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"typicalPatientMedicalNotes.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final Path INVALID_PATIENTS_MEDICAL_NOTES \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"invalidPatientMedicalNotes.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void toModelType_typicalPatientsFile_success() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonSerializableMedicalNoteList dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PATIENTS_MEDICAL_NOTES,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                JsonSerializableMedicalNoteList.class).get();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        MedicalNoteList medicalNotesFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        MedicalNoteList typicalPatientsMedicalNotes \u003d TypicalMedicalNotes.getTypicalMedicalNoteList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(medicalNotesFromFile, typicalPatientsMedicalNotes);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void toModelType_invalidPatientFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonSerializableMedicalNoteList dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PATIENTS_MEDICAL_NOTES,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                JsonSerializableMedicalNoteList.class).get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 41
    }
  },
  {
    "path": "src/test/java/seedu/medibook/storage/JsonSerializableUserAccountsListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.UserAccountsList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.testutil.TypicalAccounts;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "public class JsonSerializableUserAccountsListTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableUserAccountsListTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private static final Path TYPICAL_ACCOUNTS \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"typicalAccounts.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private static final Path INVALID_ACCOUNTS \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"invalidAccounts.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void toModelType_typicalAccountsFile_success() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        JsonSerializableUserAccountsList dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_ACCOUNTS,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                JsonSerializableUserAccountsList.class).get();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        UserAccountsList accountsFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        UserAccountsList typicalAccounts \u003d TypicalAccounts.getTypicalAccountsList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertEquals(accountsFromFile, typicalAccounts);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void toModelType_invalidAccountsFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        JsonSerializableUserAccountsList dataFromFile \u003d JsonUtil.readJsonFile(INVALID_ACCOUNTS,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                JsonSerializableUserAccountsList.class).get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PrestonTYR": 40
    }
  },
  {
    "path": "src/test/java/seedu/medibook/storage/JsonUserAccountsListStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalLoginException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.Account;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.commonfields.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.doctor.Doctor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.doctor.Mcr;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "public class JsonUserAccountsListStorageTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"JsonUserAccountsListStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private static final Path VALID_DIRECTORY \u003d TEST_DATA_FOLDER.resolve(\"accounts.json\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private static final Path INVALID_DIRECTORY \u003d TEST_DATA_FOLDER.resolve(\"invalid.json\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private static final String VALID_USERNAME \u003d \"username\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private static final String VALID_PASSWORD \u003d \"password\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private static final String VALID_DOCTORNAME \u003d \"Doctor Name\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private static final String VALID_DOCTORMCR \u003d \"M12345Q\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private static final String INVALID_USERNAME \u003d \"a\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private static final String INVALID_PASSWORD \u003d \"b\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private static final String INVALID_DOCTORNAME \u003d \"Doctor N@me\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private static final String INVALID_DOCTORMCR \u003d \"M1234QQ\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void login_invalidInfo_throwsIllegalLoginException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        JsonUserAccountsListStorage storage \u003d new JsonUserAccountsListStorage(VALID_DIRECTORY);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertThrows(IllegalLoginException.class, () -\u003e storage.login(\"invaliduser\", \"invalidpass\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void login_invalidFilepath_throwsIllegalLoginException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        JsonUserAccountsListStorage storage \u003d new JsonUserAccountsListStorage(INVALID_DIRECTORY);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertThrows(IllegalLoginException.class, () -\u003e storage.login(\"user1\", \"password1\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void login_validInfo_success() throws IllegalValueException, DataConversionException, IllegalLoginException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        JsonUserAccountsListStorage storage \u003d new JsonUserAccountsListStorage(VALID_DIRECTORY);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Optional\u003cAccount\u003e expectedResult \u003d Optional.of(new Account(\"user1\", \"password1\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                new Doctor(new Name(\"Doctor\"), new Mcr(\"M12345Q\"))));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        Optional\u003cAccount\u003e result \u003d storage.login(\"user1\", \"password1\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertEquals(result, expectedResult);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void createAccount_invalidUsernameInput_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        JsonUserAccountsListStorage storage \u003d new JsonUserAccountsListStorage(VALID_DIRECTORY);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e storage.createAccount(INVALID_USERNAME, VALID_PASSWORD,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                VALID_DOCTORNAME, VALID_DOCTORMCR));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void createAccount_invalidPasswordInput_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        JsonUserAccountsListStorage storage \u003d new JsonUserAccountsListStorage(VALID_DIRECTORY);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e storage.createAccount(VALID_USERNAME, INVALID_PASSWORD,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                VALID_DOCTORNAME, VALID_DOCTORMCR));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void createAccount_invalidNameInput_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        JsonUserAccountsListStorage storage \u003d new JsonUserAccountsListStorage(VALID_DIRECTORY);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e storage.createAccount(VALID_USERNAME, VALID_PASSWORD,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                INVALID_DOCTORNAME, VALID_DOCTORMCR));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void createAccount_invalidMcrInput_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        JsonUserAccountsListStorage storage \u003d new JsonUserAccountsListStorage(VALID_DIRECTORY);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e storage.createAccount(VALID_USERNAME, VALID_PASSWORD,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                VALID_DOCTORNAME, INVALID_DOCTORMCR));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void createAccount_nullNameInput_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        JsonUserAccountsListStorage storage \u003d new JsonUserAccountsListStorage(VALID_DIRECTORY);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e storage.createAccount(VALID_USERNAME, VALID_PASSWORD,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                null, VALID_DOCTORMCR));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void createAccount_invalidNameInput_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        JsonUserAccountsListStorage storage \u003d new JsonUserAccountsListStorage(VALID_DIRECTORY);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e storage.createAccount(VALID_USERNAME, VALID_PASSWORD,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                VALID_DOCTORNAME, null));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void createAccount_validUsernameAlreadyExistsInput_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        JsonUserAccountsListStorage storage \u003d new JsonUserAccountsListStorage(VALID_DIRECTORY);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e storage.createAccount(VALID_USERNAME, VALID_PASSWORD,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                VALID_DOCTORNAME, VALID_DOCTORMCR));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public void createAccount_validMcrAlreadyExistsInput_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        JsonUserAccountsListStorage storage \u003d new JsonUserAccountsListStorage(VALID_DIRECTORY);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e storage.createAccount(VALID_USERNAME, VALID_PASSWORD,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                VALID_DOCTORNAME, VALID_DOCTORMCR));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PrestonTYR": 116
    }
  },
  {
    "path": "src/test/java/seedu/medibook/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        userPrefs.setMediBookFilePath(Paths.get(\"medibook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 6,
      "-": 117
    }
  },
  {
    "path": "src/test/java/seedu/medibook/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static seedu.medibook.testutil.TypicalMedicalNotes.getTypicalMedicalNoteList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.getTypicalMediBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.testutil.TypicalPatients.getTypicalMediBookWithAllEmptyMedicalNoteList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.MediBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.ReadOnlyMediBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNoteList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.medicalnote.ReadOnlyMedicalNoteList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.patient.Ic;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        JsonMediBookStorage mediBookStorage \u003d new JsonMediBookStorage(getTempFilePath(\"mb\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        JsonMedicalNoteListStorage medicalNoteListStorage \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                new JsonMedicalNoteListStorage(getTempFilePath(\"mnl\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        JsonUserAccountsListStorage userAccountStorage \u003d new JsonUserAccountsListStorage(getTempFilePath(\"account\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        storageManager \u003d new StorageManager(mediBookStorage, userPrefsStorage, medicalNoteListStorage,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                userAccountStorage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(getTempFilePath(\"prefs\"), storageManager.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void getMedicalNotesDirPath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(getTempFilePath(\"mnl\"), storageManager.getMedicalNotesDirPath());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void mediBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "         * {@link JsonMediBookStorage} class."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "         * More extensive testing of MediBook saving/reading is done in {@link JsonMediBookStorageTest} class."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "         * Expected behaviour is that only patients\u0027 information are loaded and they are initialised with"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "         * empty medical note list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "         * Hence, the MediBook that we should check against after retrieving from storage is one where all patients"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "         * hold empty medical note list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        MediBook original \u003d getTypicalMediBook();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        storageManager.saveMediBook(original);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        ReadOnlyMediBook retrieved \u003d storageManager.readMediBook().get();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        MediBook originalWithAllEmptyMedicalNoteList \u003d getTypicalMediBookWithAllEmptyMedicalNoteList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        assertEquals(originalWithAllEmptyMedicalNoteList, new MediBook(retrieved));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public void getMediBookFilePath() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        assertNotNull(storageManager.getMediBookFilePath());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void medicalNotesReadSave() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "         * {@link JsonMedicalNoteListStorage} class."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "         * More extensive testing of MedicalNoteList saving/reading is done"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "         * in {@link JsonMedicalNoteListStorageTest} class."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "         */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        MedicalNoteList original \u003d getTypicalMedicalNoteList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Ic ic \u003d new Ic(\"T0012393D\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        storageManager.saveMedicalNoteList(original, ic);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        ReadOnlyMedicalNoteList retrieved \u003d storageManager.readMedicalNoteList(ic).get();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(original, new MedicalNoteList(retrieved.getMedicalNoteList()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void medicalNotesSaveRenameReadDelete() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "         * {@link JsonMedicalNoteListStorage} class."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "         * More extensive testing of MedicalNoteList saving/renaming/reading/deleting is done"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "         * in {@link JsonMedicalNoteListStorageTest} class."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "         */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        MedicalNoteList original \u003d getTypicalMedicalNoteList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Ic oldIc \u003d new Ic(\"T0012393D\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        storageManager.saveMedicalNoteList(original, oldIc);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Ic newIc \u003d new Ic(\"S4398349Z\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        storageManager.renameMedicalNoteList(oldIc, newIc);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        ReadOnlyMedicalNoteList retrieved \u003d storageManager.readMedicalNoteList(newIc).get();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(original, new MedicalNoteList(retrieved.getMedicalNoteList()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        storageManager.deleteMedicalNoteList(newIc);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(storageManager.readMedicalNoteList(newIc).isEmpty());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void medicalNotesSaveDeleteAllRead() throws Exception {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "         * {@link JsonMedicalNoteListStorage} class."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "         * More extensive testing of MedicalNoteList saving/delete all/read is done"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "         * in {@link JsonMedicalNoteListStorageTest} class."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "         */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        MedicalNoteList original \u003d getTypicalMedicalNoteList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Ic ic1 \u003d new Ic(\"T6837664L\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        storageManager.saveMedicalNoteList(original, ic1);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Ic ic2 \u003d new Ic(\"S9674263W\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        storageManager.saveMedicalNoteList(original, ic2);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Ic ic3 \u003d new Ic(\"S6848336I\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        storageManager.saveMedicalNoteList(original, ic3);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        ReadOnlyMedicalNoteList retrieved \u003d storageManager.readMedicalNoteList(ic1).get();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(original, new MedicalNoteList(retrieved.getMedicalNoteList()));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        retrieved \u003d storageManager.readMedicalNoteList(ic2).get();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(original, new MedicalNoteList(retrieved.getMedicalNoteList()));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        retrieved \u003d storageManager.readMedicalNoteList(ic3).get();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(original, new MedicalNoteList(retrieved.getMedicalNoteList()));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        storageManager.deleteAllMedicalNoteList();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(storageManager.readMedicalNoteList(ic1).isEmpty());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(storageManager.readMedicalNoteList(ic2).isEmpty());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(storageManager.readMedicalNoteList(ic3).isEmpty());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 89,
      "wang-jun-hao": 7,
      "divakarmal": 14,
      "PrestonTYR": 3,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/medibook/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/medibook/testutil/EditPatientDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.commonfields.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicaldetail.Allergy;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicaldetail.Condition;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicaldetail.Treatment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.BloodType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.DateOfBirth;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Height;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Ic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Weight;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * A utility class to help with building EditPatientDescriptor objects."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public class EditPatientDescriptorBuilder {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private EditCommand.EditPatientDescriptor descriptor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public EditPatientDescriptorBuilder() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        descriptor \u003d new EditCommand.EditPatientDescriptor();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public EditPatientDescriptorBuilder(EditCommand.EditPatientDescriptor descriptor) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        this.descriptor \u003d new EditCommand.EditPatientDescriptor(descriptor);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Returns an {@code EditPatientDescriptor} with fields containing {@code patient}\u0027s details"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public EditPatientDescriptorBuilder(Patient patient) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        descriptor \u003d new EditCommand.EditPatientDescriptor();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        descriptor.setIc(patient.getIc());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        descriptor.setName(patient.getName());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        descriptor.setDateOfBirth(patient.getDateOfBirth());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        descriptor.setPhone(patient.getPhone());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        descriptor.setEmail(patient.getEmail().get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        descriptor.setAddress(patient.getAddress().get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        descriptor.setHeight(patient.getHeight().get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        descriptor.setWeight(patient.getWeight().get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        descriptor.setBloodType(patient.getBloodType().get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        descriptor.setAllergies(patient.getAllergies());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        descriptor.setConditions(patient.getConditions());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        descriptor.setTreatments(patient.getTreatments());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Sets the {@code Ic} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public EditPatientDescriptorBuilder withIc(String ic) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        descriptor.setIc(new Ic(ic));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public EditPatientDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Sets the {@code DateOfBirth} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public EditPatientDescriptorBuilder withDateOfBirth(String dateOfBirth) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        descriptor.setDateOfBirth(new DateOfBirth(dateOfBirth));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public EditPatientDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public EditPatientDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public EditPatientDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Sets the {@code Height} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public EditPatientDescriptorBuilder withHeight(String height) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        descriptor.setHeight(new Height(height));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Sets the {@code Weight} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public EditPatientDescriptorBuilder withWeight(String weight) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        descriptor.setWeight(new Weight(weight));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Sets the {@code BloodType} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public EditPatientDescriptorBuilder withBloodType(String bloodType) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        descriptor.setBloodType(new BloodType(bloodType));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Parses the {@code allergies} into a {@code Set\u003cAllergy\u003e} and set it to the {@code EditPatientDescriptor}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public EditPatientDescriptorBuilder withAllergies(String... allergies) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        Set\u003cAllergy\u003e allergySet \u003d Stream.of(allergies).map(Allergy::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        descriptor.setAllergies(allergySet);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Parses the {@code conditions} into a {@code Set\u003cCondition\u003e} and set it to the {@code EditPatientDescriptor}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public EditPatientDescriptorBuilder withConditions(String... conditions) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        Set\u003cCondition\u003e conditionSet \u003d Stream.of(conditions).map(Condition::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        descriptor.setConditions(conditionSet);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Parses the {@code treatments} into a {@code Set\u003cTreatment\u003e} and set it to the {@code EditPatientDescriptor}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public EditPatientDescriptorBuilder withTreatments(String... treatments) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        Set\u003cTreatment\u003e treatmentSet \u003d Stream.of(treatments).map(Treatment::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        descriptor.setTreatments(treatmentSet);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public EditCommand.EditPatientDescriptor build() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 1,
      "divakarmal": 120,
      "foojingyi": 30,
      "PrestonTYR": 10
    }
  },
  {
    "path": "src/test/java/seedu/medibook/testutil/MediBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.MediBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * A utility class to help with building MediBook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " *     {@code MediBook mb \u003d new MediBookBuilder().withPatient(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public class MediBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private MediBook mediBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public MediBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        mediBook \u003d new MediBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public MediBookBuilder(MediBook mediBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        this.mediBook \u003d mediBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Adds a new {@code Patient} to the {@code MediBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public MediBookBuilder withPatient(Patient patient) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        mediBook.addPatient(patient);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public MediBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return mediBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 34
    }
  },
  {
    "path": "src/test/java/seedu/medibook/testutil/PatientBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.commonfields.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicaldetail.Allergy;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicaldetail.Condition;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicaldetail.Treatment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNoteList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.BloodType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Bmi;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.DateOfBirth;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Height;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Ic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Weight;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * A utility class to help with building Patient objects."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public class PatientBuilder {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String DEFAULT_IC \u003d \"S5436781A\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String DEFAULT_DOB \u003d \"08-09-1954\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String DEFAULT_HEIGHT \u003d \"170\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String DEFAULT_WEIGHT \u003d \"58.7\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final String DEFAULT_BMI \u003d \"20.3\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final String DEFAULT_BLOOD_TYPE \u003d \"A+\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private Ic ic;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private DateOfBirth dateOfBirth;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private Optional\u003cEmail\u003e email;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private Optional\u003cAddress\u003e address;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private Optional\u003cHeight\u003e height;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private Optional\u003cWeight\u003e weight;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private Optional\u003cBmi\u003e bmi;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    private Optional\u003cBloodType\u003e bloodType;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private Set\u003cAllergy\u003e allergies;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private Set\u003cCondition\u003e conditions;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private Set\u003cTreatment\u003e treatments;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    private MedicalNoteList medicalNoteList;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Creates a {@code PatientBuilder} with the default details."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public PatientBuilder() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        ic \u003d new Ic(DEFAULT_IC);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        dateOfBirth \u003d new DateOfBirth(DEFAULT_DOB);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        email \u003d Optional.of(new Email(DEFAULT_EMAIL));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        address \u003d Optional.of(new Address(DEFAULT_ADDRESS));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        height \u003d Optional.of(new Height(DEFAULT_HEIGHT));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        weight \u003d Optional.of(new Weight(DEFAULT_WEIGHT));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        bmi \u003d Optional.of(new Bmi(DEFAULT_BMI));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        bloodType \u003d Optional.of(new BloodType(DEFAULT_BLOOD_TYPE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        allergies \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        conditions \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        treatments \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        medicalNoteList \u003d new MedicalNoteList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Initializes the PatientBuilder with the data of {@code patientToCopy}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public PatientBuilder(Patient patientToCopy) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        ic \u003d patientToCopy.getIc();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        name \u003d patientToCopy.getName();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        dateOfBirth \u003d patientToCopy.getDateOfBirth();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        phone \u003d patientToCopy.getPhone();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        email \u003d patientToCopy.getEmail();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        address \u003d patientToCopy.getAddress();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        height \u003d patientToCopy.getHeight();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        weight \u003d patientToCopy.getWeight();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        bmi \u003d patientToCopy.getBmi();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        bloodType \u003d patientToCopy.getBloodType();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        allergies \u003d new HashSet\u003c\u003e(patientToCopy.getAllergies());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        conditions \u003d new HashSet\u003c\u003e(patientToCopy.getConditions());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        treatments \u003d new HashSet\u003c\u003e(patientToCopy.getTreatments());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        medicalNoteList \u003d patientToCopy.getMedicalNoteList().makeCopy();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Sets the {@code Ic} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public PatientBuilder withIc(String ic) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        this.ic \u003d new Ic(ic);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Sets the {@code Name} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public PatientBuilder withName(String name) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Sets the {@code DateOfBirth} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public PatientBuilder withDateOfBirth(String dateOfBirth) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        this.dateOfBirth \u003d new DateOfBirth(dateOfBirth);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Parses {@code allergies} into a {@code Set\u003cAllergy\u003e} and set it to the {@code Patient} that we are building."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public PatientBuilder withAllergies(String ... allergies) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.allergies \u003d SampleDataUtil.getAllergySet(allergies);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Parses {@code conditions} into a {@code Set\u003cCondition\u003e} and set it to the {@code Patient} that we are building."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public PatientBuilder withConditions(String ... conditions) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.conditions \u003d SampleDataUtil.getConditionSet(conditions);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Parses {@code treatments} into a {@code Set\u003cTreatment\u003e} and set it to the {@code Patient} that we are building."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public PatientBuilder withTreatments(String ... treatments) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.treatments \u003d SampleDataUtil.getTreatmentSet(treatments);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Sets the {@code Address} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public PatientBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (address.isBlank()) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            this.address \u003d Optional.empty();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            this.address \u003d Optional.of(new Address(address));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Sets the {@code Phone} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public PatientBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Sets the {@code Email} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public PatientBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (email.isBlank()) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            this.email \u003d Optional.empty();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            this.email \u003d Optional.of(new Email(email));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Sets the {@code Height} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public PatientBuilder withHeight(String height) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (height.isBlank()) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            this.height \u003d Optional.empty();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            this.height \u003d Optional.of(new Height(height));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Sets the {@code Weight} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public PatientBuilder withWeight(String weight) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (weight.isBlank()) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            this.weight \u003d Optional.empty();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            this.weight \u003d Optional.of(new Weight(weight));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Sets the {@code Bmi} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public PatientBuilder withBmi(String bmi) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (bmi.isBlank()) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            this.bmi \u003d Optional.empty();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            this.bmi \u003d Optional.of(new Bmi(bmi));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Sets the {@code BloodType} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public PatientBuilder withBloodType(String bloodType) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (bloodType.isBlank()) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            this.bloodType \u003d Optional.empty();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            this.bloodType \u003d Optional.of(new BloodType(bloodType));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Sets the {@code MedicalNoteList} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public PatientBuilder withMedicalNoteList(MedicalNoteList medicalNoteList) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        this.medicalNoteList \u003d medicalNoteList;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Creates Patient object based on the fields specified in this PatientBuilder object (bmi auto-generated)."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public Patient build() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Patient patient \u003d new Patient(ic, name, dateOfBirth, phone, email, address, height, weight,"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                bloodType, allergies, conditions, treatments);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        patient.setMedicalNoteList(medicalNoteList.makeCopy());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return patient;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "divakarmal"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Creates Patient object based on the fields specified in this PatientBuilder object (bmi explicitly specified)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public Patient buildWithSpecifiedBmi() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        Patient patient \u003d new Patient(ic, name, dateOfBirth, phone, email, address, height, weight, bmi,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                bloodType, allergies, conditions, treatments);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        patient.setMedicalNoteList(medicalNoteList.makeCopy());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return patient;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 35,
      "divakarmal": 140,
      "foojingyi": 33,
      "PrestonTYR": 43
    }
  },
  {
    "path": "src/test/java/seedu/medibook/testutil/PatientUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_ALLERGY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_BLOOD_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_CONDITION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_IC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_TREATMENT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.parser.CliSyntax.PREFIX_WEIGHT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicaldetail.Allergy;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicaldetail.Condition;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import seedu.medibook.model.medicaldetail.Treatment;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * A utility class for Patient."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public class PatientUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Returns an add command string for adding the {@code patient}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static String getAddCommand(Patient patient) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPatientDetails(patient);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Returns the part of command string for the given {@code patient}\u0027s details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static String getPatientDetails(Patient patient) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        sb.append(PREFIX_IC + patient.getIc().ic + \" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        sb.append(PREFIX_NAME + patient.getName().fullName + \" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        sb.append(PREFIX_DATE + patient.getDateOfBirthInputString() + \" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        sb.append(PREFIX_PHONE + patient.getPhone().value + \" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (patient.getEmail().isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            sb.append(PREFIX_EMAIL + patient.getStringEmail() + \" \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (patient.getAddress().isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            sb.append(PREFIX_ADDRESS + patient.getStringAddress() + \" \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (patient.getHeight().isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            sb.append(PREFIX_HEIGHT + patient.getStringHeight() + \" \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (patient.getWeight().isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            sb.append(PREFIX_WEIGHT + patient.getStringWeight() + \" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        if (patient.getBloodType().isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            sb.append(PREFIX_BLOOD_TYPE + patient.getStringBloodType() + \" \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        patient.getAllergies().stream().forEach("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            s -\u003e sb.append(PREFIX_ALLERGY + s.tagName + \" \")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        );"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        patient.getConditions().stream().forEach("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            s -\u003e sb.append(PREFIX_CONDITION + s.tagName + \" \")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        );"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        patient.getTreatments().stream().forEach("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            s -\u003e sb.append(PREFIX_TREATMENT + s.tagName + \" \")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Returns the part of command string for the given {@code EditPatientDescriptor}\u0027s details."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static String getEditPatientDescriptorDetails(EditCommand.EditPatientDescriptor descriptor) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        descriptor.getIc().ifPresent(ic -\u003e sb.append(PREFIX_IC).append(ic.ic).append(\" \"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        descriptor.getDateOfBirth()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            .ifPresent(dateOfBirth -\u003e sb.append(PREFIX_DATE).append(dateOfBirth.getInputString()).append(\" \"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        descriptor.getHeight().ifPresent(height -\u003e sb.append(PREFIX_HEIGHT).append(height.value).append(\" \"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        descriptor.getWeight().ifPresent(weight -\u003e sb.append(PREFIX_WEIGHT).append(weight.value).append(\" \"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        descriptor.getBloodType().ifPresent(bloodType -\u003e sb.append(PREFIX_BLOOD_TYPE)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                .append(bloodType.bloodType.label).append(\" \"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (descriptor.getAllergies().isPresent()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            Set\u003cAllergy\u003e allergies \u003d descriptor.getAllergies().get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            if (allergies.isEmpty()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                sb.append(PREFIX_ALLERGY).append(\" \");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                allergies.forEach(s -\u003e sb.append(PREFIX_ALLERGY).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (descriptor.getConditions().isPresent()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            Set\u003cCondition\u003e conditions \u003d descriptor.getConditions().get();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            if (conditions.isEmpty()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                sb.append(PREFIX_CONDITION).append(\" \");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                conditions.forEach(s -\u003e sb.append(PREFIX_CONDITION).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (descriptor.getTreatments().isPresent()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            Set\u003cTreatment\u003e treatments \u003d descriptor.getTreatments().get();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            if (treatments.isEmpty()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "                sb.append(PREFIX_TREATMENT).append(\" \");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                treatments.forEach(s -\u003e sb.append(PREFIX_TREATMENT).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 3,
      "divakarmal": 30,
      "foojingyi": 37,
      "PrestonTYR": 27,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/medibook/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/medibook/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Returns the middle index of the patient in the {@code model}\u0027s patient list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPatientList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Returns the last index of the patient in the {@code model}\u0027s patient list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPatientList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Returns the patient in the {@code model}\u0027s patient list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static Patient getPatient(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return model.getFilteredPatientList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 11,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/medibook/testutil/TypicalAccounts.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "package seedu.medibook.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.Account;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.UserAccountsList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.commonfields.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.doctor.Doctor;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "import seedu.medibook.model.doctor.Mcr;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "public class TypicalAccounts {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static final Account VALID_ACCOUNT1 \u003d new Account(\"user1\", \"password1\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            new Doctor(new Name(\"Doctor\"), new Mcr(\"M12345Q\")));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static final Account VALID_ACCOUNT2 \u003d new Account(\"user2\", \"password2\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            new Doctor(new Name(\"test\"), new Mcr(\"M65321A\")));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static final Account VALID_ACCOUNT3 \u003d new Account(\"user3\", \"password3\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            new Doctor(new Name(\"asdf\"), new Mcr(\"M11111T\")));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    public static UserAccountsList getTypicalAccountsList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        UserAccountsList userAccounts \u003d new UserAccountsList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        userAccounts.addAccount(VALID_ACCOUNT1);;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        userAccounts.addAccount(VALID_ACCOUNT2);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        userAccounts.addAccount(VALID_ACCOUNT3);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "        return userAccounts;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PrestonTYR": 26
    }
  },
  {
    "path": "src/test/java/seedu/medibook/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final Index INDEX_FIRST \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final Index INDEX_SECOND \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final Index INDEX_THIRD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 3,
      "divakarmal": 2,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/medibook/testutil/TypicalMedicalNotes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package seedu.medibook.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.commonfields.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.commonfields.Name;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.doctor.Doctor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.doctor.Mcr;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.medicalnote.Content;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNote;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNoteList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": " * A utility class containing a list of {@code MedicalNote} objects to be used in tests."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class TypicalMedicalNotes {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    // Medical Notes"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static final MedicalNote VALID_MEDICAL_NOTE1 \u003d new MedicalNote("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            new Date(\"01-01-2020\", true),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new Doctor(new Name(\"Strange\"), new Mcr(\"M52037V\")),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new Content(\"Patient is in critical condition.\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    );"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static final MedicalNote VALID_MEDICAL_NOTE2 \u003d new MedicalNote("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            new Date(\"17-01-2020\", true),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new Doctor(new Name(\"Who\"), new Mcr(\"M62035Z\")),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new Content(\"Patient is recovering well.\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    );"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static final MedicalNote VALID_MEDICAL_NOTE3 \u003d new MedicalNote("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            new Date(\"23-01-2020\", true),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new Doctor(new Name(\"Nick\"), new Mcr(\"M42037V\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new Content(\"Patient has fully recovered.\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    );"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Returns a {@code MedicalNoteList} with all the typical medical notes."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static MedicalNoteList getTypicalMedicalNoteList() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        MedicalNoteList medicalNotes \u003d new MedicalNoteList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        medicalNotes.add(VALID_MEDICAL_NOTE1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        medicalNotes.add(VALID_MEDICAL_NOTE2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        medicalNotes.add(VALID_MEDICAL_NOTE3);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return medicalNotes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 33,
      "wang-jun-hao": 11
    }
  },
  {
    "path": "src/test/java/seedu/medibook/testutil/TypicalPatients.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_ALLERGY_PENICILLIN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_ALLERGY_SHELLFISH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_BLOOD_TYPE_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_BLOOD_TYPE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_CONDITION_BACK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_CONDITION_DIABETES;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_DOB_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_DOB_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_HEIGHT_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_HEIGHT_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_IC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_IC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_TREATMENT_PARACETAMOL;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_TREATMENT_PHYSIOTHERAPY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_WEIGHT_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.logic.commands.CommandTestUtil.VALID_WEIGHT_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.MediBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.commonfields.Date;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.commonfields.Name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.doctor.Doctor;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.doctor.Mcr;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.medicalnote.Content;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNote;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "import seedu.medibook.model.medicalnote.MedicalNoteList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.model.patient.Patient;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "divakarmal"
        },
        "content": " * A utility class containing a list of {@code Patient} objects to be used in tests."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "public class TypicalPatients {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final MedicalNoteList ALICE_MEDICAL_NOTE_LIST \u003d new MedicalNoteList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final MedicalNote ALICE_MEDICAL_NOTE_1 \u003d new MedicalNote(new Date(\"19-02-2020\", true),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new Doctor(new Name(\"John\"), new Mcr(\"MP2819J\")),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new Content(\"Patient is good.\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final MedicalNote ALICE_MEDICAL_NOTE_2 \u003d new MedicalNote(new Date(\"25-08-2020\", true),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new Doctor(new Name(\"John\"), new Mcr(\"MP2819J\")),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new Content(\"Patient is bad.\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        ALICE_MEDICAL_NOTE_LIST.add(ALICE_MEDICAL_NOTE_1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        ALICE_MEDICAL_NOTE_LIST.add(ALICE_MEDICAL_NOTE_2);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final Patient ALICE \u003d new PatientBuilder().withIc(\"S9777777R\").withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .withDateOfBirth(\"15-09-1997\").withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "            .withPhone(\"94351253\").withHeight(\"174\").withWeight(\"48.5\").withBloodType(\"A+\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .withAllergies(\"cat fur (Fel d 1)\").withConditions(\"Migraine\").withTreatments(\"Ibuprofen\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .withMedicalNoteList(ALICE_MEDICAL_NOTE_LIST).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public static final int ALICE_NUM_OF_MEDICAL_NOTES \u003d 2;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final MedicalNoteList BENSON_MEDICAL_NOTE_LIST \u003d new MedicalNoteList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final MedicalNote BENSON_MEDICAL_NOTE_1 \u003d new MedicalNote(new Date(\"14-04-2020\", true),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new Doctor(new Name(\"Gary Lin\"), new Mcr(\"MX1239B\")),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new Content(\"Patient is good.\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final MedicalNote BENSON_MEDICAL_NOTE_2 \u003d new MedicalNote(new Date(\"28-08-2020\", true),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new Doctor(new Name(\"Mary Ann\"), new Mcr(\"MY1039B\")),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new Content(\"Patient is bad.\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        BENSON_MEDICAL_NOTE_LIST.add(BENSON_MEDICAL_NOTE_1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        BENSON_MEDICAL_NOTE_LIST.add(BENSON_MEDICAL_NOTE_2);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final Patient BENSON \u003d new PatientBuilder().withIc(\"S9234567A\").withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .withDateOfBirth(\"01-03-1992\").withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\").withHeight(\"170\").withWeight(\"63.5\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .withBloodType(\"AB+\").withAllergies(\"shellfish\", \"dust mites\").withConditions(\"knee sprain\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .withTreatments(\"Physiotherapy\").withMedicalNoteList(BENSON_MEDICAL_NOTE_LIST).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final MedicalNoteList CARL_MEDICAL_NOTE_LIST \u003d new MedicalNoteList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final MedicalNote CARL_MEDICAL_NOTE_1 \u003d new MedicalNote(new Date(\"02-05-2020\", true),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new Doctor(new Name(\"John\"), new Mcr(\"MP2819J\")),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new Content(\"Patient is good.\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final MedicalNote CARL_MEDICAL_NOTE_2 \u003d new MedicalNote(new Date(\"12-07-2020\", true),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new Doctor(new Name(\"John\"), new Mcr(\"MP2819J\")),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new Content(\"Patient is bad.\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        CARL_MEDICAL_NOTE_LIST.add(CARL_MEDICAL_NOTE_1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        CARL_MEDICAL_NOTE_LIST.add(CARL_MEDICAL_NOTE_2);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final Patient CARL \u003d new PatientBuilder().withIc(\"S9876543W\").withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .withDateOfBirth(\"16-01-1998\").withPhone(\"95352563\").withEmail(\"heinz@example.com\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            .withAddress(\"wall street\").withHeight(\"162\").withWeight(\"80.8\").withBloodType(\"B+\")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .withAllergies(\"peanut\").withConditions(\"fever\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .withTreatments(\"epinephrine\", \"Paracetamol\").withMedicalNoteList(CARL_MEDICAL_NOTE_LIST).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final MedicalNoteList DANIEL_MEDICAL_NOTE_LIST \u003d new MedicalNoteList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final MedicalNote DANIEL_MEDICAL_NOTE_1 \u003d new MedicalNote(new Date(\"19-02-2020\", true),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new Doctor(new Name(\"John\"), new Mcr(\"MP2819J\")),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new Content(\"Patient is good.\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final MedicalNote DANIEL_MEDICAL_NOTE_2 \u003d new MedicalNote(new Date(\"25-08-2020\", true),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new Doctor(new Name(\"John\"), new Mcr(\"MP2819J\")),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new Content(\"Patient is bad.\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        DANIEL_MEDICAL_NOTE_LIST.add(DANIEL_MEDICAL_NOTE_1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        DANIEL_MEDICAL_NOTE_LIST.add(DANIEL_MEDICAL_NOTE_2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final Patient DANIEL \u003d new PatientBuilder().withIc(\"T0054321P\").withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .withDateOfBirth(\"10-10-2000\").withPhone(\"87652533\").withEmail(\"cornelia@example.com\")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .withAddress(\"10th street\").withHeight(\"183\").withWeight(\"70.3\").withBloodType(\"A-\")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .withAllergies(\"potatoes\").withConditions(\"Type I diabetes\").withTreatments(\"Insulin pump\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .withMedicalNoteList(DANIEL_MEDICAL_NOTE_LIST).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final MedicalNoteList ELLE_MEDICAL_NOTE_LIST \u003d new MedicalNoteList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final MedicalNote ELLE_MEDICAL_NOTE_1 \u003d new MedicalNote(new Date(\"19-02-2020\", true),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new Doctor(new Name(\"John\"), new Mcr(\"MP2819J\")),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new Content(\"Patient is good.\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final MedicalNote ELLE_MEDICAL_NOTE_2 \u003d new MedicalNote(new Date(\"25-08-2020\", true),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new Doctor(new Name(\"John\"), new Mcr(\"MP2819J\")),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new Content(\"Patient is bad.\"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        ELLE_MEDICAL_NOTE_LIST.add(ELLE_MEDICAL_NOTE_1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        ELLE_MEDICAL_NOTE_LIST.add(ELLE_MEDICAL_NOTE_2);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final Patient ELLE \u003d new PatientBuilder().withIc(\"F7654321Q\").withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .withDateOfBirth(\"05-10-1976\").withPhone(\"9482224\").withEmail(\"werner@example.com\")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            .withAddress(\"michegan ave\").withHeight(\"177\").withWeight(\"43.5\").withBloodType(\"B-\")"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            .withMedicalNoteList(ELLE_MEDICAL_NOTE_LIST).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final MedicalNoteList FIONA_MEDICAL_NOTE_LIST \u003d new MedicalNoteList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final MedicalNote FIONA_MEDICAL_NOTE_1 \u003d new MedicalNote(new Date(\"19-02-2020\", true),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new Doctor(new Name(\"John\"), new Mcr(\"MP2819J\")),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new Content(\"Patient is good.\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final MedicalNote FIONA_MEDICAL_NOTE_2 \u003d new MedicalNote(new Date(\"25-08-2020\", true),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new Doctor(new Name(\"John\"), new Mcr(\"MP2819J\")),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new Content(\"Patient is bad.\"));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        FIONA_MEDICAL_NOTE_LIST.add(FIONA_MEDICAL_NOTE_1);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        FIONA_MEDICAL_NOTE_LIST.add(FIONA_MEDICAL_NOTE_2);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final Patient FIONA \u003d new PatientBuilder().withIc(\"S7543210A\").withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .withDateOfBirth(\"02-07-1975\").withPhone(\"9482427\").withEmail(\"lydia@example.com\")"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            .withAddress(\"little tokyo\").withHeight(\"168\").withWeight(\"50.5\").withBloodType(\"O+\")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .withAllergies(\"Penicillin\").withMedicalNoteList(FIONA_MEDICAL_NOTE_LIST).build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final MedicalNoteList GEORGE_MEDICAL_NOTE_LIST \u003d new MedicalNoteList();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final MedicalNote GEORGE_MEDICAL_NOTE_1 \u003d new MedicalNote(new Date(\"19-02-2020\", true),"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new Doctor(new Name(\"John\"), new Mcr(\"MP2819J\")),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new Content(\"Patient is good.\"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final MedicalNote GEORGE_MEDICAL_NOTE_2 \u003d new MedicalNote(new Date(\"25-08-2020\", true),"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new Doctor(new Name(\"John\"), new Mcr(\"MP2819J\")),"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            new Content(\"Patient is bad.\"));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        GEORGE_MEDICAL_NOTE_LIST.add(GEORGE_MEDICAL_NOTE_1);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        GEORGE_MEDICAL_NOTE_LIST.add(GEORGE_MEDICAL_NOTE_2);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final Patient GEORGE \u003d new PatientBuilder().withIc(\"T0232323I\").withName(\"George Best\")"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .withDateOfBirth(\"14-07-2002\").withPhone(\"9482442\").withEmail(\"anna@example.com\").withAddress(\"4th street\")"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .withHeight(\"169\").withWeight(\"69.2\").withBloodType(\"A+\").withConditions(\"fever\")"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .withTreatments(\"Paracetemol\").withMedicalNoteList(GEORGE_MEDICAL_NOTE_LIST).build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final Patient HOON \u003d new PatientBuilder().withIc(\"S8756432F\").withName(\"Hoon Meier\")"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .withDateOfBirth(\"23-03-1987\").withPhone(\"8482424\").withEmail(\"stefan@example.com\")"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            .withAddress(\"little india\").withHeight(\"171\").withBloodType(\"A+\").build();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final Patient IDA \u003d new PatientBuilder().withIc(\"T0066441J\").withName(\"Ida Mueller\")"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .withDateOfBirth(\"01-03-1992\").withPhone(\"8482131\").withEmail(\"hans@example.com\")"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "PrestonTYR"
        },
        "content": "            .withAddress(\"chicago ave\").withHeight(\"160\").withBloodType(\"A+\").build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    // Manually added - Patient\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final Patient AMY \u003d new PatientBuilder().withIc(VALID_IC_AMY).withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .withDateOfBirth(VALID_DOB_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .withAddress(VALID_ADDRESS_AMY).withHeight(VALID_HEIGHT_AMY).withWeight(VALID_WEIGHT_AMY)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .withBloodType(VALID_BLOOD_TYPE_AMY).withTreatments(VALID_TREATMENT_PARACETAMOL)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .withAllergies(VALID_ALLERGY_PENICILLIN).withConditions(VALID_CONDITION_DIABETES).build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static final Patient BOB \u003d new PatientBuilder().withIc(VALID_IC_BOB).withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .withDateOfBirth(VALID_DOB_BOB).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .withAddress(VALID_ADDRESS_BOB).withHeight(VALID_HEIGHT_BOB).withWeight(VALID_WEIGHT_BOB)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .withBloodType(VALID_BLOOD_TYPE_BOB).withAllergies(VALID_ALLERGY_PENICILLIN, VALID_ALLERGY_SHELLFISH)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .withConditions(VALID_CONDITION_BACK, VALID_CONDITION_DIABETES)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            .withTreatments(VALID_TREATMENT_PHYSIOTHERAPY, VALID_TREATMENT_PARACETAMOL).build();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final int VALID_NOTE_INDEX \u003d 2;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static final int OUT_OF_RANGE_NOTE_INDEX \u003d 3;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    private TypicalPatients() {} // prevents instantiation"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "     * Returns an {@code MediBook} with all the typical patients."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static MediBook getTypicalMediBook() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        MediBook mediBook \u003d new MediBook();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        for (Patient patient : getTypicalPatients()) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            Patient newCopyOfPatient \u003d new PatientBuilder(patient).build();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            mediBook.addPatient(newCopyOfPatient);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return mediBook;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     * Returns an {@code MediBook} with all the typical patients with empty medical note list."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "    public static MediBook getTypicalMediBookWithAllEmptyMedicalNoteList() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        MediBook mediBook \u003d new MediBook();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        for (Patient patient : getTypicalPatients()) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            Patient newCopyOfPatient \u003d new PatientBuilder(patient).build();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            newCopyOfPatient.setMedicalNoteList(new MedicalNoteList());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "            mediBook.addPatient(newCopyOfPatient);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "        return mediBook;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "    public static List\u003cPatient\u003e getTypicalPatients() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(new PatientBuilder(ALICE).build(), new PatientBuilder(BENSON).build(),"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                new PatientBuilder(CARL).build(), new PatientBuilder(DANIEL).build(),"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                new PatientBuilder(ELLE).build(), new PatientBuilder(FIONA).build(),"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wang-jun-hao"
        },
        "content": "                new PatientBuilder(GEORGE).build()));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wang-jun-hao": 116,
      "divakarmal": 43,
      "foojingyi": 37,
      "PrestonTYR": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/medibook/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/medibook/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "package seedu.medibook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import static seedu.medibook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "import seedu.medibook.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "\u003c?import seedu.medibook.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "divakarmal"
        },
        "content": "\u003cfx:root type\u003d\"seedu.medibook.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "divakarmal": 1,
      "-": 5
    }
  }
]
